import * as loglevel from "loglevel";
import { DeepPartial, FormAttributes, CoreThemeColors } from "@twilio/flex-ui-core";
import * as actions from "./appconfigStateActions";
import { Theme } from "../components/theme.definition";
/**
 * Predefined theme
 * @typedef {"MediumTheme" | "DarkTheme" | "BlueMediumTheme" | "BlueDarkTheme"} PredefinedThemeName
 * @memberof Configuration
 */
export declare type PredefinedThemeName = "MediumTheme" | "DarkTheme" | "BlueMediumTheme" | "BlueDarkTheme";
/**
 * Theme configuration options
 * @memberof Configuration
 * @typedef {Object} ThemeConfigProps
 * @property {PredefinedThemeName} [baseName] Name of the chosen baseTheme
 * @property {CoreThemeColors} [colors] Partial CoreThemeColors object to customize color values
 * @property {boolean} [light] A boolean value used to correctly set the contrast.
 * @property {Theme} [overrides] Object to customize CSS styles for specific components
 */
export interface ThemeConfigProps {
    baseName?: PredefinedThemeName;
    colors?: Partial<CoreThemeColors>;
    light?: boolean;
    overrides?: DeepPartial<Theme>;
}
export interface SDKOptions {
    chat?: Record<string, unknown>;
}
/**
 * File attachment configuration
 * @typedef Configuration.FileAttachmentConfig
 * @property {boolean} [enabled=false] Whether to enable file attachment feature.
 * @property {number} [maxFileSize=10485760] Maximum file size that can be uploaded. Enter a value in bytes. Default is 10mb.
 * @property {Array<string>} [acceptedExtensions=["jpg", "jpeg", "png", "gif", "txt", "pdf"]] Allowed file extensions to be uploaded.
 * @property {boolean} [readOnly=false] Represents if file attachment is read only
 */
export interface FileAttachmentConfig {
    enabled?: boolean;
    maxFileSize?: number;
    acceptedExtensions?: Array<string>;
    readOnly?: boolean;
}
/**
 * @category Core
 * @namespace Configuration
 * @property {string} accountSid Account sid
 * @property {string} flexFlowSid FlexFlow sid
 * @property {string} [chatFriendlyName] Chat friendly name passed to the rest call to `startEngagementUrl`
 * @property {boolean} [available] Chat service availability. It sets whether to display the EntryPoint or not
 * @property {'trace'| 'debug' | 'info' | 'warn' | 'error' | 'silent'} [logLevel="error"] Level of details for the console debugger
 * @property {Object} [context] Metadata that gets passed to backend about the request
 * @property {Configuration.ThemeConfigProps | Configuration.PredefinedThemeName} [colorTheme] Property that updates the style of the webchat. Accepts a ThemeName or a ThemeConfigProps object
 * @property {boolean} [disableLocalStorage] Whether to ignore previous chat sessions on page refresh or not
 * @property {FormAttributes} [preEngagementConfig] Configuration object for the preEngagement form. NB to display the form, make sure to set `config.startEngagementOnInit` to false
 * @property {boolean} [startEngagementOnInit] Whether to start directly the engagement or to display a PreEngagement form. If set to false, make sure to provide a valid `config.preEngagementConfig` object
 * @property {Object} [componentProps] Object to customize components' defaultProps
 * @property {Object} [sdkOptions] Object containing options for Twilio Chat SDK
 * @property {Object} [sdkOptions.chat] Twilio Chat SDK configuration
 * @property {Object} markdownSupport Config object for Chat markdown support
 * @property {boolean} [markdownSupport.enabled=true] Whether markdown support is enabled or not
 * @property {Configuration.FileAttachmentConfig} [fileAttachment] File attachment configuration
 */
export interface Config {
    accountSid?: string;
    flexFlowSid?: string;
    chatFriendlyName?: string;
    available?: boolean;
    logLevel?: loglevel.LogLevelDesc;
    tokenServerUrl?: string;
    cancelEngagementUrl?: string;
    configurationUrl?: string;
    flexWebChannelsUrl?: string;
    updateEngagementUrl?: string;
    context?: any;
    colorTheme?: ThemeConfigProps | PredefinedThemeName;
    language?: string;
    disableLocalStorage?: boolean;
    preEngagementConfig?: FormAttributes;
    startEngagementOnInit?: boolean;
    componentProps?: Record<string, Record<string, any>>;
    sdkOptions?: SDKOptions;
    markdownSupport?: {
        enabled: boolean;
    };
    fileAttachment?: FileAttachmentConfig;
}
export declare function reduce(state: Config, action: actions.AppConfigAction): Config;
export declare function current(): Config;
export declare class Actions {
    static initConfig(config: Config): void;
    static getConfigFromContextApi(configurationUrl?: string, context?: any): Promise<any>;
    private static fetchConfig;
}
