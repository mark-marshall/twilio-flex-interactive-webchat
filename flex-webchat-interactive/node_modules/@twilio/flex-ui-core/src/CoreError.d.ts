/**
 * CoreError types
 * @category Core Errors
 * @enum {"app" | "chatSDK"} CoreErrorType
 * @property {"app"} app - Errors originating from the app itself
 * @property {"chatSDK"} chatSDK - Errors originating from Chat SDK
 * @memberof CoreError
 */
export declare enum CoreErrorType {
    app = "app",
    chatSDK = "chatSDK"
}
/**
 * CoreError severity
 * @category Core Errors
 * @enum {"user" | "normal" | "severe" } CoreErrorSeverity
 * @property {"user"} user - Errors originating from denial to user request, not actual error
 * @property {"normal"} normal - Normal error condition
 * @property {"severe"} severe - Severe error condition (some system hard down)
 * @memberof CoreError
 */
export declare enum CoreErrorSeverity {
    user = "user",
    normal = "normal",
    severe = "severe"
}
/**
 * Core Error Content
 * @category Core Errors
 * @typedef CoreErrorContents
 * @property {CoreError.CoreErrorType} [type] Type of the error
 * @property {Error} [wrappedError] The original error
 * @property {string} [context] Error context, including theme customizations
 * @property {string} [description] Longer and more verbose description of the error than message property, possibly with variable metadata
 * @property {CoreError.CoreErrorSeverity} [severity] Severity level of the error
 * @memberof CoreError
 */
export declare type CoreErrorContents = {
    type?: CoreErrorType;
    wrappedError?: Error;
    context?: string;
    description?: string;
    severity?: CoreErrorSeverity;
};
export declare class CoreError extends Error {
    /**
     * content
     * @type {CoreErrorContents}
     */
    content: CoreErrorContents;
    /**
     * Date when the error has been triggered
     * @type {Date}
     */
    time: Date;
    constructor(message: string, content?: CoreErrorContents);
    get type(): CoreErrorType;
    get logLine(): string;
}
export declare const isCoreError: (e: Error) => e is CoreError;
