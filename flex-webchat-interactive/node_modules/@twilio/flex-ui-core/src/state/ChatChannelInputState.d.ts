import { Action, Dispatch } from "redux";
import * as ChannelState from "./ChannelState";
/**
 * @typedef {Object} ChatState.MessageState
 * @property {string} inputText="" Text of the message
 * @property {number} selectionStart=0 Start of the message selection
 * @property {number} selectionEnd=0 End of the message selection
 * @property {Array<File>} [attachedFiles] Files attached to the message
 */
export interface MessageState {
    readonly inputText: string;
    readonly selectionStart: number;
    readonly selectionEnd: number;
    readonly attachedFiles?: Array<File>;
}
/**
 * @category State
 * @typedef {Object} ChatState.ChatChannelInputState
 * @property {ChatState.MessageState} sid Message state for a sid
 */
export interface ChatChannelInputState {
    [sid: string]: MessageState;
}
export interface ChatChannelInputAction extends Action {
    payload?: any;
    meta: {
        channelSid: string;
    };
}
export declare const ACTION_UPDATE_CHANNEL_INPUT = "CHANNEL_INPUT_UPDATE";
export declare const ACTION_ATTACH_CHANNEL_FILES = "CHANNEL_FILES_ATTACH";
export declare const ACTION_DETACH_CHANNEL_FILES = "CHANNEL_FILES_DETACH";
export declare function reduce(state: ChatChannelInputState, action: ChatChannelInputAction): ChatChannelInputState;
export declare class Actions {
    private static _dispatcher;
    static get dispatcher(): Dispatch<any>;
    static set dispatcher(dispatcher: Dispatch<any>);
    static setInputText(channel: ChannelState.ChannelState, body: string, selectionStart?: number, selectionEnd?: number): void;
    static attachFile(channel: ChannelState.ChannelState, file: File): void;
    static detachFile(channel: ChannelState.ChannelState, file: File): void;
}
