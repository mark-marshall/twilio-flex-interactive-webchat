import * as React from "react";
import { CSSProps } from "../CSSProps";
/**
 * Available types for FiltersListItem
 *
 * @enum {"multiValue"} FiltersListItemType
 * @memberOf FiltersList
 * @property {"multiValue"} multiValue - Renders a type of filter input supporting multiple options
 * @private
 */
export declare enum FiltersListItemType {
    multiValue = "multiValue"
}
/**
 * @typedef FiltersList.CustomFilterItemStructure
 * Interface defining the necessary React Elements for using a custom FilterListItem selector.
 * @property {React.ReactElement} field - input field that will provide the filter value. Make sure to trigger `props.handleChange` on field change.
 * @property {React.ReactElement} label - textual content to be displayed as FilterListItem summary. It receives `props.currentValue`, for single value filters, and `props.activeOption`, for multiple choice filters, that can both be used to dynamically change its content.
 * @private
 */
export interface CustomFilterItemStructure {
    field: React.ReactElement;
    label: React.ReactElement;
}
/**
 * Actions with payload
 *
 * @typedef FiltersList.FilterDefinition
 * @property {string} id - Filter id, subject of the filter query
 * @property {React.ReactChild} title - Display of the filter group
 * @property {FiltersList.FiltersListItemType} type - Depending on this variable a different input field will be rendered in the component.
 * @property {string} fieldName - name of the checkbox fields.
 * @property {FiltersList.FilterDefinitionOption[]} [options] - For multiValue type, it provides the filter options
 * @property {string} [condition] - Optional parameter to define comparison operator. Ie. IN, NOT_IN, CONTAINS
 * @property {FiltersList.CustomFilterItemStructure} [customStructure] - Define to use non-native types of field to be display
 * @private
 */
export interface FilterDefinition {
    id: string;
    title: React.ReactChild;
    fieldName: string;
    type?: FiltersListItemType;
    options?: Array<FilterDefinitionOption>;
    customStructure?: CustomFilterItemStructure;
    condition?: string;
}
/**
 * Object describing a single Filter option
 *
 * @typedef FiltersList.FilterDefinitionOption
 * @property {string} value - Value of the filter option
 * @property {string} name - Friendly name of the option
 * @property {boolean} default - Whether the option should be selected by default
 * @private
 */
export interface FilterDefinitionOption {
    value: string;
    label: string;
    default?: boolean;
}
/**
 * @typedef FiltersList.FiltersListProps
 * @property {FiltersList.FilterDefinition[]} filters - Value of the filter option
 * @property {React.ReactChild} headerLabel - Textual content rendered in the header
 * @property {React.ReactChild} resetLabel - Textual content rendered 'reset' button
 * @property {React.ReactChild} applyLabel - Textual content rendered 'apply' button
 * @property {function} handleResetClick - Callback invoked on 'reset' button click
 * @property {function} handleApplyClick - Callback invoked on 'apply' button click and form submit
 * @property {boolean} [actionsDisabled] - Boolean to force main buttons to be disabled
 * @private
 */
export interface FiltersListProps {
    filters: Array<FilterDefinition>;
    legacyFilters?: Array<{
        query: string;
        text?: string;
    }>;
    appliedFilters: FiltersData;
    appliedLegacyFilterQuery: string;
    headerLabel: React.ReactChild;
    resetLabel: React.ReactChild;
    applyLabel: React.ReactChild;
    handleResetClick: (data?: object) => void;
    handleApplyClick: (data: object, legacyFilterQuery: string) => void;
    actionsDisabled?: boolean;
}
/**
 * @typedef Theme.FiltersListThemeProps
 * @property {CSSProps} ApplyButton - Styles for the main "Apply" button
 * @property {CSSProps} ResetButton - Styles for the secondary "Reset" button
 * @property {CSSProps} ItemContainer - Styles for the filter item wrapper element
 * @property {CSSProps} ItemContainerExpanded - Styles for the expanded filter item wrapper element
 */
export interface FiltersListThemeProps {
    ApplyButton: CSSProps;
    ResetButton: CSSProps;
    ItemContainer: CSSProps;
    ItemContainerExpanded: CSSProps;
}
interface FiltersData {
    [filterKey: string]: any;
}
interface FiltersListState {
    currentFilters: FiltersData;
    defaultFilters: FiltersData;
    expandedFilterId: string;
    selectedLegacyFilterQuery: string;
}
/**
 * @class FiltersList
 * @classdesc A component rendering a list of dynamic filters.
 * Can be themed with [theme.FiltersList]{@link FiltersList.FiltersListThemeProps}
 *
 * @component
 * @category Components / Basic
 * @hideconstructor
 * @param {FiltersList.FiltersListProps}
 * @private
 */
export declare class FiltersList extends React.PureComponent<FiltersListProps, FiltersListState> {
    state: FiltersListState;
    static defaultProps: Partial<FiltersListProps>;
    static getDerivedStateFromProps(props: FiltersListProps, state: FiltersListState): {
        currentFilters: FiltersData;
        defaultFilters: FiltersData;
        expandedFilterId: string;
        selectedLegacyFilterQuery: string;
    };
    static getDefaultFilterValues(filters: Array<FilterDefinition>): FiltersData;
    render(): JSX.Element;
    private hasFilterApplied;
    private hasAllChangesApplied;
    private handleFilterChange;
    private handleSubmit;
    private applyFilters;
    private handleReset;
    private handleExpandClick;
    private handleSelectLegacyFilter;
}
export {};
