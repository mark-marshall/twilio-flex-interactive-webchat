import * as React from "react";
/**
 * @typedef ColumnDefinitionProps
 * @memberof ColumnDefinition
 *
 * @property {Function | React.ReactNode} content Renders cell content. If it's a function,
 * it receives DataTable row data as the first argument and DataTable context as the second argument.
 * The render function should return React.ReactNode.
 * @property {React.ReactNode} header Header content.
 * @property {string} [headerColSpanKey] Specify the same key for adjacent columns if you want to merge their headers.
 * @property {string} [name] Column name is used to add custom classes to cells in the column.
 * @property {React.ReactNode} [subHeader] Subheader content.
 * @property {Function} [sortingFn] A function that defines sort order. The function should return a negative, zero, or positive value.
 * It receives data for two rows to sort as arguments.
 * @property {"asc" | "desc"} [sortDirection]
 * @property {React.CSSProperties} [style]
 */
export interface DataTableColumnDefinition<T, C> {
    name?: string;
    header: React.ReactNode;
    headerColSpanKey?: string;
    subHeader?: React.ReactNode;
    style?: React.CSSProperties;
    content: ((item: T, context: C) => React.ReactNode) | React.ReactNode;
    sortingFn?: (a: T, b: T) => number;
    sortDirection?: "asc" | "desc";
}
export declare type ColumnDefinitionElement<T, C> = React.ReactElement<DataTableColumnDefinition<T, C>>;
/**
 * @alias ColumnDefinition
 * @classdesc A component used to add a column to a DataTable (e.g. {@link QueuesStatsâ€¤QueuesDataTable})
 * @component
 * @hideconstructor
 * @param {ColumnDefinitionProps} props - ColumnDefinition props
 * @category Components / Programmable
 */
export declare class ColumnDefinition<T = any, C = any> extends React.Component<DataTableColumnDefinition<T, C>> {
    render(): null;
}
