{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Registrar = void 0;\n\nvar events_1 = require(\"events\");\n\nvar registrar_connector_1 = require(\"./registrar.connector\");\n\nvar twilsock_connector_1 = require(\"./twilsock.connector\");\n/**\n * Provides an interface to the ERS registrar\n */\n\n\nvar Registrar = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Registrar, _events_1$EventEmitte);\n\n  /**\n   * Creates the new instance of registrar client\n   */\n  function Registrar(productId, transport, twilsock, config) {\n    var _this;\n\n    _classCallCheck(this, Registrar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Registrar).call(this));\n    _this.config = config;\n    _this.connectors = new Map();\n\n    var platform = _this.detectPlatform();\n\n    _this.connectors.set('gcm', new registrar_connector_1.RegistrarConnector('gcm', {\n      protocolVersion: 3,\n      productId: productId,\n      platform: platform\n    }, transport, config));\n\n    _this.connectors.set('fcm', new registrar_connector_1.RegistrarConnector('fcm', {\n      protocolVersion: 3,\n      productId: productId,\n      platform: platform\n    }, transport, config));\n\n    _this.connectors.set('apn', new registrar_connector_1.RegistrarConnector('apn', {\n      protocolVersion: 4,\n      productId: productId,\n      platform: platform\n    }, transport, config));\n\n    _this.connectors.set('twilsock', new twilsock_connector_1.TwilsockConnector({\n      productId: productId,\n      platform: platform\n    }, twilsock, config));\n\n    _this.connectors.get('twilsock').on('transportReady', function (state) {\n      return _this.emit('transportReady', state);\n    });\n\n    return _this;\n  }\n  /**\n   *  Sets notification ID.\n   *  If new URI is different from previous, it triggers updating of registration for given channel\n   *\n   *  @param {string} channelType channel type (apn|gcm|fcm|twilsock)\n   *  @param {string} notificationId The notification ID\n   */\n\n\n  _createClass(Registrar, [{\n    key: \"setNotificationId\",\n    value: function setNotificationId(channelType, notificationId) {\n      this.connector(channelType).setNotificationId(notificationId);\n    }\n    /**\n     * Subscribe for given type of message\n     *\n     * @param {String} messageType Message type identifier\n     * @param {String} channelType Channel type, can be 'twilsock', 'gcm' or 'fcm'\n     * @public\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(messageType, channelType) {\n      return this.connector(channelType).subscribe(messageType);\n    }\n    /**\n     * Remove subscription\n     * @param {String} messageType Message type\n     * @param {String} channelType Channel type (twilsock or gcm/fcm)\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(messageType, channelType) {\n      return this.connector(channelType).unsubscribe(messageType);\n    }\n  }, {\n    key: \"updateToken\",\n    value: function updateToken(token) {\n      this.connectors.forEach(function (connector) {\n        return connector.updateToken(token);\n      });\n    }\n    /**\n     * @param {String} type Channel type\n     * @throws {Error} Error with description\n     */\n\n  }, {\n    key: \"connector\",\n    value: function connector(type) {\n      var connector = this.connectors.get(type);\n\n      if (!connector) {\n        throw new Error(\"Unknown channel type: \".concat(type));\n      }\n\n      return connector;\n    }\n    /**\n     * Returns platform string limited to max 128 chars\n     */\n\n  }, {\n    key: \"detectPlatform\",\n    value: function detectPlatform() {\n      var platform = '';\n\n      if (typeof navigator !== 'undefined') {\n        platform = 'unknown';\n\n        if (typeof navigator.product !== 'undefined') {\n          platform = navigator.product;\n        }\n\n        if (typeof navigator.userAgent !== 'undefined') {\n          platform = navigator.userAgent;\n        }\n      } else {\n        platform = 'web';\n      }\n\n      return platform.substring(0, 128);\n    }\n  }]);\n\n  return Registrar;\n}(events_1.EventEmitter);\n\nexports.Registrar = Registrar;","map":null,"metadata":{},"sourceType":"script"}