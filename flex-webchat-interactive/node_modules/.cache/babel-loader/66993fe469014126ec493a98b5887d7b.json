{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SyncEntity = void 0;\n\nvar SyncEntity = /*#__PURE__*/function () {\n  function SyncEntity(services, removalHandler) {\n    _classCallCheck(this, SyncEntity);\n\n    this.services = services;\n    this.removalHandler = removalHandler;\n    this.subscriptionState = 'none';\n    this._attachedListeners = new Map();\n  }\n\n  _createClass(SyncEntity, [{\n    key: \"_advanceLastEventId\",\n    value: function _advanceLastEventId(eventId, revision) {}\n  }, {\n    key: \"reportFailure\",\n    value: function reportFailure(err) {\n      if (err.status === 404) {\n        // assume that 404 means that entity has been removed while we were away\n        this.onRemoved(false);\n      } else {\n        this.broadcastEventToListeners('failure', err);\n      }\n    }\n    /**\n     * Subscribe to changes of data entity\n     * @private\n     */\n\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe() {\n      this.services.router.subscribe(this.sid, this);\n    }\n    /**\n     * Unsubscribe from changes of current data entity\n     * @private\n     */\n\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.services.router.unsubscribe(this.sid);\n    }\n  }, {\n    key: \"_setSubscriptionState\",\n    value: function _setSubscriptionState(newState) {\n      this.subscriptionState = newState;\n      this.broadcastEventToListeners('_subscriptionStateChanged', newState);\n    }\n    /**\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._unsubscribe();\n\n      if (this.removalHandler != null) {\n        this.removalHandler(this.type, this.sid, this.uniqueName);\n      }\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(closeable) {\n      var uuid = closeable.listenerUuid;\n\n      var existingRecord = this._attachedListeners.get(uuid);\n\n      if (existingRecord) {\n        return;\n      }\n\n      if (!this._attachedListeners.size) {\n        // the first one to arrive\n        this._subscribe();\n      }\n\n      this._attachedListeners.set(uuid, closeable);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach(listenerUuid) {\n      this._attachedListeners.delete(listenerUuid);\n\n      if (!this._attachedListeners.size) {\n        // last one out, turn off lights, shut the door\n        this.close(); // invokes unsubscribe and removal handler\n      }\n    }\n  }, {\n    key: \"broadcastEventToListeners\",\n    value: function broadcastEventToListeners(eventName, args) {\n      var _iterator = _createForOfIteratorHelper(this._attachedListeners.values()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var listener = _step.value;\n          listener.emit(eventName, args);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return SyncEntity;\n}();\n\nexports.SyncEntity = SyncEntity;\nexports.default = SyncEntity;","map":null,"metadata":{},"sourceType":"script"}