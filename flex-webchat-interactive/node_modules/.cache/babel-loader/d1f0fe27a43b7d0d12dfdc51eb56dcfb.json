{"ast":null,"code":"/*!\n * Platform.js v1.3.6\n * Copyright 2014-2020 Benjamin Tan\n * Copyright 2011-2013 John-David Dalton\n * Available under MIT license\n */\n;\n(function () {\n  'use strict';\n  /** Used to determine if values are of the language type `Object`. */\n\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n  /** Used as a reference to the global object. */\n\n  var root = objectTypes[typeof window] && window || this;\n  /** Backup possible global object. */\n\n  var oldRoot = root;\n  /** Detect free variable `exports`. */\n\n  var freeExports = objectTypes[typeof exports] && exports;\n  /** Detect free variable `module`. */\n\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n  /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */\n\n\n  var maxSafeInteger = Math.pow(2, 53) - 1;\n  /** Regular expression to detect Opera. */\n\n  var reOpera = /\\bOpera/;\n  /** Possible global object. */\n\n  var thisBinding = this;\n  /** Used for native method references. */\n\n  var objectProto = Object.prototype;\n  /** Used to check for own properties of an object. */\n\n  var hasOwnProperty = objectProto.hasOwnProperty;\n  /** Used to resolve the internal `[[Class]]` of values. */\n\n  var toString = objectProto.toString;\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n\n  function capitalize(string) {\n    string = String(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n  /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */\n\n\n  function cleanupOS(os, pattern, label) {\n    // Platform tokens are defined at:\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    var data = {\n      '10.0': '10',\n      '6.4': '10 Technical Preview',\n      '6.3': '8.1',\n      '6.2': '8',\n      '6.1': 'Server 2008 R2 / 7',\n      '6.0': 'Server 2008 / Vista',\n      '5.2': 'Server 2003 / XP 64-bit',\n      '5.1': 'XP',\n      '5.01': '2000 SP1',\n      '5.0': '2000',\n      '4.0': 'NT',\n      '4.90': 'ME'\n    }; // Detect Windows version from platform tokens.\n\n    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) && (data = data[/[\\d.]+$/.exec(os)])) {\n      os = 'Windows ' + data;\n    } // Correct character case and cleanup string.\n\n\n    os = String(os);\n\n    if (pattern && label) {\n      os = os.replace(RegExp(pattern, 'i'), label);\n    }\n\n    os = format(os.replace(/ ce$/i, ' CE').replace(/\\bhpw/i, 'web').replace(/\\bMacintosh\\b/, 'Mac OS').replace(/_PowerPC\\b/i, ' OS').replace(/\\b(OS X) [^ \\d]+/i, '$1').replace(/\\bMac (OS X)\\b/, '$1').replace(/\\/(\\d)/, ' $1').replace(/_/g, '.').replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '').replace(/\\bx86\\.64\\b/gi, 'x86_64').replace(/\\b(Windows Phone) OS\\b/, '$1').replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, '$1').split(' on ')[0]);\n    return os;\n  }\n  /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */\n\n\n  function each(object, callback) {\n    var index = -1,\n        length = object ? object.length : 0;\n\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\n      while (++index < length) {\n        callback(object[index], index, object);\n      }\n    } else {\n      forOwn(object, callback);\n    }\n  }\n  /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */\n\n\n  function format(string) {\n    string = trim(string);\n    return /^(?:webOS|i(?:OS|P))/.test(string) ? string : capitalize(string);\n  }\n  /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */\n\n\n  function forOwn(object, callback) {\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n  /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */\n\n\n  function getClassOf(value) {\n    return value == null ? capitalize(value) : toString.call(value).slice(8, -1);\n  }\n  /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */\n\n\n  function isHostType(object, property) {\n    var type = object != null ? typeof object[property] : 'number';\n    return !/^(?:boolean|number|string|undefined)$/.test(type) && (type == 'object' ? !!object[property] : true);\n  }\n  /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */\n\n\n  function qualify(string) {\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\n  }\n  /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */\n\n\n  function reduce(array, callback) {\n    var accumulator = null;\n    each(array, function (value, index) {\n      accumulator = callback(accumulator, value, index, array);\n    });\n    return accumulator;\n  }\n  /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */\n\n\n  function trim(string) {\n    return String(string).replace(/^ +| +$/g, '');\n  }\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */\n\n\n  function parse(ua) {\n    /** The environment context object. */\n    var context = root;\n    /** Used to flag when a custom context is provided. */\n\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String'; // Juggle arguments.\n\n    if (isCustomContext) {\n      context = ua;\n      ua = null;\n    }\n    /** Browser navigator object. */\n\n\n    var nav = context.navigator || {};\n    /** Browser user agent string. */\n\n    var userAgent = nav.userAgent || '';\n    ua || (ua = userAgent);\n    /** Used to flag when `thisBinding` is the [ModuleScope]. */\n\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\n    /** Used to detect if browser is like Chrome. */\n\n    var likeChrome = isCustomContext ? !!nav.likeChrome : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n    /** Internal `[[Class]]` value shortcuts. */\n\n    var objectClass = 'Object',\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\n        enviroClass = isCustomContext ? objectClass : 'Environment',\n        javaClass = isCustomContext && context.java ? 'JavaPackage' : getClassOf(context.java),\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\n    /** Detect Java environments. */\n\n    var java = /\\bJava/.test(javaClass) && context.java;\n    /** Detect Rhino. */\n\n    var rhino = java && getClassOf(context.environment) == enviroClass;\n    /** A character to represent alpha. */\n\n    var alpha = java ? 'a' : \"\\u03B1\";\n    /** A character to represent beta. */\n\n    var beta = java ? 'b' : \"\\u03B2\";\n    /** Browser document object. */\n\n    var doc = context.document || {};\n    /**\n     * Detect Opera browser (Presto-based).\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */\n\n    var opera = context.operamini || context.opera;\n    /** Opera `[[Class]]`. */\n\n    var operaClass = reOpera.test(operaClass = isCustomContext && opera ? opera['[[Class]]'] : getClassOf(opera)) ? operaClass : opera = null;\n    /*------------------------------------------------------------------------*/\n\n    /** Temporary variable used over the script's lifetime. */\n\n    var data;\n    /** The CPU architecture. */\n\n    var arch = ua;\n    /** Platform description array. */\n\n    var description = [];\n    /** Platform alpha/beta indicator. */\n\n    var prerelease = null;\n    /** A flag to indicate that environment features should be used to resolve the platform. */\n\n    var useFeatures = ua == userAgent;\n    /** The browser/environment version. */\n\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\n    /** A flag to indicate if the OS ends with \"/ Version\" */\n\n    var isSpecialCasedOS;\n    /* Detectable layout engines (order is important). */\n\n    var layout = getLayout([{\n      'label': 'EdgeHTML',\n      'pattern': 'Edge'\n    }, 'Trident', {\n      'label': 'WebKit',\n      'pattern': 'AppleWebKit'\n    }, 'iCab', 'Presto', 'NetFront', 'Tasman', 'KHTML', 'Gecko']);\n    /* Detectable browser names (order is important). */\n\n    var name = getName(['Adobe AIR', 'Arora', 'Avant Browser', 'Breach', 'Camino', 'Electron', 'Epiphany', 'Fennec', 'Flock', 'Galeon', 'GreenBrowser', 'iCab', 'Iceweasel', 'K-Meleon', 'Konqueror', 'Lunascape', 'Maxthon', {\n      'label': 'Microsoft Edge',\n      'pattern': '(?:Edge|Edg|EdgA|EdgiOS)'\n    }, 'Midori', 'Nook Browser', 'PaleMoon', 'PhantomJS', 'Raven', 'Rekonq', 'RockMelt', {\n      'label': 'Samsung Internet',\n      'pattern': 'SamsungBrowser'\n    }, 'SeaMonkey', {\n      'label': 'Silk',\n      'pattern': '(?:Cloud9|Silk-Accelerated)'\n    }, 'Sleipnir', 'SlimBrowser', {\n      'label': 'SRWare Iron',\n      'pattern': 'Iron'\n    }, 'Sunrise', 'Swiftfox', 'Vivaldi', 'Waterfox', 'WebPositive', {\n      'label': 'Yandex Browser',\n      'pattern': 'YaBrowser'\n    }, {\n      'label': 'UC Browser',\n      'pattern': 'UCBrowser'\n    }, 'Opera Mini', {\n      'label': 'Opera Mini',\n      'pattern': 'OPiOS'\n    }, 'Opera', {\n      'label': 'Opera',\n      'pattern': 'OPR'\n    }, 'Chromium', 'Chrome', {\n      'label': 'Chrome',\n      'pattern': '(?:HeadlessChrome)'\n    }, {\n      'label': 'Chrome Mobile',\n      'pattern': '(?:CriOS|CrMo)'\n    }, {\n      'label': 'Firefox',\n      'pattern': '(?:Firefox|Minefield)'\n    }, {\n      'label': 'Firefox for iOS',\n      'pattern': 'FxiOS'\n    }, {\n      'label': 'IE',\n      'pattern': 'IEMobile'\n    }, {\n      'label': 'IE',\n      'pattern': 'MSIE'\n    }, 'Safari']);\n    /* Detectable products (order is important). */\n\n    var product = getProduct([{\n      'label': 'BlackBerry',\n      'pattern': 'BB10'\n    }, 'BlackBerry', {\n      'label': 'Galaxy S',\n      'pattern': 'GT-I9000'\n    }, {\n      'label': 'Galaxy S2',\n      'pattern': 'GT-I9100'\n    }, {\n      'label': 'Galaxy S3',\n      'pattern': 'GT-I9300'\n    }, {\n      'label': 'Galaxy S4',\n      'pattern': 'GT-I9500'\n    }, {\n      'label': 'Galaxy S5',\n      'pattern': 'SM-G900'\n    }, {\n      'label': 'Galaxy S6',\n      'pattern': 'SM-G920'\n    }, {\n      'label': 'Galaxy S6 Edge',\n      'pattern': 'SM-G925'\n    }, {\n      'label': 'Galaxy S7',\n      'pattern': 'SM-G930'\n    }, {\n      'label': 'Galaxy S7 Edge',\n      'pattern': 'SM-G935'\n    }, 'Google TV', 'Lumia', 'iPad', 'iPod', 'iPhone', 'Kindle', {\n      'label': 'Kindle Fire',\n      'pattern': '(?:Cloud9|Silk-Accelerated)'\n    }, 'Nexus', 'Nook', 'PlayBook', 'PlayStation Vita', 'PlayStation', 'TouchPad', 'Transformer', {\n      'label': 'Wii U',\n      'pattern': 'WiiU'\n    }, 'Wii', 'Xbox One', {\n      'label': 'Xbox 360',\n      'pattern': 'Xbox'\n    }, 'Xoom']);\n    /* Detectable manufacturers. */\n\n    var manufacturer = getManufacturer({\n      'Apple': {\n        'iPad': 1,\n        'iPhone': 1,\n        'iPod': 1\n      },\n      'Alcatel': {},\n      'Archos': {},\n      'Amazon': {\n        'Kindle': 1,\n        'Kindle Fire': 1\n      },\n      'Asus': {\n        'Transformer': 1\n      },\n      'Barnes & Noble': {\n        'Nook': 1\n      },\n      'BlackBerry': {\n        'PlayBook': 1\n      },\n      'Google': {\n        'Google TV': 1,\n        'Nexus': 1\n      },\n      'HP': {\n        'TouchPad': 1\n      },\n      'HTC': {},\n      'Huawei': {},\n      'Lenovo': {},\n      'LG': {},\n      'Microsoft': {\n        'Xbox': 1,\n        'Xbox One': 1\n      },\n      'Motorola': {\n        'Xoom': 1\n      },\n      'Nintendo': {\n        'Wii U': 1,\n        'Wii': 1\n      },\n      'Nokia': {\n        'Lumia': 1\n      },\n      'Oppo': {},\n      'Samsung': {\n        'Galaxy S': 1,\n        'Galaxy S2': 1,\n        'Galaxy S3': 1,\n        'Galaxy S4': 1\n      },\n      'Sony': {\n        'PlayStation': 1,\n        'PlayStation Vita': 1\n      },\n      'Xiaomi': {\n        'Mi': 1,\n        'Redmi': 1\n      }\n    });\n    /* Detectable operating systems (order is important). */\n\n    var os = getOS(['Windows Phone', 'KaiOS', 'Android', 'CentOS', {\n      'label': 'Chrome OS',\n      'pattern': 'CrOS'\n    }, 'Debian', {\n      'label': 'DragonFly BSD',\n      'pattern': 'DragonFly'\n    }, 'Fedora', 'FreeBSD', 'Gentoo', 'Haiku', 'Kubuntu', 'Linux Mint', 'OpenBSD', 'Red Hat', 'SuSE', 'Ubuntu', 'Xubuntu', 'Cygwin', 'Symbian OS', 'hpwOS', 'webOS ', 'webOS', 'Tablet OS', 'Tizen', 'Linux', 'Mac OS X', 'Macintosh', 'Mac', 'Windows 98;', 'Windows ']);\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */\n\n    function getLayout(guesses) {\n      return reduce(guesses, function (result, guess) {\n        return result || RegExp('\\\\b' + (guess.pattern || qualify(guess)) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n    /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */\n\n\n    function getManufacturer(guesses) {\n      return reduce(guesses, function (result, value, key) {\n        // Lookup the manufacturer by product or scan the UA for the manufacturer.\n        return result || (value[product] || value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] || RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)) && key;\n      });\n    }\n    /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */\n\n\n    function getName(guesses) {\n      return reduce(guesses, function (result, guess) {\n        return result || RegExp('\\\\b' + (guess.pattern || qualify(guess)) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n    /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */\n\n\n    function getOS(guesses) {\n      return reduce(guesses, function (result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n\n        if (!result && (result = RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua))) {\n          result = cleanupOS(result, pattern, guess.label || guess);\n        }\n\n        return result;\n      });\n    }\n    /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */\n\n\n    function getProduct(guesses) {\n      return reduce(guesses, function (result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n\n        if (!result && (result = RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) || RegExp('\\\\b' + pattern + ' *\\\\w+-[\\\\w]*', 'i').exec(ua) || RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua))) {\n          // Split by forward slash and append product version if needed.\n          if ((result = String(guess.label && !RegExp(pattern, 'i').test(guess.label) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\n            result[0] += ' ' + result[1];\n          } // Correct character case and cleanup string.\n\n\n          guess = guess.label || guess;\n          result = format(result[0].replace(RegExp(pattern, 'i'), guess).replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ').replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\n        }\n\n        return result;\n      });\n    }\n    /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */\n\n\n    function getVersion(patterns) {\n      return reduce(patterns, function (result, pattern) {\n        return result || (RegExp(pattern + '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }\n    /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */\n\n\n    function toStringPlatform() {\n      return this.description || '';\n    }\n    /*------------------------------------------------------------------------*/\n    // Convert layout to an array so we can add extra details.\n\n\n    layout && (layout = [layout]); // Detect Android products.\n    // Browsers on Android devices typically provide their product IDS after \"Android;\"\n    // up to \"Build\" or \") AppleWebKit\".\n    // Example:\n    // \"Mozilla/5.0 (Linux; Android 8.1.0; Moto G (5) Plus) AppleWebKit/537.36\n    // (KHTML, like Gecko) Chrome/70.0.3538.80 Mobile Safari/537.36\"\n\n    if (/\\bAndroid\\b/.test(os) && !product && (data = /\\bAndroid[^;]*;(.*?)(?:Build|\\) AppleWebKit)\\b/i.exec(ua))) {\n      product = trim(data[1]) // Replace any language codes (eg. \"en-US\").\n      .replace(/^[a-z]{2}-[a-z]{2};\\s*/i, '') || null;\n    } // Detect product names that contain their manufacturer's name.\n\n\n    if (manufacturer && !product) {\n      product = getProduct([manufacturer]);\n    } else if (manufacturer && product) {\n      product = product.replace(RegExp('^(' + qualify(manufacturer) + ')[-_.\\\\s]', 'i'), manufacturer + ' ').replace(RegExp('^(' + qualify(manufacturer) + ')[-_.]?(\\\\w)', 'i'), manufacturer + ' $2');\n    } // Clean up Google TV.\n\n\n    if (data = /\\bGoogle TV\\b/.exec(product)) {\n      product = data[0];\n    } // Detect simulators.\n\n\n    if (/\\bSimulator\\b/i.test(ua)) {\n      product = (product ? product + ' ' : '') + 'Simulator';\n    } // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\n\n\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\n      description.push('running in Turbo/Uncompressed mode');\n    } // Detect IE Mobile 11.\n\n\n    if (name == 'IE' && /\\blike iPhone OS\\b/.test(ua)) {\n      data = parse(ua.replace(/like iPhone OS/, ''));\n      manufacturer = data.manufacturer;\n      product = data.product;\n    } // Detect iOS.\n    else if (/^iP/.test(product)) {\n      name || (name = 'Safari');\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua)) ? ' ' + data[1].replace(/_/g, '.') : '');\n    } // Detect Kubuntu.\n    else if (name == 'Konqueror' && /^Linux\\b/i.test(os)) {\n      os = 'Kubuntu';\n    } // Detect Android browsers.\n    else if (manufacturer && manufacturer != 'Google' && (/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua) || /\\bVita\\b/.test(product)) || /\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua)) {\n      name = 'Android Browser';\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\n    } // Detect Silk desktop/accelerated modes.\n    else if (name == 'Silk') {\n      if (!/\\bMobi/i.test(ua)) {\n        os = 'Android';\n        description.unshift('desktop mode');\n      }\n\n      if (/Accelerated *= *true/i.test(ua)) {\n        description.unshift('accelerated');\n      }\n    } // Detect UC Browser speed mode.\n    else if (name == 'UC Browser' && /\\bUCWEB\\b/.test(ua)) {\n      description.push('speed mode');\n    } // Detect PaleMoon identifying as Firefox.\n    else if (name == 'PaleMoon' && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\n      description.push('identifying as Firefox ' + data[1]);\n    } // Detect Firefox OS and products running Firefox.\n    else if (name == 'Firefox' && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\n      os || (os = 'Firefox OS');\n      product || (product = data[1]);\n    } // Detect false positives for Firefox/Safari.\n    else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n      // Escape the `/` for Firefox 1.\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\n        // Clear name of false positives.\n        name = null;\n      } // Reassign a generic name.\n\n\n      if ((data = product || manufacturer || os) && (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\n      }\n    } // Add Chrome version to description for Electron.\n    else if (name == 'Electron' && (data = (/\\bChrome\\/([\\d.]+)\\b/.exec(ua) || 0)[1])) {\n      description.push('Chromium ' + data);\n    } // Detect non-Opera (Presto-based) versions (order is important).\n\n\n    if (!version) {\n      version = getVersion(['(?:Cloud9|CriOS|CrMo|Edge|Edg|EdgA|EdgiOS|FxiOS|HeadlessChrome|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\\\d.]+$)|UCBrowser|YaBrowser)', 'Version', qualify(name), '(?:Firefox|Minefield|NetFront)']);\n    } // Detect stubborn layout engines.\n\n\n    if (data = layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' || /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') || /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' || !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') || layout == 'WebKit' && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && 'NetFront') {\n      layout = [data];\n    } // Detect Windows Phone 7 desktop mode.\n\n\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n      name += ' Mobile';\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\n      description.unshift('desktop mode');\n    } // Detect Windows Phone 8.x desktop mode.\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\n      name = 'IE Mobile';\n      os = 'Windows Phone 8.x';\n      description.unshift('desktop mode');\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n    } // Detect IE 11 identifying as other browsers.\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n      if (name) {\n        description.push('identifying as ' + name + (version ? ' ' + version : ''));\n      }\n\n      name = 'IE';\n      version = data[1];\n    } // Leverage environment features.\n\n\n    if (useFeatures) {\n      // Detect server-side environments.\n      // Rhino has a global function while others have a global object.\n      if (isHostType(context, 'global')) {\n        if (java) {\n          data = java.lang.System;\n          arch = data.getProperty('os.arch');\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\n        }\n\n        if (rhino) {\n          try {\n            version = context.require('ringo/engine').version.join('.');\n            name = 'RingoJS';\n          } catch (e) {\n            if ((data = context.system) && data.global.system == context.system) {\n              name = 'Narwhal';\n              os || (os = data[0].os || null);\n            }\n          }\n\n          if (!name) {\n            name = 'Rhino';\n          }\n        } else if (typeof context.process == 'object' && !context.process.browser && (data = context.process)) {\n          if (typeof data.versions == 'object') {\n            if (typeof data.versions.electron == 'string') {\n              description.push('Node ' + data.versions.node);\n              name = 'Electron';\n              version = data.versions.electron;\n            } else if (typeof data.versions.nw == 'string') {\n              description.push('Chromium ' + version, 'Node ' + data.versions.node);\n              name = 'NW.js';\n              version = data.versions.nw;\n            }\n          }\n\n          if (!name) {\n            name = 'Node.js';\n            arch = data.arch;\n            os = data.platform;\n            version = /[\\d.]+/.exec(data.version);\n            version = version ? version[0] : null;\n          }\n        }\n      } // Detect Adobe AIR.\n      else if (getClassOf(data = context.runtime) == airRuntimeClass) {\n        name = 'Adobe AIR';\n        os = data.flash.system.Capabilities.os;\n      } // Detect PhantomJS.\n      else if (getClassOf(data = context.phantom) == phantomClass) {\n        name = 'PhantomJS';\n        version = (data = data.version || null) && data.major + '.' + data.minor + '.' + data.patch;\n      } // Detect IE compatibility modes.\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n        // We're in compatibility mode when the Trident version + 4 doesn't\n        // equal the document mode.\n        version = [version, doc.documentMode];\n\n        if ((data = +data[1] + 4) != version[1]) {\n          description.push('IE ' + version[1] + ' mode');\n          layout && (layout[1] = '');\n          version[1] = data;\n        }\n\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\n      } // Detect IE 11 masking as other browsers.\n      else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\\b/.test(name)) {\n        description.push('masking as ' + name + ' ' + version);\n        name = 'IE';\n        version = '11.0';\n        layout = ['Trident'];\n        os = 'Windows';\n      }\n\n      os = os && format(os);\n    } // Detect prerelease phases.\n\n\n    if (version && (data = /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) || /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) || /\\bMinefield\\b/i.test(ua) && 'a')) {\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\n      version = version.replace(RegExp(data + '\\\\+?$'), '') + (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\n    } // Detect Firefox Mobile.\n\n\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS|KaiOS)\\b/.test(os)) {\n      name = 'Firefox Mobile';\n    } // Obscure Maxthon's unreliable version.\n    else if (name == 'Maxthon' && version) {\n      version = version.replace(/\\.[\\d.]+/, '.x');\n    } // Detect Xbox 360 and Xbox One.\n    else if (/\\bXbox\\b/i.test(product)) {\n      if (product == 'Xbox 360') {\n        os = null;\n      }\n\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\n        description.unshift('mobile mode');\n      }\n    } // Add mobile postfix.\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) && (os == 'Windows CE' || /Mobi/i.test(ua))) {\n      name += ' Mobile';\n    } // Detect IE platform preview.\n    else if (name == 'IE' && useFeatures) {\n      try {\n        if (context.external === null) {\n          description.unshift('platform preview');\n        }\n      } catch (e) {\n        description.unshift('embedded');\n      }\n    } // Detect BlackBerry OS version.\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data = (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] || version)) {\n      data = [data, /BB10/.test(ua)];\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\n      version = null;\n    } // Detect Opera identifying/masking itself as another browser.\n    // http://www.opera.com/support/kb/view/843/\n    else if (this != forOwn && product != 'Wii' && (useFeatures && opera || /Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua) || name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os) || name == 'IE' && (os && !/^Win/.test(os) && version > 5.5 || /\\bWindows XP\\b/.test(os) && version > 8 || version == 8 && !/\\bTrident\\b/.test(ua))) && !reOpera.test(data = parse.call(forOwn, ua.replace(reOpera, '') + ';')) && data.name) {\n      // When \"identifying\", the UA contains both Opera and the other browser's name.\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\n\n      if (reOpera.test(name)) {\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\n          os = null;\n        }\n\n        data = 'identify' + data;\n      } // When \"masking\", the UA contains only the other browser's name.\n      else {\n        data = 'mask' + data;\n\n        if (operaClass) {\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\n        } else {\n          name = 'Opera';\n        }\n\n        if (/\\bIE\\b/.test(data)) {\n          os = null;\n        }\n\n        if (!useFeatures) {\n          version = null;\n        }\n      }\n\n      layout = ['Presto'];\n      description.push(data);\n    } // Detect WebKit Nightly and approximate Chrome/Safari versions.\n\n\n    if (data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1]) {\n      // Correct build number for numeric comparison.\n      // (e.g. \"532.5\" becomes \"532.05\")\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data]; // Nightly builds are postfixed with a \"+\".\n\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\n        name = 'WebKit Nightly';\n        prerelease = 'alpha';\n        version = data[1].slice(0, -1);\n      } // Clear incorrect browser versions.\n      else if (version == data[1] || version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n        version = null;\n      } // Use the full Chrome version when available.\n\n\n      data[1] = (/\\b(?:Headless)?Chrome\\/([\\d.]+)/i.exec(ua) || 0)[1]; // Detect Blink layout engine.\n\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {\n        layout = ['Blink'];\n      } // Detect JavaScriptCore.\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n\n\n      if (!useFeatures || !likeChrome && !data[1]) {\n        layout && (layout[1] = 'like Safari');\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : data < 602 ? 9 : data < 604 ? 10 : data < 606 ? 11 : data < 608 ? 12 : '12');\n      } else {\n        layout && (layout[1] = 'like Chrome');\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\n      } // Add the postfix of \".x\" or \"+\" for approximate versions.\n\n\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+')); // Obscure version for some Safari 1-2 releases.\n\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\n        version = data;\n      } else if (name == 'Chrome' && /\\bHeadlessChrome/i.test(ua)) {\n        description.unshift('headless');\n      }\n    } // Detect Opera desktop modes.\n\n\n    if (name == 'Opera' && (data = /\\bzbov|zvav$/.exec(os))) {\n      name += ' ';\n      description.unshift('desktop mode');\n\n      if (data == 'zvav') {\n        name += 'Mini';\n        version = null;\n      } else {\n        name += 'Mobile';\n      }\n\n      os = os.replace(RegExp(' *' + data + '$'), '');\n    } // Detect Chrome desktop mode.\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\n      description.unshift('desktop mode');\n      name = 'Chrome Mobile';\n      version = null;\n\n      if (/\\bOS X\\b/.test(os)) {\n        manufacturer = 'Apple';\n        os = 'iOS 4.3+';\n      } else {\n        os = null;\n      }\n    } // Newer versions of SRWare Iron uses the Chrome tag to indicate its version number.\n    else if (/\\bSRWare Iron\\b/.test(name) && !version) {\n      version = getVersion('Chrome');\n    } // Strip incorrect OS versions.\n\n\n    if (version && version.indexOf(data = /[\\d.]+$/.exec(os)) == 0 && ua.indexOf('/' + data + '-') > -1) {\n      os = trim(os.replace(data, ''));\n    } // Ensure OS does not include the browser name.\n\n\n    if (os && os.indexOf(name) != -1 && !RegExp(name + ' OS').test(os)) {\n      os = os.replace(RegExp(' *' + qualify(name) + ' *'), '');\n    } // Add layout engine.\n\n\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (/Browser|Lunascape|Maxthon/.test(name) || name != 'Safari' && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|SRWare Iron|Vivaldi|Web)/.test(name) && layout[1])) {\n      // Don't add layout details to description if they are falsey.\n      (data = layout[layout.length - 1]) && description.push(data);\n    } // Combine contextual information.\n\n\n    if (description.length) {\n      description = ['(' + description.join('; ') + ')'];\n    } // Append manufacturer to description.\n\n\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n      description.push('on ' + manufacturer);\n    } // Append product to description.\n\n\n    if (product) {\n      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);\n    } // Parse the OS into an object.\n\n\n    if (os) {\n      data = / ([\\d.+]+)$/.exec(os);\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\n      os = {\n        'architecture': 32,\n        'family': data && !isSpecialCasedOS ? os.replace(data[0], '') : os,\n        'version': data ? data[1] : null,\n        'toString': function toString() {\n          var version = this.version;\n          return this.family + (version && !isSpecialCasedOS ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\n        }\n      };\n    } // Add browser/OS architecture.\n\n\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n      if (os) {\n        os.architecture = 64;\n        os.family = os.family.replace(RegExp(' *' + data), '');\n      }\n\n      if (name && (/\\bWOW64\\b/i.test(ua) || useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua))) {\n        description.unshift('32-bit');\n      }\n    } // Chrome 39 and above on OS X is always 64-bit.\n    else if (os && /^OS X/.test(os.family) && name == 'Chrome' && parseFloat(version) >= 39) {\n      os.architecture = 64;\n    }\n\n    ua || (ua = null);\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */\n\n    var platform = {};\n    /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n\n    platform.description = ua;\n    /**\n     * The name of the browser's layout engine.\n     *\n     * The list of common layout engines include:\n     * \"Blink\", \"EdgeHTML\", \"Gecko\", \"Trident\" and \"WebKit\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n\n    platform.layout = layout && layout[0];\n    /**\n     * The name of the product's manufacturer.\n     *\n     * The list of manufacturers include:\n     * \"Apple\", \"Archos\", \"Amazon\", \"Asus\", \"Barnes & Noble\", \"BlackBerry\",\n     * \"Google\", \"HP\", \"HTC\", \"LG\", \"Microsoft\", \"Motorola\", \"Nintendo\",\n     * \"Nokia\", \"Samsung\" and \"Sony\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n\n    platform.manufacturer = manufacturer;\n    /**\n     * The name of the browser/environment.\n     *\n     * The list of common browser names include:\n     * \"Chrome\", \"Electron\", \"Firefox\", \"Firefox for iOS\", \"IE\",\n     * \"Microsoft Edge\", \"PhantomJS\", \"Safari\", \"SeaMonkey\", \"Silk\",\n     * \"Opera Mini\" and \"Opera\"\n     *\n     * Mobile versions of some browsers have \"Mobile\" appended to their name:\n     * eg. \"Chrome Mobile\", \"Firefox Mobile\", \"IE Mobile\" and \"Opera Mobile\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n\n    platform.name = name;\n    /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n\n    platform.prerelease = prerelease;\n    /**\n     * The name of the product hosting the browser.\n     *\n     * The list of common products include:\n     *\n     * \"BlackBerry\", \"Galaxy S4\", \"Lumia\", \"iPad\", \"iPod\", \"iPhone\", \"Kindle\",\n     * \"Kindle Fire\", \"Nexus\", \"Nook\", \"PlayBook\", \"TouchPad\" and \"Transformer\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n\n    platform.product = product;\n    /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n\n    platform.ua = ua;\n    /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n\n    platform.version = name && version;\n    /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */\n\n    platform.os = os || {\n      /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */\n      'architecture': null,\n\n      /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Linux\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\",\n       * \"SuSE\", \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'family': null,\n\n      /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'version': null,\n\n      /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */\n      'toString': function toString() {\n        return 'null';\n      }\n    };\n    platform.parse = parse;\n    platform.toString = toStringPlatform;\n\n    if (platform.version) {\n      description.unshift(version);\n    }\n\n    if (platform.name) {\n      description.unshift(name);\n    }\n\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\n      description.push(product ? '(' + os + ')' : 'on ' + os);\n    }\n\n    if (description.length) {\n      platform.description = description.join(' ');\n    }\n\n    return platform;\n  }\n  /*--------------------------------------------------------------------------*/\n  // Export platform.\n\n\n  var platform = parse(); // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose platform on the global object to prevent errors when platform is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    root.platform = platform; // Define as an anonymous module so platform can be aliased through path mapping.\n\n    define(function () {\n      return platform;\n    });\n  } // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && freeModule) {\n    // Export for CommonJS support.\n    forOwn(platform, function (value, key) {\n      freeExports[key] = value;\n    });\n  } else {\n    // Export to the global object.\n    root.platform = platform;\n  }\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}