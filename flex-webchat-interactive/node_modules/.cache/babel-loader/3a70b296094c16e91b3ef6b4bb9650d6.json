{"ast":null,"code":"\"use strict\";\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar member_1 = require(\"../member\");\n\nvar logger_1 = require(\"../logger\");\n\nvar log = logger_1.Logger.scope('Members');\n/**\n * @classdesc Represents the collection of members for the channel\n * @fires Members#memberJoined\n * @fires Members#memberLeft\n * @fires Members#memberUpdated\n */\n\nvar Members = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Members, _events_1$EventEmitte);\n\n  function Members(channel, services, members) {\n    (0, _classCallCheck3.default)(this, Members);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Members.__proto__ || (0, _getPrototypeOf2.default)(Members)).call(this));\n\n    _this.services = services;\n    _this.channel = channel;\n    _this.members = members;\n    return _this;\n  }\n\n  (0, _createClass3.default)(Members, [{\n    key: \"unsubscribe\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var entity;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.rosterEntityPromise) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.rosterEntityPromise;\n\n              case 3:\n                entity = _context.sent;\n                entity.close();\n                this.rosterEntityPromise = null;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function unsubscribe() {\n        return _ref.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(rosterObjectName) {\n      var _this2 = this;\n\n      return this.rosterEntityPromise = this.rosterEntityPromise || this.services.syncClient.map({\n        id: rosterObjectName,\n        mode: 'open_existing'\n      }).then(function (rosterMap) {\n        rosterMap.on('itemAdded', function (args) {\n          log.debug(_this2.channel.sid + ' itemAdded: ' + args.item.key);\n\n          _this2.upsertMember(args.item.key, args.item.value).then(function (member) {\n            _this2.emit('memberJoined', member);\n          });\n        });\n        rosterMap.on('itemRemoved', function (args) {\n          log.debug(_this2.channel.sid + ' itemRemoved: ' + args.key);\n          var memberSid = args.key;\n\n          if (!_this2.members.has(memberSid)) {\n            return;\n          }\n\n          var leftMember = _this2.members.get(memberSid);\n\n          _this2.members.delete(memberSid);\n\n          _this2.emit('memberLeft', leftMember);\n        });\n        rosterMap.on('itemUpdated', function (args) {\n          log.debug(_this2.channel.sid + ' itemUpdated: ' + args.item.key);\n\n          _this2.upsertMember(args.item.key, args.item.value);\n        });\n        var membersPromises = [];\n        var that = _this2;\n\n        var rosterMapHandler = function rosterMapHandler(paginator) {\n          paginator.items.forEach(function (item) {\n            membersPromises.push(that.upsertMember(item.key, item.value));\n          });\n          return paginator.hasNextPage ? paginator.nextPage().then(rosterMapHandler) : null;\n        };\n\n        return rosterMap.getItems().then(rosterMapHandler).then(function () {\n          return _promise2.default.all(membersPromises);\n        }).then(function () {\n          return rosterMap;\n        });\n      }).catch(function (err) {\n        _this2.rosterEntityPromise = null;\n\n        if (_this2.services.syncClient.connectionState != 'disconnected') {\n          log.error('Failed to get roster object for channel', _this2.channel.sid, err);\n        }\n\n        log.debug('ERROR: Failed to get roster object for channel', _this2.channel.sid, err);\n        throw err;\n      });\n    }\n  }, {\n    key: \"upsertMember\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(memberSid, data) {\n        var _this3 = this;\n\n        var member;\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                member = this.members.get(memberSid);\n\n                if (!member) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", member._update(data));\n\n              case 3:\n                member = new member_1.Member(this.services, this.channel, data, memberSid);\n                this.members.set(memberSid, member);\n                member.on('updated', function (args) {\n                  return _this3.emit('memberUpdated', args);\n                });\n                return _context2.abrupt(\"return\", member);\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function upsertMember(_x, _x2) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return upsertMember;\n    }()\n    /**\n     * @returns {Promise<Array<Member>>} returns list of members {@see Member}\n     */\n\n  }, {\n    key: \"getMembers\",\n    value: function getMembers() {\n      var _this4 = this;\n\n      return this.rosterEntityPromise.then(function () {\n        var members = [];\n\n        _this4.members.forEach(function (member) {\n          return members.push(member);\n        });\n\n        return members;\n      });\n    }\n    /**\n     * Get member by SID from channel\n     * @returns {Promise<|Error>}\n     */\n\n  }, {\n    key: \"getMemberBySid\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(memberSid) {\n        var _this5 = this;\n\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.rosterEntityPromise.then(function () {\n                  var member = _this5.members.get(memberSid);\n\n                  if (!member) {\n                    throw new Error('Member with SID ' + memberSid + ' was not found');\n                  }\n\n                  return member;\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getMemberBySid(_x3) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return getMemberBySid;\n    }()\n    /**\n     * Get member by identity from channel\n     * @returns {Promise<|Error>}\n     */\n\n  }, {\n    key: \"getMemberByIdentity\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(identity) {\n        var _this6 = this;\n\n        var foundMember;\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                foundMember = null;\n                return _context4.abrupt(\"return\", this.rosterEntityPromise.then(function () {\n                  _this6.members.forEach(function (member) {\n                    if (member.identity === identity) {\n                      foundMember = member;\n                    }\n                  });\n\n                  if (!foundMember) {\n                    throw new Error('Member with identity ' + identity + ' was not found');\n                  }\n\n                  return foundMember;\n                }));\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getMemberByIdentity(_x4) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return getMemberByIdentity;\n    }()\n    /**\n     * Add user to the channel\n     * @returns {Promise<void|SessionError>}\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(identity) {\n      return this.services.session.addCommand('addMemberV2', {\n        channelSid: this.channel.sid,\n        username: identity\n      });\n    }\n    /**\n     * Invites user to the channel\n     * User can choose either to join or not\n     * @returns {Promise<|SessionError>}\n     */\n\n  }, {\n    key: \"invite\",\n    value: function invite(identity) {\n      return this.services.session.addCommand('inviteMember', {\n        channelSid: this.channel.sid,\n        username: identity\n      });\n    }\n    /**\n     * Remove member from channel by Identity\n     * @returns {Promise<|SessionError>}\n     */\n\n  }, {\n    key: \"removeByIdentity\",\n    value: function removeByIdentity(identity) {\n      return this.services.session.addCommand('removeMember', {\n        channelSid: this.channel.sid,\n        username: identity\n      });\n    }\n    /**\n     * Remove member from channel by sid\n     * @returns {Promise<|SessionError>}\n     */\n\n  }, {\n    key: \"removeBySid\",\n    value: function removeBySid(sid) {\n      return this.services.session.addCommand('removeMember', {\n        channelSid: this.channel.sid,\n        memberSid: sid\n      });\n    }\n  }]);\n  return Members;\n}(events_1.EventEmitter);\n\nexports.Members = Members;\n/**\n * Fired when member joined channel\n * @event Members#memberJoined\n * @type {Member}\n */\n\n/**\n * Fired when member left channel\n * @event Members#memberLeft\n * @type {Member}\n */\n\n/**\n * Fired when member updated\n * @event Members#memberUpdated\n * @type {Object}\n * @property {Member} member - Updated Member\n * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons\n */","map":null,"metadata":{},"sourceType":"script"}