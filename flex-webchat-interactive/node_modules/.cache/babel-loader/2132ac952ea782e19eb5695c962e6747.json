{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar transporterror_1 = require(\"./transporterror\");\n\nvar XHR = global['XMLHttpRequest'] || require('xmlhttprequest').XMLHttpRequest;\n\nfunction parseResponseHeaders(headerString) {\n  if (!headerString) {\n    return {};\n  }\n\n  return headerString.split(\"\\r\\n\").map(function (el) {\n    return el.split(\": \");\n  }).filter(function (el) {\n    return el.length === 2 && el[1].length > 0;\n  }).reduce(function (prev, curr) {\n    prev[curr[0]] = curr[1];\n    return prev;\n  }, {});\n}\n\nfunction extractBody(xhr) {\n  var contentType = xhr.getResponseHeader('Content-Type');\n\n  if (!contentType || contentType.indexOf('application/json') !== 0 || xhr.responseText.length === 0) {\n    return xhr.responseText;\n  }\n\n  try {\n    return JSON.parse(xhr.responseText);\n  } catch (e) {\n    return xhr.responseText;\n  }\n}\n\nfunction adaptHttpResponse(response) {\n  try {\n    response.body = JSON.parse(response.body);\n  } catch (e) {} // eslint-disable-line no-empty\n\n\n  return response;\n}\n/**\n * Provides generic network interface\n */\n\n\nvar Transport = /*#__PURE__*/function () {\n  function Transport() {\n    _classCallCheck(this, Transport);\n  }\n\n  _createClass(Transport, [{\n    key: \"get\",\n\n    /**\n     * Make a GET request by given URL\n     */\n    value: function get(url, headers) {\n      return Transport.request('GET', url, headers);\n    }\n    /**\n     * Make a POST request by given URL\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, headers, body) {\n      return Transport.request('POST', url, headers, body);\n    }\n  }], [{\n    key: \"request\",\n    value: function request(method, url, headers, body) {\n      return new Promise(function (resolve, reject) {\n        var xhr = new XHR();\n        xhr.open(method, url, true);\n\n        xhr.onreadystatechange = function onreadystatechange() {\n          if (xhr.readyState !== 4) {\n            return;\n          }\n\n          var headers = parseResponseHeaders(xhr.getAllResponseHeaders());\n          var body = extractBody(xhr);\n\n          if (200 <= xhr.status && xhr.status < 300) {\n            resolve({\n              status: xhr.status,\n              headers: headers,\n              body: body\n            });\n          } else {\n            var status = xhr.statusText && xhr.statusText.code ? xhr.statusText.code : 'NONE';\n            var bodyRepresentation;\n\n            if (typeof body === 'string') {\n              bodyRepresentation = body && body.split('\\n', 2).length === 1 ? body : '';\n            } else {\n              bodyRepresentation = JSON.stringify(body);\n            }\n\n            var message = \"\".concat(xhr.status, \": [\").concat(status, \"] \").concat(bodyRepresentation);\n            reject(new transporterror_1.TransportError(message, xhr.status, body, status, headers));\n          }\n        };\n\n        for (var headerName in headers) {\n          xhr.setRequestHeader(headerName, headers[headerName]);\n\n          if (headerName === 'Content-Type' && headers[headerName] === 'application/json') {\n            body = JSON.stringify(body);\n          }\n        }\n\n        xhr.send(body);\n      });\n    }\n  }]);\n\n  return Transport;\n}();\n\nexports.Transport = Transport;","map":null,"metadata":{},"sourceType":"script"}