{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.clone = exports.objectType = exports.hasOwnProperty = void 0;\nexports.hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction objectType(object) {\n  if (object === undefined) {\n    return 'undefined';\n  }\n\n  if (object === null) {\n    return 'null';\n  }\n\n  if (Array.isArray(object)) {\n    return 'array';\n  }\n\n  return typeof object;\n}\n\nexports.objectType = objectType;\n/**\nRecursively copy a value.\n\n@param source - should be a JavaScript primitive, Array, or (plain old) Object.\n@returns copy of source where every Array and Object have been recursively\n         reconstructed from their constituent elements\n*/\n\nfunction clone(source) {\n  // loose-equality checking for null is faster than strict checking for each of null/undefined/true/false\n  // checking null first, then calling typeof, is faster than vice-versa\n  if (source == null || typeof source != 'object') {\n    // short-circuiting is faster than a single return\n    return source;\n  } // x.constructor == Array is the fastest way to check if x is an Array\n\n\n  if (source.constructor == Array) {\n    // construction via imperative for-loop is faster than source.map(arrayVsObject)\n    var length_1 = source.length; // setting the Array length during construction is faster than just `[]` or `new Array()`\n\n    var arrayTarget = new Array(length_1);\n\n    for (var i = 0; i < length_1; i++) {\n      arrayTarget[i] = clone(source[i]);\n    }\n\n    return arrayTarget;\n  } // Object\n\n\n  var objectTarget = {}; // declaring the variable (with const) inside the loop is faster\n\n  for (var key in source) {\n    // hasOwnProperty costs a bit of performance, but it's semantically necessary\n    // using a global helper is MUCH faster than calling source.hasOwnProperty(key)\n    if (exports.hasOwnProperty.call(source, key)) {\n      objectTarget[key] = clone(source[key]);\n    }\n  }\n\n  return objectTarget;\n}\n\nexports.clone = clone;","map":null,"metadata":{},"sourceType":"script"}