{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) {\n    to[j] = from[i];\n  }\n\n  return to;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Container = void 0;\n\nvar binding_1 = require(\"../bindings/binding\");\n\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nvar metadata_reader_1 = require(\"../planning/metadata_reader\");\n\nvar planner_1 = require(\"../planning/planner\");\n\nvar resolver_1 = require(\"../resolution/resolver\");\n\nvar binding_to_syntax_1 = require(\"../syntax/binding_to_syntax\");\n\nvar id_1 = require(\"../utils/id\");\n\nvar serialization_1 = require(\"../utils/serialization\");\n\nvar container_snapshot_1 = require(\"./container_snapshot\");\n\nvar lookup_1 = require(\"./lookup\");\n\nvar Container = function () {\n  function Container(containerOptions) {\n    this._appliedMiddleware = [];\n    var options = containerOptions || {};\n\n    if (typeof options !== \"object\") {\n      throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);\n    }\n\n    if (options.defaultScope === undefined) {\n      options.defaultScope = literal_types_1.BindingScopeEnum.Transient;\n    } else if (options.defaultScope !== literal_types_1.BindingScopeEnum.Singleton && options.defaultScope !== literal_types_1.BindingScopeEnum.Transient && options.defaultScope !== literal_types_1.BindingScopeEnum.Request) {\n      throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);\n    }\n\n    if (options.autoBindInjectable === undefined) {\n      options.autoBindInjectable = false;\n    } else if (typeof options.autoBindInjectable !== \"boolean\") {\n      throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);\n    }\n\n    if (options.skipBaseClassChecks === undefined) {\n      options.skipBaseClassChecks = false;\n    } else if (typeof options.skipBaseClassChecks !== \"boolean\") {\n      throw new Error(\"\" + ERROR_MSGS.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);\n    }\n\n    this.options = {\n      autoBindInjectable: options.autoBindInjectable,\n      defaultScope: options.defaultScope,\n      skipBaseClassChecks: options.skipBaseClassChecks\n    };\n    this.id = id_1.id();\n    this._bindingDictionary = new lookup_1.Lookup();\n    this._snapshots = [];\n    this._middleware = null;\n    this.parent = null;\n    this._metadataReader = new metadata_reader_1.MetadataReader();\n  }\n\n  Container.merge = function (container1, container2) {\n    var container3 = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      container3[_i - 2] = arguments[_i];\n    }\n\n    var container = new Container();\n\n    var targetContainers = __spreadArray([container1, container2], container3).map(function (targetContainer) {\n      return planner_1.getBindingDictionary(targetContainer);\n    });\n\n    var bindingDictionary = planner_1.getBindingDictionary(container);\n\n    function copyDictionary(origin, destination) {\n      origin.traverse(function (key, value) {\n        value.forEach(function (binding) {\n          destination.add(binding.serviceIdentifier, binding.clone());\n        });\n      });\n    }\n\n    targetContainers.forEach(function (targetBindingDictionary) {\n      copyDictionary(targetBindingDictionary, bindingDictionary);\n    });\n    return container;\n  };\n\n  Container.prototype.load = function () {\n    var modules = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      modules[_i] = arguments[_i];\n    }\n\n    var getHelpers = this._getContainerModuleHelpersFactory();\n\n    for (var _a = 0, modules_1 = modules; _a < modules_1.length; _a++) {\n      var currentModule = modules_1[_a];\n      var containerModuleHelpers = getHelpers(currentModule.id);\n      currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction);\n    }\n  };\n\n  Container.prototype.loadAsync = function () {\n    var modules = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      modules[_i] = arguments[_i];\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var getHelpers, _a, modules_2, currentModule, containerModuleHelpers;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            getHelpers = this._getContainerModuleHelpersFactory();\n            _a = 0, modules_2 = modules;\n            _b.label = 1;\n\n          case 1:\n            if (!(_a < modules_2.length)) return [3, 4];\n            currentModule = modules_2[_a];\n            containerModuleHelpers = getHelpers(currentModule.id);\n            return [4, currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            _a++;\n            return [3, 1];\n\n          case 4:\n            return [2];\n        }\n      });\n    });\n  };\n\n  Container.prototype.unload = function () {\n    var _this = this;\n\n    var modules = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      modules[_i] = arguments[_i];\n    }\n\n    var conditionFactory = function conditionFactory(expected) {\n      return function (item) {\n        return item.moduleId === expected;\n      };\n    };\n\n    modules.forEach(function (module) {\n      var condition = conditionFactory(module.id);\n\n      _this._bindingDictionary.removeByCondition(condition);\n    });\n  };\n\n  Container.prototype.bind = function (serviceIdentifier) {\n    var scope = this.options.defaultScope || literal_types_1.BindingScopeEnum.Transient;\n    var binding = new binding_1.Binding(serviceIdentifier, scope);\n\n    this._bindingDictionary.add(serviceIdentifier, binding);\n\n    return new binding_to_syntax_1.BindingToSyntax(binding);\n  };\n\n  Container.prototype.rebind = function (serviceIdentifier) {\n    this.unbind(serviceIdentifier);\n    return this.bind(serviceIdentifier);\n  };\n\n  Container.prototype.unbind = function (serviceIdentifier) {\n    try {\n      this._bindingDictionary.remove(serviceIdentifier);\n    } catch (e) {\n      throw new Error(ERROR_MSGS.CANNOT_UNBIND + \" \" + serialization_1.getServiceIdentifierAsString(serviceIdentifier));\n    }\n  };\n\n  Container.prototype.unbindAll = function () {\n    this._bindingDictionary = new lookup_1.Lookup();\n  };\n\n  Container.prototype.isBound = function (serviceIdentifier) {\n    var bound = this._bindingDictionary.hasKey(serviceIdentifier);\n\n    if (!bound && this.parent) {\n      bound = this.parent.isBound(serviceIdentifier);\n    }\n\n    return bound;\n  };\n\n  Container.prototype.isBoundNamed = function (serviceIdentifier, named) {\n    return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n  };\n\n  Container.prototype.isBoundTagged = function (serviceIdentifier, key, value) {\n    var bound = false;\n\n    if (this._bindingDictionary.hasKey(serviceIdentifier)) {\n      var bindings = this._bindingDictionary.get(serviceIdentifier);\n\n      var request_1 = planner_1.createMockRequest(this, serviceIdentifier, key, value);\n      bound = bindings.some(function (b) {\n        return b.constraint(request_1);\n      });\n    }\n\n    if (!bound && this.parent) {\n      bound = this.parent.isBoundTagged(serviceIdentifier, key, value);\n    }\n\n    return bound;\n  };\n\n  Container.prototype.snapshot = function () {\n    this._snapshots.push(container_snapshot_1.ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware));\n  };\n\n  Container.prototype.restore = function () {\n    var snapshot = this._snapshots.pop();\n\n    if (snapshot === undefined) {\n      throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);\n    }\n\n    this._bindingDictionary = snapshot.bindings;\n    this._middleware = snapshot.middleware;\n  };\n\n  Container.prototype.createChild = function (containerOptions) {\n    var child = new Container(containerOptions || this.options);\n    child.parent = this;\n    return child;\n  };\n\n  Container.prototype.applyMiddleware = function () {\n    var middlewares = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      middlewares[_i] = arguments[_i];\n    }\n\n    this._appliedMiddleware = this._appliedMiddleware.concat(middlewares);\n    var initial = this._middleware ? this._middleware : this._planAndResolve();\n    this._middleware = middlewares.reduce(function (prev, curr) {\n      return curr(prev);\n    }, initial);\n  };\n\n  Container.prototype.applyCustomMetadataReader = function (metadataReader) {\n    this._metadataReader = metadataReader;\n  };\n\n  Container.prototype.get = function (serviceIdentifier) {\n    return this._get(false, false, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier);\n  };\n\n  Container.prototype.getTagged = function (serviceIdentifier, key, value) {\n    return this._get(false, false, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier, key, value);\n  };\n\n  Container.prototype.getNamed = function (serviceIdentifier, named) {\n    return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n  };\n\n  Container.prototype.getAll = function (serviceIdentifier) {\n    return this._get(true, true, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier);\n  };\n\n  Container.prototype.getAllTagged = function (serviceIdentifier, key, value) {\n    return this._get(false, true, literal_types_1.TargetTypeEnum.Variable, serviceIdentifier, key, value);\n  };\n\n  Container.prototype.getAllNamed = function (serviceIdentifier, named) {\n    return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);\n  };\n\n  Container.prototype.resolve = function (constructorFunction) {\n    var tempContainer = this.createChild();\n    tempContainer.bind(constructorFunction).toSelf();\n\n    this._appliedMiddleware.forEach(function (m) {\n      tempContainer.applyMiddleware(m);\n    });\n\n    return tempContainer.get(constructorFunction);\n  };\n\n  Container.prototype._getContainerModuleHelpersFactory = function () {\n    var _this = this;\n\n    var setModuleId = function setModuleId(bindingToSyntax, moduleId) {\n      bindingToSyntax._binding.moduleId = moduleId;\n    };\n\n    var getBindFunction = function getBindFunction(moduleId) {\n      return function (serviceIdentifier) {\n        var _bind = _this.bind.bind(_this);\n\n        var bindingToSyntax = _bind(serviceIdentifier);\n\n        setModuleId(bindingToSyntax, moduleId);\n        return bindingToSyntax;\n      };\n    };\n\n    var getUnbindFunction = function getUnbindFunction(moduleId) {\n      return function (serviceIdentifier) {\n        var _unbind = _this.unbind.bind(_this);\n\n        _unbind(serviceIdentifier);\n      };\n    };\n\n    var getIsboundFunction = function getIsboundFunction(moduleId) {\n      return function (serviceIdentifier) {\n        var _isBound = _this.isBound.bind(_this);\n\n        return _isBound(serviceIdentifier);\n      };\n    };\n\n    var getRebindFunction = function getRebindFunction(moduleId) {\n      return function (serviceIdentifier) {\n        var _rebind = _this.rebind.bind(_this);\n\n        var bindingToSyntax = _rebind(serviceIdentifier);\n\n        setModuleId(bindingToSyntax, moduleId);\n        return bindingToSyntax;\n      };\n    };\n\n    return function (mId) {\n      return {\n        bindFunction: getBindFunction(mId),\n        isboundFunction: getIsboundFunction(mId),\n        rebindFunction: getRebindFunction(mId),\n        unbindFunction: getUnbindFunction(mId)\n      };\n    };\n  };\n\n  Container.prototype._get = function (avoidConstraints, isMultiInject, targetType, serviceIdentifier, key, value) {\n    var result = null;\n    var defaultArgs = {\n      avoidConstraints: avoidConstraints,\n      contextInterceptor: function contextInterceptor(context) {\n        return context;\n      },\n      isMultiInject: isMultiInject,\n      key: key,\n      serviceIdentifier: serviceIdentifier,\n      targetType: targetType,\n      value: value\n    };\n\n    if (this._middleware) {\n      result = this._middleware(defaultArgs);\n\n      if (result === undefined || result === null) {\n        throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);\n      }\n    } else {\n      result = this._planAndResolve()(defaultArgs);\n    }\n\n    return result;\n  };\n\n  Container.prototype._planAndResolve = function () {\n    var _this = this;\n\n    return function (args) {\n      var context = planner_1.plan(_this._metadataReader, _this, args.isMultiInject, args.targetType, args.serviceIdentifier, args.key, args.value, args.avoidConstraints);\n      context = args.contextInterceptor(context);\n      var result = resolver_1.resolve(context);\n      return result;\n    };\n  };\n\n  return Container;\n}();\n\nexports.Container = Container;","map":null,"metadata":{},"sourceType":"script"}