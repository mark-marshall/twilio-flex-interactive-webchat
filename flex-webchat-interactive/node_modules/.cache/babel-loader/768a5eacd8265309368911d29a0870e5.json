{"ast":null,"code":"'use strict';\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar global = require('../internals/global');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar isForced = require('../internals/is-forced');\n\nvar redefine = require('../internals/redefine');\n\nvar hasOwn = require('../internals/has-own-property');\n\nvar inheritIfRequired = require('../internals/inherit-if-required');\n\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\n\nvar isSymbol = require('../internals/is-symbol');\n\nvar toPrimitive = require('../internals/to-primitive');\n\nvar fails = require('../internals/fails');\n\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\n\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar thisNumberValue = require('../internals/this-number-value');\n\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\nvar TypeError = global.TypeError;\nvar arraySlice = uncurryThis(''.slice);\nvar charCodeAt = uncurryThis(''.charCodeAt); // `ToNumeric` abstract operation\n// https://tc39.es/ecma262/#sec-tonumeric\n\nvar toNumeric = function toNumeric(value) {\n  var primValue = toPrimitive(value, 'number');\n  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);\n}; // `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\n\n\nvar toNumber = function toNumber(argument) {\n  var it = toPrimitive(argument, 'number');\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');\n\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = charCodeAt(it, 0);\n\n    if (first === 43 || first === 45) {\n      third = charCodeAt(it, 2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (charCodeAt(it, 1)) {\n        case 66:\n        case 98:\n          radix = 2;\n          maxCode = 49;\n          break;\n        // fast equal of /^0b[01]+$/i\n\n        case 79:\n        case 111:\n          radix = 8;\n          maxCode = 55;\n          break;\n        // fast equal of /^0o[0-7]+$/i\n\n        default:\n          return +it;\n      }\n\n      digits = arraySlice(it, 2);\n      length = digits.length;\n\n      for (index = 0; index < length; index++) {\n        code = charCodeAt(digits, index); // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n\n        if (code < 48 || code > maxCode) return NaN;\n      }\n\n      return parseInt(digits, radix);\n    }\n  }\n\n  return +it;\n}; // `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\n\n\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));\n    var dummy = this; // check on 1..constructor(foo) case\n\n    return isPrototypeOf(NumberPrototype, dummy) && fails(function () {\n      thisNumberValue(dummy);\n    }) ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;\n  };\n\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : ( // ES3:\n  'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' + // ES2015 (in case, if modules with ES2015 Number statics required before):\n  'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' + // ESNext\n  'fromString,range').split(','), j = 0, key; keys.length > j; j++) {\n    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}","map":null,"metadata":{},"sourceType":"script"}