{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"className\", \"component\", \"components\", \"componentsProps\", \"children\", \"disabled\", \"action\", \"onBlur\", \"onClick\", \"onFocus\", \"onFocusVisible\", \"onKeyDown\", \"onKeyUp\", \"onMouseLeave\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_useForkRef as useForkRef } from '@mui/utils';\nimport composeClasses from '../composeClasses';\nimport { getButtonUnstyledUtilityClass } from './buttonUnstyledClasses';\nimport useButton from './useButton';\nimport appendOwnerState from '../utils/appendOwnerState';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var active = ownerState.active,\n      disabled = ownerState.disabled,\n      focusVisible = ownerState.focusVisible;\n  var slots = {\n    root: ['root', disabled && 'disabled', focusVisible && 'focusVisible', active && 'active']\n  };\n  return composeClasses(slots, getButtonUnstyledUtilityClass, {});\n};\n/**\n * The foundation for building custom-styled buttons.\n *\n * Demos:\n *\n * - [Buttons](https://mui.com/components/buttons/)\n *\n * API:\n *\n * - [ButtonUnstyled API](https://mui.com/api/button-unstyled/)\n */\n\n\nvar ButtonUnstyled = /*#__PURE__*/React.forwardRef(function ButtonUnstyled(props, ref) {\n  var _ref;\n\n  var className = props.className,\n      component = props.component,\n      _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$componentsProp = props.componentsProps,\n      componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n      children = props.children,\n      action = props.action,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var buttonRef = React.useRef();\n  var handleRef = useForkRef(buttonRef, ref);\n\n  var _useButton = useButton(_extends({}, props, {\n    ref: handleRef\n  })),\n      active = _useButton.active,\n      focusVisible = _useButton.focusVisible,\n      setFocusVisible = _useButton.setFocusVisible,\n      getRootProps = _useButton.getRootProps;\n\n  React.useImperativeHandle(action, function () {\n    return {\n      focusVisible: function focusVisible() {\n        setFocusVisible(true);\n        buttonRef.current.focus();\n      }\n    };\n  }, [setFocusVisible]);\n\n  var ownerState = _extends({}, props, {\n    active: active,\n    focusVisible: focusVisible\n  });\n\n  var ButtonRoot = (_ref = component != null ? component : components.Root) != null ? _ref : 'button';\n  var buttonRootProps = appendOwnerState(ButtonRoot, _extends({}, other, componentsProps.root), ownerState);\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(ButtonRoot, _extends({}, getRootProps(), buttonRootProps, {\n    className: clsx(classes.root, className, buttonRootProps.className),\n    children: children\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? ButtonUnstyled.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * A ref for imperative actions. It currently only supports `focusVisible()` action.\n   */\n  action: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.shape({\n      focusVisible: PropTypes.func.isRequired\n    })\n  })]),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the Root slot.\n   * Either a string to use a HTML element or a component.\n   * This is equivalent to `components.Root`. If both are provided, the `component` is used.\n   * @default 'button'\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The components used for each slot inside the Button.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Root: PropTypes.elementType\n  }),\n\n  /**\n   * @ignore\n   */\n  componentsProps: PropTypes.shape({\n    root: PropTypes.object\n  }),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onFocusVisible: PropTypes.func\n} : void 0;\nexport default ButtonUnstyled;","map":null,"metadata":{},"sourceType":"module"}