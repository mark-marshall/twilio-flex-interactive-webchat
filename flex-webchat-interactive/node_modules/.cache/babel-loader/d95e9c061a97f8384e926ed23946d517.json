{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nvar Interactives = function Interactives(_ref) {\n  var messageList = _ref.messageList,\n      state = _ref.state;\n\n  var _useState = useState({\n    options: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1]; // useEffect(() => {\n  //   if (\n  //     messageList &&\n  //     messageList.length > 0 &&\n  //     !messageList[messageList.length - 1].isFromMe &&\n  //     messageList[messageList.length - 1].source.state.attributes\n  //       .interactiveWebchatOptions\n  //   ) {\n  //     const lastMessageAttributes =\n  //       messageList[messageList.length - 1].source.state.attributes\n  //         .interactiveWebchatOptions;\n  //     console.log(lastMessageAttributes);\n  //     const options = lastMessageAttributes.options.map((o) => ({\n  //       content: 'o.content',\n  //     }));\n  //     const { type } = lastMessageAttributes;\n  //     setCurInteractives({\n  //       type,\n  //       options,\n  //     });\n  //   } else {\n  //     setCurInteractives([]);\n  //   }\n  // }, [messageList]);\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }\n  }, curInteractives.options.map(function (o, idx) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      key: idx,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, o.content);\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    state: state\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx"],"names":["React","useState","useEffect","connect","Interactives","messageList","state","options","curInteractives","setCurInteractives","map","o","idx","content","mapStateToProps","flex","chat","channels","session","channelSid","messages"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAA4B;AAAA,MAAzBC,WAAyB,QAAzBA,WAAyB;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBACDL,QAAQ,CAAC;AAAEM,IAAAA,OAAO,EAAE;AAAX,GAAD,CADP;AAAA;AAAA,MACxCC,eADwC;AAAA,MACvBC,kBADuB,kBAG/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,eAAe,CAACD,OAAhB,CAAwBG,GAAxB,CAA4B,UAACC,CAAD,EAAIC,GAAJ;AAAA,wBAC3B;AAAQ,MAAA,GAAG,EAAEA,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,CAAC,CAACE,OAArB,CAD2B;AAAA,GAA5B,CADH,CADF;AAOD,CAnCD;;AAqCA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACR,KAAD,EAAW;AACjC,SAAO;AACLD,IAAAA,WAAW,EACTC,KAAK,CAACS,IAAN,CAAWC,IAAX,CAAgBC,QAAhB,CAAyBX,KAAK,CAACS,IAAN,CAAWG,OAAX,CAAmBC,UAA5C,EAAwDC,QAFrD;AAGLd,IAAAA,KAAK,EAAEA;AAHF,GAAP;AAKD,CAND;;AAQA,eAAeH,OAAO,CAACW,eAAD,CAAP,CAAyBV,YAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nconst Interactives = ({ messageList, state }) => {\n  const [curInteractives, setCurInteractives] = useState({ options: [] });\n\n  // useEffect(() => {\n  //   if (\n  //     messageList &&\n  //     messageList.length > 0 &&\n  //     !messageList[messageList.length - 1].isFromMe &&\n  //     messageList[messageList.length - 1].source.state.attributes\n  //       .interactiveWebchatOptions\n  //   ) {\n  //     const lastMessageAttributes =\n  //       messageList[messageList.length - 1].source.state.attributes\n  //         .interactiveWebchatOptions;\n  //     console.log(lastMessageAttributes);\n  //     const options = lastMessageAttributes.options.map((o) => ({\n  //       content: 'o.content',\n  //     }));\n  //     const { type } = lastMessageAttributes;\n  //     setCurInteractives({\n  //       type,\n  //       options,\n  //     });\n  //   } else {\n  //     setCurInteractives([]);\n  //   }\n  // }, [messageList]);\n\n  return (\n    <div>\n      {curInteractives.options.map((o, idx) => (\n        <button key={idx}>{o.content}</button>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    state: state,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}