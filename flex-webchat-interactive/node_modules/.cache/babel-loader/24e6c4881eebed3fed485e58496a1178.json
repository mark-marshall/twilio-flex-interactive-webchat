{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@mui/material';\nimport ScrollIntoView from 'react-scroll-into-view';\nvar defaultCurInitatives = {\n  type: '',\n  options: []\n};\n\nvar Interactives = function Interactives(_ref) {\n  var messageList = _ref.messageList,\n      state = _ref.state;\n\n  var _useState = useState(defaultCurInitatives),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1];\n\n  useEffect(function () {\n    if (messageList && messageList.length > 0 && !messageList[messageList.length - 1].isFromMe && messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions) {\n      var lastMessageAttributes = messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions;\n      console.log(lastMessageAttributes);\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInitatives);\n    }\n  }, [messageList]);\n  return /*#__PURE__*/React.createElement(ScrollIntoView, {\n    selector: \"#interactives\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"interactives\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, curInteractives.options.map(function (o, idx) {\n    return /*#__PURE__*/React.createElement(Button, {\n      key: o.uuid,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, o.content);\n  })));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    state: state\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx"],"names":["React","useState","useEffect","connect","Button","ScrollIntoView","defaultCurInitatives","type","options","Interactives","messageList","state","curInteractives","setCurInteractives","length","isFromMe","source","attributes","interactiveWebchatOptions","lastMessageAttributes","console","log","map","o","idx","uuid","content","mapStateToProps","flex","chat","channels","session","channelSid","messages"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,MAAT,QAAuB,eAAvB;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AAEA,IAAMC,oBAAoB,GAAG;AAAEC,EAAAA,IAAI,EAAE,EAAR;AAAYC,EAAAA,OAAO,EAAE;AAArB,CAA7B;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAA4B;AAAA,MAAzBC,WAAyB,QAAzBA,WAAyB;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBACDV,QAAQ,CAACK,oBAAD,CADP;AAAA;AAAA,MACxCM,eADwC;AAAA,MACvBC,kBADuB;;AAG/CX,EAAAA,SAAS,CAAC,YAAM;AACd,QACEQ,WAAW,IACXA,WAAW,CAACI,MAAZ,GAAqB,CADrB,IAEA,CAACJ,WAAW,CAACA,WAAW,CAACI,MAAZ,GAAqB,CAAtB,CAAX,CAAoCC,QAFrC,IAGAL,WAAW,CAACA,WAAW,CAACI,MAAZ,GAAqB,CAAtB,CAAX,CAAoCE,MAApC,CAA2CL,KAA3C,CAAiDM,UAAjD,CACGC,yBALL,EAME;AACA,UAAMC,qBAAqB,GACzBT,WAAW,CAACA,WAAW,CAACI,MAAZ,GAAqB,CAAtB,CAAX,CAAoCE,MAApC,CAA2CL,KAA3C,CAAiDM,UAAjD,CACGC,yBAFL;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,qBAAZ;AACAN,MAAAA,kBAAkB,CAACM,qBAAD,CAAlB;AACD,KAZD,MAYO;AACLN,MAAAA,kBAAkB,CAACP,oBAAD,CAAlB;AACD;AACF,GAhBQ,EAgBN,CAACI,WAAD,CAhBM,CAAT;AAkBA,sBACE,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAC,eAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGE,eAAe,CAACJ,OAAhB,CAAwBc,GAAxB,CAA4B,UAACC,CAAD,EAAIC,GAAJ;AAAA,wBAC3B,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAED,CAAC,CAACE,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBF,CAAC,CAACG,OAAxB,CAD2B;AAAA,GAA5B,CADH,CADF,CADF;AASD,CA9BD;;AAgCA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAChB,KAAD,EAAW;AACjC,SAAO;AACLD,IAAAA,WAAW,EACTC,KAAK,CAACiB,IAAN,CAAWC,IAAX,CAAgBC,QAAhB,CAAyBnB,KAAK,CAACiB,IAAN,CAAWG,OAAX,CAAmBC,UAA5C,EAAwDC,QAFrD;AAGLtB,IAAAA,KAAK,EAAEA;AAHF,GAAP;AAKD,CAND;;AAQA,eAAeR,OAAO,CAACwB,eAAD,CAAP,CAAyBlB,YAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@mui/material';\nimport ScrollIntoView from 'react-scroll-into-view';\n\nconst defaultCurInitatives = { type: '', options: [] };\n\nconst Interactives = ({ messageList, state }) => {\n  const [curInteractives, setCurInteractives] = useState(defaultCurInitatives);\n\n  useEffect(() => {\n    if (\n      messageList &&\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe &&\n      messageList[messageList.length - 1].source.state.attributes\n        .interactiveWebchatOptions\n    ) {\n      const lastMessageAttributes =\n        messageList[messageList.length - 1].source.state.attributes\n          .interactiveWebchatOptions;\n      console.log(lastMessageAttributes);\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInitatives);\n    }\n  }, [messageList]);\n\n  return (\n    <ScrollIntoView selector=\"#interactives\">\n      <div className=\"interactives\">\n        {curInteractives.options.map((o, idx) => (\n          <Button key={o.uuid}>{o.content}</Button>\n        ))}\n      </div>\n    </ScrollIntoView>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    state: state,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}