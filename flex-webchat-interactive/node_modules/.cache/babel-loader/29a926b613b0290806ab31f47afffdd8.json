{"ast":null,"code":"\"use strict\";\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"../logger\");\n\nvar notificationtypes_1 = require(\"../interfaces/notificationtypes\");\n\nvar log = logger_1.Logger.scope('TypingIndicator');\n/**\n * An important note in regards to typing timeout timers. There are two places that the SDK can get the \"typing_timeout\" attribute from. The first\n * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the\n * \"typing_timeout\" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a\n * notification of type \"twilio.ipmsg.typing_indicator\". In this case, the \"typing_timeout\" value will be +1 of that in the console. This\n * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,\n * the timeout returned from the notification should be used as the timeout for the \"typingEnded\" event, +1 is to account for latency.\n *\n * @private\n */\n\n/**\n * @class TypingIndicator\n *\n * @constructor\n * @private\n */\n\nvar TypingIndicator = function () {\n  function TypingIndicator(config, services, getChannel) {\n    (0, _classCallCheck3.default)(this, TypingIndicator);\n    this.config = config;\n    this.services = services;\n    this.getChannel = getChannel;\n    this.serviceTypingTimeout = null;\n    this.sentUpdates = new _map2.default();\n  }\n\n  (0, _createClass3.default)(TypingIndicator, [{\n    key: \"initialize\",\n\n    /**\n     * Initialize TypingIndicator controller\n     * Registers for needed message types and sets listeners\n     * @private\n     */\n    value: function initialize() {\n      var _this = this;\n\n      this.services.notificationClient.subscribe(notificationtypes_1.NotificationTypes.TYPING_INDICATOR, 'twilsock');\n      this.services.notificationClient.on('message', function (type, message) {\n        if (type === notificationtypes_1.NotificationTypes.TYPING_INDICATOR) {\n          _this.handleRemoteTyping(message);\n        }\n      });\n    }\n    /**\n     * Remote members typing events handler\n     * @private\n     */\n\n  }, {\n    key: \"handleRemoteTyping\",\n    value: function handleRemoteTyping(message) {\n      var _this2 = this;\n\n      log.trace('Got new typing indicator ', message);\n      this.getChannel(message.channel_sid).then(function (channel) {\n        if (!channel) {\n          return;\n        }\n\n        channel.members.forEach(function (member) {\n          if (member.identity !== message.identity) {\n            return;\n          }\n\n          var timeout = _this2.config.typingIndicatorTimeoutOverride + 1000 || message.typing_timeout * 1000;\n\n          member._startTyping(timeout);\n        });\n      }).catch(function (err) {\n        log.error(err);\n        throw err;\n      });\n    }\n    /**\n     * Send typing event for the given channel sid\n     * @param {String} channelSid\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(channelSid) {\n      var lastUpdate = this.sentUpdates.get(channelSid);\n\n      if (lastUpdate && lastUpdate > Date.now() - this.typingTimeout) {\n        return _promise2.default.resolve();\n      }\n\n      this.sentUpdates.set(channelSid, Date.now());\n      return this._send(channelSid);\n    }\n  }, {\n    key: \"_send\",\n    value: function _send(channelSid) {\n      var _this3 = this;\n\n      log.trace('Sending typing indicator');\n      var url = this.config.typingIndicatorUri;\n      var headers = {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      };\n      var body = 'ChannelSid=' + channelSid;\n      return this.services.transport.post(url, headers, body).then(function (response) {\n        if (response.body.hasOwnProperty('typing_timeout')) {\n          _this3.serviceTypingTimeout = response.body.typing_timeout * 1000;\n        }\n      }).catch(function (err) {\n        log.error('Failed to send typing indicator:', err);\n        throw err;\n      });\n    }\n  }, {\n    key: \"typingTimeout\",\n    get: function get() {\n      return this.config.typingIndicatorTimeoutOverride || this.serviceTypingTimeout || this.config.typingIndicatorTimeoutDefault;\n    }\n  }]);\n  return TypingIndicator;\n}();\n\nexports.TypingIndicator = TypingIndicator;","map":null,"metadata":{},"sourceType":"script"}