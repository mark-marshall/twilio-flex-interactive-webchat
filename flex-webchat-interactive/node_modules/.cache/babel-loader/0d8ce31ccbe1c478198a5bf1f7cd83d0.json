{"ast":null,"code":"import _defineProperty from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"day\", \"outsideCurrentMonth\", \"isEndOfHighlighting\", \"isEndOfPreviewing\", \"isHighlighting\", \"isPreviewing\", \"isStartOfHighlighting\", \"isStartOfPreviewing\", \"selected\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { alpha, styled } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses, generateUtilityClass, generateUtilityClasses } from '@mui/base';\nimport { DAY_MARGIN } from '../internal/pickers/constants/dimensions';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport PickersDay, { areDayPropsEqual } from '../PickersDay/PickersDay';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function getDateRangePickerDayUtilityClass(slot) {\n  return generateUtilityClass('MuiDateRangePickerDay', slot);\n}\nexport var dateRangePickerDayClasses = generateUtilityClasses('MuiDateRangePickerDay', ['root', 'rangeIntervalDayHighlight', 'rangeIntervalDayHighlightStart', 'rangeIntervalDayHighlightEnd', 'rangeIntervalPreview', 'rangeIntervalDayPreview', 'rangeIntervalDayPreviewStart', 'rangeIntervalDayPreviewEnd', 'day', 'dayOutsideRangeInterval', 'dayInsideRangeInterval', 'notSelectedDate']);\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var isHighlighting = ownerState.isHighlighting,\n      outsideCurrentMonth = ownerState.outsideCurrentMonth,\n      isStartOfHighlighting = ownerState.isStartOfHighlighting,\n      isStartOfMonth = ownerState.isStartOfMonth,\n      isEndOfHighlighting = ownerState.isEndOfHighlighting,\n      isEndOfMonth = ownerState.isEndOfMonth,\n      isPreviewing = ownerState.isPreviewing,\n      isStartOfPreviewing = ownerState.isStartOfPreviewing,\n      isEndOfPreviewing = ownerState.isEndOfPreviewing,\n      selected = ownerState.selected,\n      classes = ownerState.classes;\n  var slots = {\n    root: ['root', isHighlighting && !outsideCurrentMonth && 'rangeIntervalDayHighlight', (isStartOfHighlighting || isStartOfMonth) && 'rangeIntervalDayHighlightStart', (isEndOfHighlighting || isEndOfMonth) && 'rangeIntervalDayHighlightEnd'],\n    rangeIntervalPreview: ['rangeIntervalPreview', isPreviewing && !outsideCurrentMonth && 'rangeIntervalDayPreview', (isStartOfPreviewing || isStartOfMonth) && 'rangeIntervalDayPreviewStart', (isEndOfPreviewing || isEndOfMonth) && 'rangeIntervalDayPreviewEnd'],\n    day: ['day', !selected && 'notSelectedDate', !isHighlighting && 'dayOutsideRangeInterval', !selected && isHighlighting && 'dayInsideRangeInterval']\n  };\n  return composeClasses(slots, getDateRangePickerDayUtilityClass, classes);\n};\n\nvar endBorderStyle = {\n  borderTopRightRadius: '50%',\n  borderBottomRightRadius: '50%'\n};\nvar startBorderStyle = {\n  borderTopLeftRadius: '50%',\n  borderBottomLeftRadius: '50%'\n};\nvar DateRangePickerDayRoot = styled('div', {\n  name: 'MuiDateRangePickerDay',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_ref) {\n  var _extends2;\n\n  var theme = _ref.theme,\n      ownerState = _ref.ownerState;\n  return _extends((_extends2 = {}, _defineProperty(_extends2, \"&:first-of-type .\".concat(dateRangePickerDayClasses.rangeIntervalDayPreview), _extends({}, startBorderStyle, {\n    borderLeftColor: theme.palette.divider\n  })), _defineProperty(_extends2, \"&:last-of-type .\".concat(dateRangePickerDayClasses.rangeIntervalDayPreview), _extends({}, endBorderStyle, {\n    borderRightColor: theme.palette.divider\n  })), _extends2), ownerState.isHighlighting && !ownerState.outsideCurrentMonth && {\n    borderRadius: 0,\n    color: theme.palette.primary.contrastText,\n    backgroundColor: alpha(theme.palette.primary.light, 0.6),\n    '&:first-of-type': startBorderStyle,\n    '&:last-of-type': endBorderStyle\n  }, (ownerState.isStartOfHighlighting || ownerState.isStartOfMonth) && _extends({}, startBorderStyle, {\n    paddingLeft: 0,\n    marginLeft: DAY_MARGIN / 2\n  }), (ownerState.isEndOfHighlighting || ownerState.isEndOfMonth) && _extends({}, endBorderStyle, {\n    paddingRight: 0,\n    marginRight: DAY_MARGIN / 2\n  }));\n});\nvar DateRangePickerDayRangeIntervalPreview = styled('div', {\n  name: 'MuiDateRangePickerDay',\n  slot: 'RangeIntervalPreview'\n})(function (_ref2) {\n  var theme = _ref2.theme,\n      ownerState = _ref2.ownerState;\n  return _extends({\n    // replace default day component margin with transparent border to avoid jumping on preview\n    border: '2px solid transparent'\n  }, ownerState.isPreviewing && !ownerState.outsideCurrentMonth && _extends({\n    borderRadius: 0,\n    border: \"2px dashed \".concat(theme.palette.divider),\n    borderLeftColor: 'transparent',\n    borderRightColor: 'transparent'\n  }, (ownerState.isStartOfPreviewing || ownerState.isStartOfMonth) && _extends({\n    borderLeftColor: theme.palette.divider\n  }, startBorderStyle), (ownerState.isEndOfPreviewing || ownerState.isEndOfMonth) && _extends({\n    borderRightColor: theme.palette.divider\n  }, endBorderStyle)));\n});\nvar DateRangePickerDayDay = styled(PickersDay, {\n  name: 'MuiDateRangePickerDay',\n  slot: 'Day'\n})(function (_ref3) {\n  var theme = _ref3.theme,\n      ownerState = _ref3.ownerState;\n  return _extends({\n    // Required to overlap preview border\n    transform: 'scale(1.1)',\n    '& > *': {\n      transform: 'scale(0.9)'\n    }\n  }, !ownerState.selected && {\n    backgroundColor: 'transparent'\n  }, !ownerState.isHighlighting && {\n    '&:hover': {\n      border: \"1px solid \".concat(theme.palette.grey[500])\n    }\n  }, !ownerState.selected && ownerState.isHighlighting && {\n    color: theme.palette.getContrastText(alpha(theme.palette.primary.light, 0.6))\n  });\n});\nvar DateRangePickerDay = /*#__PURE__*/React.forwardRef(function DateRangePickerDay(props, ref) {\n  var className = props.className,\n      day = props.day,\n      outsideCurrentMonth = props.outsideCurrentMonth,\n      isHighlighting = props.isHighlighting,\n      isPreviewing = props.isPreviewing,\n      _props$selected = props.selected,\n      selected = _props$selected === void 0 ? false : _props$selected,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var utils = useUtils();\n  var isEndOfMonth = utils.isSameDay(day, utils.endOfMonth(day));\n  var isStartOfMonth = utils.isSameDay(day, utils.startOfMonth(day));\n  var shouldRenderHighlight = isHighlighting && !outsideCurrentMonth;\n  var shouldRenderPreview = isPreviewing && !outsideCurrentMonth;\n\n  var ownerState = _extends({}, props, {\n    selected: selected,\n    isStartOfMonth: isStartOfMonth,\n    isEndOfMonth: isEndOfMonth\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DateRangePickerDayRoot, {\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    children: /*#__PURE__*/_jsx(DateRangePickerDayRangeIntervalPreview, {\n      role: \"cell\",\n      className: classes.rangeIntervalPreview,\n      ownerState: ownerState,\n      children: /*#__PURE__*/_jsx(DateRangePickerDayDay, _extends({}, other, {\n        ref: ref,\n        disableMargin: true,\n        allowSameDateSelection: true,\n        day: day,\n        selected: selected,\n        outsideCurrentMonth: outsideCurrentMonth,\n        className: classes.day,\n        ownerState: ownerState\n      }))\n    })\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? DateRangePickerDay.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The date to show.\n   */\n  day: PropTypes.any.isRequired,\n\n  /**\n   * Set to `true` if the `day` is the end of a highlighted date range.\n   */\n  isEndOfHighlighting: PropTypes.bool.isRequired,\n\n  /**\n   * Set to `true` if the `day` is the start of a highlighted date range.\n   */\n  isEndOfPreviewing: PropTypes.bool.isRequired,\n\n  /**\n   * Set to `true` if the `day` is in a highlighted date range.\n   */\n  isHighlighting: PropTypes.bool.isRequired,\n\n  /**\n   * Set to `true` if the `day` is in a preview date range.\n   */\n  isPreviewing: PropTypes.bool.isRequired,\n\n  /**\n   * Set to `true` if the `day` is the start of a highlighted date range.\n   */\n  isStartOfHighlighting: PropTypes.bool.isRequired,\n\n  /**\n   * Set to `true` if the `day` is the end of a highlighted date range.\n   */\n  isStartOfPreviewing: PropTypes.bool.isRequired,\n\n  /**\n   * If `true`, day is outside of month and will be hidden.\n   */\n  outsideCurrentMonth: PropTypes.bool.isRequired,\n\n  /**\n   * If `true`, renders as selected.\n   * @default false\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\n/**\n *\n * Demos:\n *\n * - [Date Range Picker](https://mui.com/components/date-range-picker/)\n *\n * API:\n *\n * - [DateRangePickerDay API](https://mui.com/api/date-range-picker-day/)\n */\n\nexport default /*#__PURE__*/React.memo(DateRangePickerDay, function (prevProps, nextProps) {\n  return prevProps.isHighlighting === nextProps.isHighlighting && prevProps.isEndOfHighlighting === nextProps.isEndOfHighlighting && prevProps.isStartOfHighlighting === nextProps.isStartOfHighlighting && prevProps.isPreviewing === nextProps.isPreviewing && prevProps.isEndOfPreviewing === nextProps.isEndOfPreviewing && prevProps.isStartOfPreviewing === nextProps.isStartOfPreviewing && areDayPropsEqual(prevProps, nextProps);\n});","map":null,"metadata":{},"sourceType":"module"}