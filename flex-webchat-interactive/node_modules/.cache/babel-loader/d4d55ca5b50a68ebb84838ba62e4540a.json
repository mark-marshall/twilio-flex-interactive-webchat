{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nfunction isDef(value) {\n  return value !== undefined && value !== null;\n}\n\nvar Backoff = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Backoff, _events_1$EventEmitte);\n\n  var _super = _createSuper(Backoff);\n\n  function Backoff(options) {\n    var _this;\n\n    _classCallCheck(this, Backoff);\n\n    _this = _super.call(this);\n    options = options || {};\n\n    if (isDef(options.initialDelay) && options.initialDelay < 1) {\n      throw new Error('The initial timeout must be equal to or greater than 1.');\n    } else if (isDef(options.maxDelay) && options.maxDelay <= 1) {\n      throw new Error('The maximal timeout must be greater than 1.');\n    } else if (isDef(options.randomisationFactor) && (options.randomisationFactor < 0 || options.randomisationFactor > 1)) {\n      throw new Error('The randomisation factor must be between 0 and 1.');\n    } else if (isDef(options.factor) && options.factor <= 1) {\n      throw new Error(\"Exponential factor should be greater than 1.\");\n    }\n\n    _this.initialDelay = options.initialDelay || 100;\n    _this.maxDelay = options.maxDelay || 10000;\n\n    if (_this.maxDelay <= _this.initialDelay) {\n      throw new Error('The maximal backoff delay must be greater than the initial backoff delay.');\n    }\n\n    _this.randomisationFactor = options.randomisationFactor || 0;\n    _this.factor = options.factor || 2;\n    _this.maxNumberOfRetry = -1;\n\n    _this.reset();\n\n    return _this;\n  }\n\n  _createClass(Backoff, [{\n    key: \"backoff\",\n    value: function backoff(err) {\n      if (this.timeoutID == null) {\n        if (this.backoffNumber === this.maxNumberOfRetry) {\n          this.emit('fail', err);\n          this.reset();\n        } else {\n          this.backoffDelay = this.next();\n          this.timeoutID = setTimeout(this.onBackoff.bind(this), this.backoffDelay);\n          this.emit('backoff', this.backoffNumber, this.backoffDelay, err);\n        }\n      }\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.backoffDelay = 0;\n      this.nextBackoffDelay = this.initialDelay;\n      this.backoffNumber = 0;\n      clearTimeout(this.timeoutID);\n      this.timeoutID = null;\n    }\n  }, {\n    key: \"failAfter\",\n    value: function failAfter(maxNumberOfRetry) {\n      if (maxNumberOfRetry <= 0) {\n        throw new Error(\"Expected a maximum number of retry greater than 0 but got \".concat(maxNumberOfRetry));\n      }\n\n      this.maxNumberOfRetry = maxNumberOfRetry;\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.backoffDelay = Math.min(this.nextBackoffDelay, this.maxDelay);\n      this.nextBackoffDelay = this.backoffDelay * this.factor;\n      var randomisationMultiple = 1 + Math.random() * this.randomisationFactor;\n      return Math.min(this.maxDelay, Math.round(this.backoffDelay * randomisationMultiple));\n    }\n  }, {\n    key: \"onBackoff\",\n    value: function onBackoff() {\n      this.timeoutID = null;\n      this.emit('ready', this.backoffNumber, this.backoffDelay);\n      this.backoffNumber++;\n    }\n  }], [{\n    key: \"exponential\",\n    value: function exponential(options) {\n      return new Backoff(options);\n    }\n  }]);\n\n  return Backoff;\n}(events_1.EventEmitter);\n\nexports.Backoff = Backoff;\nexports.default = Backoff;","map":null,"metadata":{},"sourceType":"script"}