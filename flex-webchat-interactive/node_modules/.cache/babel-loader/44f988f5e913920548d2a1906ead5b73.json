{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolve = void 0;\n\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar exceptions_1 = require(\"../utils/exceptions\");\n\nvar serialization_1 = require(\"../utils/serialization\");\n\nvar instantiation_1 = require(\"./instantiation\");\n\nvar invokeFactory = function invokeFactory(factoryType, serviceIdentifier, fn) {\n  try {\n    return fn();\n  } catch (error) {\n    if (exceptions_1.isStackOverflowExeption(error)) {\n      throw new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryType, serviceIdentifier.toString()));\n    } else {\n      throw error;\n    }\n  }\n};\n\nvar _resolveRequest = function _resolveRequest(requestScope) {\n  return function (request) {\n    request.parentContext.setCurrentRequest(request);\n    var bindings = request.bindings;\n    var childRequests = request.childRequests;\n    var targetIsAnArray = request.target && request.target.isArray();\n    var targetParentIsNotAnArray = !request.parentRequest || !request.parentRequest.target || !request.target || !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);\n\n    if (targetIsAnArray && targetParentIsNotAnArray) {\n      return childRequests.map(function (childRequest) {\n        var _f = _resolveRequest(requestScope);\n\n        return _f(childRequest);\n      });\n    } else {\n      var result = null;\n\n      if (request.target.isOptional() && bindings.length === 0) {\n        return undefined;\n      }\n\n      var binding_1 = bindings[0];\n      var isSingleton = binding_1.scope === literal_types_1.BindingScopeEnum.Singleton;\n      var isRequestSingleton = binding_1.scope === literal_types_1.BindingScopeEnum.Request;\n\n      if (isSingleton && binding_1.activated) {\n        return binding_1.cache;\n      }\n\n      if (isRequestSingleton && requestScope !== null && requestScope.has(binding_1.id)) {\n        return requestScope.get(binding_1.id);\n      }\n\n      if (binding_1.type === literal_types_1.BindingTypeEnum.ConstantValue) {\n        result = binding_1.cache;\n        binding_1.activated = true;\n      } else if (binding_1.type === literal_types_1.BindingTypeEnum.Function) {\n        result = binding_1.cache;\n        binding_1.activated = true;\n      } else if (binding_1.type === literal_types_1.BindingTypeEnum.Constructor) {\n        result = binding_1.implementationType;\n      } else if (binding_1.type === literal_types_1.BindingTypeEnum.DynamicValue && binding_1.dynamicValue !== null) {\n        result = invokeFactory(\"toDynamicValue\", binding_1.serviceIdentifier, function () {\n          return binding_1.dynamicValue(request.parentContext);\n        });\n      } else if (binding_1.type === literal_types_1.BindingTypeEnum.Factory && binding_1.factory !== null) {\n        result = invokeFactory(\"toFactory\", binding_1.serviceIdentifier, function () {\n          return binding_1.factory(request.parentContext);\n        });\n      } else if (binding_1.type === literal_types_1.BindingTypeEnum.Provider && binding_1.provider !== null) {\n        result = invokeFactory(\"toProvider\", binding_1.serviceIdentifier, function () {\n          return binding_1.provider(request.parentContext);\n        });\n      } else if (binding_1.type === literal_types_1.BindingTypeEnum.Instance && binding_1.implementationType !== null) {\n        result = instantiation_1.resolveInstance(binding_1.implementationType, childRequests, _resolveRequest(requestScope));\n      } else {\n        var serviceIdentifier = serialization_1.getServiceIdentifierAsString(request.serviceIdentifier);\n        throw new Error(ERROR_MSGS.INVALID_BINDING_TYPE + \" \" + serviceIdentifier);\n      }\n\n      if (typeof binding_1.onActivation === \"function\") {\n        result = binding_1.onActivation(request.parentContext, result);\n      }\n\n      if (isSingleton) {\n        binding_1.cache = result;\n        binding_1.activated = true;\n      }\n\n      if (isRequestSingleton && requestScope !== null && !requestScope.has(binding_1.id)) {\n        requestScope.set(binding_1.id, result);\n      }\n\n      return result;\n    }\n  };\n};\n\nfunction resolve(context) {\n  var _f = _resolveRequest(context.plan.rootRequest.requestScope);\n\n  return _f(context.plan.rootRequest);\n}\n\nexports.resolve = resolve;","map":null,"metadata":{},"sourceType":"script"}