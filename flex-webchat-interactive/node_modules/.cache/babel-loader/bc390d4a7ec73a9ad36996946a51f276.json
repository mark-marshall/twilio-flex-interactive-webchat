{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport DateAdapter from '@mui/lab/AdapterMoment';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport { ButtonGroup, Button, Select, FormControl, MenuItem, TextField } from '@mui/material';\nimport { DatePicker } from '@mui/lab';\nimport moment from 'moment';\nvar defaultCurInteractives = {\n  type: '',\n  options: []\n}; // type = buttons OR dropdown OR date OR time\n// label can be left blank, is used in dropdown only\n// options is used for dropdown and buttons and specific props\n\nvar Interactives = function Interactives(_ref) {\n  var manager = _ref.manager,\n      messageList = _ref.messageList,\n      channelSid = _ref.channelSid;\n\n  var _useState = useState(defaultCurInteractives),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1];\n\n  var _useState3 = useState(moment()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      curDateValue = _useState4[0],\n      setDateValue = _useState4[1];\n\n  useEffect(function () {\n    if (messageList && messageList.length > 0 && !messageList[messageList.length - 1].isFromMe && messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions) {\n      var lastMessageAttributes = messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n  useEffect(function () {\n    if (curInteractives !== defaultCurInteractives) {\n      var el = document.getElementById('interactive-container');\n      el.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  var sendMessage = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {\n      var curChannel;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return manager.chatClient.getChannelBySid(channelSid);\n\n            case 2:\n              curChannel = _context.sent;\n              curChannel.sendMessage(message);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendMessage(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, curInteractives !== defaultCurInteractives ? /*#__PURE__*/React.createElement(\"div\", {\n    id: \"interactive-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, curInteractives.type === 'buttons' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"interactive-buttons-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ButtonGroup, {\n    orientation: \"vertical\",\n    variant: \"contained\",\n    \"aria-label\": \"vertical contained button group small\",\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 15\n    }\n  }, curInteractives.options.map(function (o, idx) {\n    return /*#__PURE__*/React.createElement(Button, {\n      key: o.uuid,\n      onClick: function onClick() {\n        return sendMessage(o.buttonValue);\n      },\n      style: {\n        fontSize: '12px',\n        textTransform: 'none',\n        textAlign: 'right'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }, o.buttonContent);\n  }))) : curInteractives.type === 'dropdown' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"interactive-dropdown-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    labelId: \"select-label\",\n    id: \"select\",\n    defaultValue: curInteractives.options[0].optionValue,\n    onChange: function onChange(e) {\n      return sendMessage(e.target.value);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, curInteractives.options.map(function (o, idx) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: o.uuid,\n      value: o.optionValue,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, o.optionContent);\n  })))) : curInteractives.type === 'calendar' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"interactive-calendar-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n    dateAdapter: DateAdapter,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    renderInput: function renderInput(props) {\n      return /*#__PURE__*/React.createElement(TextField, Object.assign({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 43\n        }\n      }));\n    },\n    label: \"\",\n    value: curDateValue,\n    defaultValue: moment(),\n    onChange: function onChange(value) {\n      return setDateValue(moment(value).format('MM/DD/YYYY'));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      return sendMessage(curDateValue);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, \"Select Date\")) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null)) // BUTTONS\n  // <div id=\"interactive-container\">\n  //   {curInteractives.options.map((o, idx) => (\n  //     <Button key={o.uuid} onClick={() => sendMessage(o.buttonValue)}>\n  //       {o.buttonContent}\n  //     </Button>\n  //   ))}\n  // </div>\n  // DROPDOWN\n  // <div id=\"interactive-container\">\n  //   {curInteractives.options.length ? (\n  //     <FormControl fullWidth>\n  //       <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n  //       <Select\n  //         labelId=\"demo-simple-select-label\"\n  //         id=\"demo-simple-select\"\n  //         value={'10'}\n  //         label=\"Select an option\"\n  //         onChange={() => console.log('change')}\n  //       >\n  //         {curInteractives.options.map((o, idx) => (\n  //           <MenuItem value={o.buttonValue}>{o.buttonContent}</MenuItem>\n  //         ))}\n  //       </Select>\n  //     </FormControl>\n  //   ) : (\n  //     <></>\n  //   )}\n  // </div>\n  ;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives); // Studio Flow Examples\n// {\n//   \"interactiveWebchatOptions\": {\n//   \"type\": \"buttons\",\n//   \"options\": [{\"uuid\": \"78d7ffc3-bdb5-40dd-a455-3ef352fab140\", \"buttonContent\": \"Option A\",  \"buttonValue\": \"You clicked Option A\"},{\"uuid\": \"e11ef994-4a61-4a0c-aa5f-0ae4d93b91cf\", \"buttonContent\": \"Option B\", \"buttonValue\": \"You clicked Option B\"}, {\"uuid\": \"34506dc-76f5-4286-a0c9-3f63388a38b1\", \"buttonContent\": \"Option C\", \"buttonValue\": \"You clicked Option C\"}]\n//   }\n//   }\n// {\n//   \"interactiveWebchatOptions\": {\n//   \"type\": \"dropdown\",\n//   \"options\": [{\"uuid\": \"ccfbe80d-891e-4424-9a41-897ffdbb3932\", \"optionContent\": \"Option A\",  \"optionValue\": \"You clicked Option A\"},{\"uuid\": \"d2de75d0-5006-4c9a-8ce9-956d14a149e2\", \"optionContent\": \"Option B\", \"optionValue\": \"You clicked Option B\"}, {\"uuid\": \"c3601efc-17b1-4978-8c93-964475bcdad7\", \"optionContent\": \"Option C\", \"optionValue\": \"You clicked Option C\"}]\n//   }\n//   }","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx"],"names":["React","useState","useEffect","connect","DateAdapter","LocalizationProvider","ButtonGroup","Button","Select","FormControl","MenuItem","TextField","DatePicker","moment","defaultCurInteractives","type","options","Interactives","manager","messageList","channelSid","curInteractives","setCurInteractives","curDateValue","setDateValue","length","isFromMe","source","state","attributes","interactiveWebchatOptions","lastMessageAttributes","el","document","getElementById","scrollIntoView","sendMessage","message","chatClient","getChannelBySid","curChannel","map","o","idx","uuid","buttonValue","fontSize","textTransform","textAlign","buttonContent","optionValue","e","target","value","optionContent","props","format","mapStateToProps","flex","chat","channels","session","messages"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport DateAdapter from '@mui/lab/AdapterMoment';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport {\n  ButtonGroup,\n  Button,\n  Select,\n  FormControl,\n  MenuItem,\n  TextField,\n} from '@mui/material';\nimport { DatePicker } from '@mui/lab';\nimport moment from 'moment';\n\nconst defaultCurInteractives = { type: '', options: [] };\n\n// type = buttons OR dropdown OR date OR time\n// label can be left blank, is used in dropdown only\n// options is used for dropdown and buttons and specific props\n\nconst Interactives = ({ manager, messageList, channelSid }) => {\n  const [curInteractives, setCurInteractives] = useState(\n    defaultCurInteractives\n  );\n\n  const [curDateValue, setDateValue] = useState(moment());\n\n  useEffect(() => {\n    if (\n      messageList &&\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe &&\n      messageList[messageList.length - 1].source.state.attributes\n        .interactiveWebchatOptions\n    ) {\n      const lastMessageAttributes =\n        messageList[messageList.length - 1].source.state.attributes\n          .interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n\n  useEffect(() => {\n    if (curInteractives !== defaultCurInteractives) {\n      const el = document.getElementById('interactive-container');\n      el.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  const sendMessage = async (message) => {\n    const curChannel = await manager.chatClient.getChannelBySid(channelSid);\n    curChannel.sendMessage(message);\n  };\n\n  return (\n    <>\n      {curInteractives !== defaultCurInteractives ? (\n        <div id=\"interactive-container\">\n          {curInteractives.type === 'buttons' ? (\n            <div className=\"interactive-buttons-container\">\n              <ButtonGroup\n                orientation=\"vertical\"\n                variant=\"contained\"\n                aria-label=\"vertical contained button group small\"\n                size=\"small\"\n              >\n                {curInteractives.options.map((o, idx) => (\n                  <Button\n                    key={o.uuid}\n                    onClick={() => sendMessage(o.buttonValue)}\n                    style={{\n                      fontSize: '12px',\n                      textTransform: 'none',\n                      textAlign: 'right',\n                    }}\n                  >\n                    {o.buttonContent}\n                  </Button>\n                ))}\n              </ButtonGroup>\n            </div>\n          ) : curInteractives.type === 'dropdown' ? (\n            <div className=\"interactive-dropdown-container\">\n              <FormControl fullWidth>\n                <Select\n                  labelId=\"select-label\"\n                  id=\"select\"\n                  defaultValue={curInteractives.options[0].optionValue}\n                  onChange={(e) => sendMessage(e.target.value)}\n                >\n                  {curInteractives.options.map((o, idx) => (\n                    <MenuItem key={o.uuid} value={o.optionValue}>\n                      {o.optionContent}\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </div>\n          ) : curInteractives.type === 'calendar' ? (\n            <div className=\"interactive-calendar-container\">\n              <LocalizationProvider dateAdapter={DateAdapter}>\n                <DatePicker\n                  renderInput={(props) => <TextField {...props} />}\n                  label=\"\"\n                  value={curDateValue}\n                  defaultValue={moment()}\n                  onChange={(value) =>\n                    setDateValue(moment(value).format('MM/DD/YYYY'))\n                  }\n                />\n              </LocalizationProvider>\n              <Button onClick={() => sendMessage(curDateValue)}>\n                Select Date\n              </Button>\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n\n    // BUTTONS\n    // <div id=\"interactive-container\">\n    //   {curInteractives.options.map((o, idx) => (\n    //     <Button key={o.uuid} onClick={() => sendMessage(o.buttonValue)}>\n    //       {o.buttonContent}\n    //     </Button>\n    //   ))}\n    // </div>\n\n    // DROPDOWN\n    // <div id=\"interactive-container\">\n    //   {curInteractives.options.length ? (\n    //     <FormControl fullWidth>\n    //       <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n    //       <Select\n    //         labelId=\"demo-simple-select-label\"\n    //         id=\"demo-simple-select\"\n    //         value={'10'}\n    //         label=\"Select an option\"\n    //         onChange={() => console.log('change')}\n    //       >\n    //         {curInteractives.options.map((o, idx) => (\n    //           <MenuItem value={o.buttonValue}>{o.buttonContent}</MenuItem>\n    //         ))}\n    //       </Select>\n    //     </FormControl>\n    //   ) : (\n    //     <></>\n    //   )}\n    // </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n\n// Studio Flow Examples\n\n// {\n//   \"interactiveWebchatOptions\": {\n//   \"type\": \"buttons\",\n//   \"options\": [{\"uuid\": \"78d7ffc3-bdb5-40dd-a455-3ef352fab140\", \"buttonContent\": \"Option A\",  \"buttonValue\": \"You clicked Option A\"},{\"uuid\": \"e11ef994-4a61-4a0c-aa5f-0ae4d93b91cf\", \"buttonContent\": \"Option B\", \"buttonValue\": \"You clicked Option B\"}, {\"uuid\": \"34506dc-76f5-4286-a0c9-3f63388a38b1\", \"buttonContent\": \"Option C\", \"buttonValue\": \"You clicked Option C\"}]\n//   }\n//   }\n\n// {\n//   \"interactiveWebchatOptions\": {\n//   \"type\": \"dropdown\",\n//   \"options\": [{\"uuid\": \"ccfbe80d-891e-4424-9a41-897ffdbb3932\", \"optionContent\": \"Option A\",  \"optionValue\": \"You clicked Option A\"},{\"uuid\": \"d2de75d0-5006-4c9a-8ce9-956d14a149e2\", \"optionContent\": \"Option B\", \"optionValue\": \"You clicked Option B\"}, {\"uuid\": \"c3601efc-17b1-4978-8c93-964475bcdad7\", \"optionContent\": \"Option C\", \"optionValue\": \"You clicked Option C\"}]\n//   }\n//   }\n"]},"metadata":{},"sourceType":"module"}