{"ast":null,"code":"\"use strict\";\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar user_1 = require(\"../user\");\n\nvar userdescriptors_1 = require(\"./userdescriptors\");\n/**\n * @classdesc Container for known users\n * @fires Users#userUpdated\n */\n\n\nvar Users = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Users, _events_1$EventEmitte);\n\n  function Users(services) {\n    (0, _classCallCheck3.default)(this, Users);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Users.__proto__ || (0, _getPrototypeOf2.default)(Users)).call(this));\n\n    _this.services = services;\n    _this.fifoStack = [];\n    _this.fifoStackMaxLength = 100;\n    _this.myself = new user_1.User(null, null, _this.services);\n\n    _this.myself.on('updated', function (args) {\n      return _this.emit('userUpdated', args);\n    });\n\n    _this.myself.on('userSubscribed', function () {\n      return _this.emit('userSubscribed', _this.myself);\n    });\n\n    _this.myself.on('userUnsubscribed', function () {\n      _this.emit('userUnsubscribed', _this.myself);\n\n      _this.myself._ensureFetched();\n    });\n\n    _this.services = services;\n    _this.subscribedUsers = new _map2.default();\n    _this.userDescriptorsPromise = _this.services.session.getSessionLinks().then(function (links) {\n      _this.userDescriptors = new userdescriptors_1.UserDescriptors({\n        users: _this,\n        network: _this.services.network\n      }, links.usersUrl);\n      return _this.userDescriptors;\n    });\n\n    _this.services.session.getMaxUserInfosToSubscribe().then(function (maxUserInfosToSubscribe) {\n      _this.fifoStackMaxLength = maxUserInfosToSubscribe;\n    });\n\n    _this.services.session.getUsersData().then(function (data) {\n      _this.myself.identity = data.identity;\n      _this.myself.entityName = data.user;\n      return _this.myself._ensureFetched();\n    });\n\n    return _this;\n  }\n\n  (0, _createClass3.default)(Users, [{\n    key: \"handleUnsubscribeUser\",\n    value: function handleUnsubscribeUser(user) {\n      if (this.subscribedUsers.has(user.identity)) {\n        this.subscribedUsers.delete(user.identity);\n      }\n\n      var foundItemIndex = -1;\n      var foundItem = this.fifoStack.find(function (item, index) {\n        if (item == user.identity) {\n          foundItemIndex = index;\n          return true;\n        }\n\n        return false;\n      });\n\n      if (foundItem) {\n        this.fifoStack.splice(foundItemIndex, 1);\n      }\n\n      this.emit('userUnsubscribed', user);\n    }\n  }, {\n    key: \"handleSubscribeUser\",\n    value: function handleSubscribeUser(user) {\n      if (this.subscribedUsers.has(user.identity)) {\n        return;\n      }\n\n      if (this.fifoStack.length >= this.fifoStackMaxLength) {\n        this.subscribedUsers.get(this.fifoStack.shift()).unsubscribe();\n      }\n\n      this.fifoStack.push(user.identity);\n      this.subscribedUsers.set(user.identity, user);\n      this.emit('userSubscribed', user);\n    }\n    /**\n     * Gets user, if it's in subscribed list - then return the user object from it,\n     * if not - then subscribes and adds user to the FIFO stack\n     * @returns {Promise<User>} Fully initialized user\n     */\n\n  }, {\n    key: \"getUser\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(identity) {\n        var _this2 = this;\n\n        var entityName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        var user, userDescriptor;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.services.session.getUsersData();\n\n              case 2:\n                _context.next = 4;\n                return this.myself._ensureFetched();\n\n              case 4:\n                if (!(identity == this.myself.identity)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this.myself);\n\n              case 6:\n                user = this.subscribedUsers.get(identity);\n\n                if (user) {\n                  _context.next = 19;\n                  break;\n                }\n\n                if (entityName) {\n                  _context.next = 13;\n                  break;\n                }\n\n                _context.next = 11;\n                return this.getUserDescriptor(identity);\n\n              case 11:\n                userDescriptor = _context.sent;\n                entityName = userDescriptor._getDescriptor().sync_unique_name;\n\n              case 13:\n                user = new user_1.User(identity, entityName, this.services);\n                user.on('updated', function (args) {\n                  return _this2.emit('userUpdated', args);\n                });\n                user.on('userSubscribed', function () {\n                  return _this2.handleSubscribeUser(user);\n                });\n                user.on('userUnsubscribed', function () {\n                  return _this2.handleUnsubscribeUser(user);\n                });\n                _context.next = 19;\n                return user._ensureFetched();\n\n              case 19:\n                return _context.abrupt(\"return\", user);\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getUser(_x2) {\n        return _ref.apply(this, arguments);\n      }\n\n      return getUser;\n    }()\n    /**\n     * @returns {Promise<UserDescriptor>} User descriptor\n     */\n\n  }, {\n    key: \"getUserDescriptor\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(identity) {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.userDescriptorsPromise;\n\n              case 2:\n                return _context2.abrupt(\"return\", this.userDescriptors.getUserDescriptor(identity));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getUserDescriptor(_x3) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return getUserDescriptor;\n    }()\n    /**\n     * @returns {Promise<Paginator<UserDescriptor>>} Users descriptors page for given channel sid\n     */\n\n  }, {\n    key: \"getChannelUserDescriptors\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(channelSid) {\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.userDescriptorsPromise;\n\n              case 2:\n                return _context3.abrupt(\"return\", this.userDescriptors.getChannelUserDescriptors(channelSid));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getChannelUserDescriptors(_x4) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return getChannelUserDescriptors;\n    }()\n    /**\n     * @returns {Promise<Array<User>>} returns list of subscribed User objects {@see User}\n     */\n\n  }, {\n    key: \"getSubscribedUsers\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {\n        var users;\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.services.session.getUsersData();\n\n              case 2:\n                _context4.next = 4;\n                return this.myself._ensureFetched();\n\n              case 4:\n                users = [this.myself];\n                this.subscribedUsers.forEach(function (user) {\n                  return users.push(user);\n                });\n                return _context4.abrupt(\"return\", users);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getSubscribedUsers() {\n        return _ref4.apply(this, arguments);\n      }\n\n      return getSubscribedUsers;\n    }()\n  }]);\n  return Users;\n}(events_1.EventEmitter);\n\nexports.Users = Users;","map":null,"metadata":{},"sourceType":"script"}