{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _assertThisInitialized = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _asyncToGenerator = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstantQuery = exports.LiveQuery = exports.queryItems = exports.LiveQueryImpl = exports.InsightsItem = void 0;\n\nvar uri_1 = require(\"./utils/uri\");\n\nvar syncerror_1 = require(\"./utils/syncerror\");\n\nvar logger_1 = require(\"./utils/logger\");\n\nvar events_1 = require(\"events\");\n\nvar entity_1 = require(\"./entity\");\n\nvar closeable_1 = require(\"./closeable\");\n\nvar cache_1 = require(\"./cache\");\n\nvar InsightsItem = /*#__PURE__*/_createClass(function InsightsItem() {\n  _classCallCheck(this, InsightsItem);\n});\n\nexports.InsightsItem = InsightsItem;\n\nvar LiveQueryImpl = /*#__PURE__*/function (_entity_1$SyncEntity) {\n  _inherits(LiveQueryImpl, _entity_1$SyncEntity);\n\n  var _super = _createSuper(LiveQueryImpl);\n\n  function LiveQueryImpl(descriptor, services, removalHandler, items) {\n    var _this;\n\n    _classCallCheck(this, LiveQueryImpl);\n\n    _this = _super.call(this, services, removalHandler);\n    _this.descriptor = descriptor;\n    _this.cache = new cache_1.Cache();\n\n    if (items) {\n      items.forEach(function (item) {\n        _this.cache.store(item.key, {\n          key: item.key,\n          value: item.data\n        }, item.revision);\n      });\n    }\n\n    return _this;\n  } // public\n\n\n  _createClass(LiveQueryImpl, [{\n    key: \"sid\",\n    get: function get() {\n      return this.descriptor.sid;\n    } // private extension of SyncEntity\n\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return LiveQueryImpl.type;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return this.descriptor.last_event_id;\n    }\n  }, {\n    key: \"indexName\",\n    get: function get() {\n      return this.descriptor.indexName;\n    }\n  }, {\n    key: \"queryString\",\n    get: function get() {\n      return this.descriptor.queryExpression;\n    } // custom private props\n\n  }, {\n    key: \"queryUri\",\n    get: function get() {\n      return this.descriptor.queryUri;\n    }\n  }, {\n    key: \"liveQueryDescriptor\",\n    get: function get() {\n      return this.descriptor;\n    } // dummy stub from iface\n\n  }, {\n    key: \"onRemoved\",\n    value: function onRemoved() {}\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      var dataByKey = {};\n      this.cache.forEach(function (key, item) {\n        dataByKey[key] = item.value;\n      });\n      return dataByKey;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_update\",\n    value: function _update(message, isStrictlyOrdered) {\n      switch (message.type) {\n        case 'live_query_item_updated':\n          this.handleItemMutated(message.item_key, message.item_data, message.item_revision);\n          break;\n\n        case 'live_query_item_removed':\n          this.handleItemRemoved(message.item_key, message.item_revision);\n          break;\n\n        case 'live_query_updated':\n          this.handleBatchUpdate(message.items);\n          break;\n      }\n\n      if (isStrictlyOrdered) {\n        this._advanceLastEventId(message.last_event_id);\n      }\n    }\n  }, {\n    key: \"handleItemMutated\",\n    value: function handleItemMutated(key, value, revision) {\n      if (this.shouldIgnoreEvent(key, revision)) {\n        logger_1.default.trace(\"Item \".concat(key, \" update skipped, revision: \").concat(revision));\n      } else {\n        var newItem = {\n          key: key,\n          value: value\n        };\n        this.cache.store(key, newItem, revision);\n        this.broadcastEventToListeners('itemUpdated', newItem);\n      }\n    }\n  }, {\n    key: \"handleItemRemoved\",\n    value: function handleItemRemoved(key, revision) {\n      var force = revision === null;\n\n      if (this.shouldIgnoreEvent(key, revision)) {\n        logger_1.default.trace(\"Item \".concat(key, \" delete skipped, revision: \").concat(revision));\n      } else {\n        this.cache.delete(key, revision, force);\n        this.broadcastEventToListeners('itemRemoved', {\n          key: key\n        });\n      }\n    }\n  }, {\n    key: \"handleBatchUpdate\",\n    value: function handleBatchUpdate(items) {\n      var _this2 = this;\n\n      // preprocess item set for easy key-based access (it's a one-time constant time operation)\n      var newItems = {};\n\n      if (items != null) {\n        items.forEach(function (item) {\n          newItems[item.key] = {\n            data: item.data,\n            revision: item.revision\n          };\n        });\n      } // go through existing items and generate update/remove events for them\n\n\n      this.cache.forEach(function (key, item) {\n        var newItem = newItems[key];\n\n        if (newItem != null) {\n          _this2.handleItemMutated(key, newItem.data, newItem.revision);\n        } else {\n          _this2.handleItemRemoved(key, null); // force deletion w/o revision\n\n        } // once item is handled, remove it from incoming array\n\n\n        delete newItems[key];\n      }); // once we handled all the known items, handle remaining pack\n\n      for (var key in newItems) {\n        this.handleItemMutated(key, newItems[key].data, newItems[key].revision);\n      }\n    }\n  }, {\n    key: \"shouldIgnoreEvent\",\n    value: function shouldIgnoreEvent(key, eventId) {\n      return key != null && eventId != null && this.cache.isKnown(key, eventId);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_advanceLastEventId\",\n    value: function _advanceLastEventId(eventId, revision) {\n      // LiveQuery is not revisioned in any way, so simply ignore second param and act upon lastEventId only\n      if (this.lastEventId < eventId) {\n        this.descriptor.last_event_id = eventId;\n      }\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'live_query';\n    }\n  }]);\n\n  return LiveQueryImpl;\n}(entity_1.SyncEntity);\n\nexports.LiveQueryImpl = LiveQueryImpl;\n\nfunction queryItems(_x) {\n  return _queryItems.apply(this, arguments);\n}\n\nfunction _queryItems() {\n  _queryItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n    var network, queryString, uri, type, liveQueryRequestBody, response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            network = params.network, queryString = params.queryString, uri = params.uri, type = params.type;\n\n            if (!(queryString == null)) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw new syncerror_1.SyncError(\"Invalid query\", 400, 54507);\n\n          case 3:\n            liveQueryRequestBody = {\n              query_string: queryString // raw query string (like `key == \"value\" AND key2 != \"value2\"`)\n\n            };\n\n            if (type === LiveQuery.type) {\n              liveQueryRequestBody.type = type;\n            }\n\n            _context3.next = 7;\n            return network.post(uri, liveQueryRequestBody, undefined, true);\n\n          case 7:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response.body);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _queryItems.apply(this, arguments);\n}\n\nexports.queryItems = queryItems;\n/**\n * @class\n * @alias LiveQuery\n * @classdesc Represents a long-running query against Flex data wherein the returned result set\n *     subsequently receives pushed updates whenever new (or updated) records would match the\n *     given expression. Updated results are presented row-by-row until this query is explicitly\n *     closed.\n *\n *     Use the {@link Client#liveQuery} method to create a live query.\n *\n * @property {String} sid The immutable identifier of this query object, assigned by the system.\n *\n * @fires LiveQuery#itemUpdated\n * @fires LiveQuery#itemRemoved\n */\n\nvar LiveQuery = /*#__PURE__*/function (_closeable_1$Closeabl) {\n  _inherits(LiveQuery, _closeable_1$Closeabl);\n\n  var _super2 = _createSuper(LiveQuery);\n\n  /**\n   * @private\n   */\n  function LiveQuery(liveQueryImpl) {\n    var _this3;\n\n    _classCallCheck(this, LiveQuery);\n\n    _this3 = _super2.call(this);\n    _this3.liveQueryImpl = liveQueryImpl;\n\n    _this3.liveQueryImpl.attach(_assertThisInitialized(_this3));\n\n    return _this3;\n  } // private props\n\n\n  _createClass(LiveQuery, [{\n    key: \"type\",\n    get: function get() {\n      return LiveQueryImpl.type;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return this.liveQueryImpl.lastEventId;\n    } // public\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.liveQueryImpl.sid;\n    }\n    /**\n     * Closes this query instance and unsubscribes from further service events.\n     * This will eventually stop the physical inflow of updates over the network, when all other instances of this query are closed as well.\n     * @public\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      _get(_getPrototypeOf(LiveQuery.prototype), \"close\", this).call(this);\n\n      this.liveQueryImpl.detach(this.listenerUuid);\n    }\n    /**\n     * @returns {LiveQuery#ItemsSnapshot} A snapshot of items matching the current query expression.\n     * @public\n     */\n\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      this.ensureNotClosed();\n      return this.liveQueryImpl.getItems();\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return LiveQueryImpl.type;\n    }\n  }]);\n\n  return LiveQuery;\n}(closeable_1.Closeable);\n\nexports.LiveQuery = LiveQuery;\n/**\n * @class\n * @alias InstantQuery\n * @classdesc Allows repetitive quick searches against a specific Flex data. Unlike a\n * LiveQuery, this result set does not subscribe to any updates and therefore receives no events\n * beyond the initial result set.\n *\n * Use the {@link Client#instantQuery} method to create an Instant Query.\n *\n * @fires InstantQuery#searchResult\n */\n\nvar InstantQuery = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(InstantQuery, _events_1$EventEmitte);\n\n  var _super3 = _createSuper(InstantQuery);\n\n  /**\n   * @private\n   */\n  function InstantQuery(params) {\n    var _this4;\n\n    _classCallCheck(this, InstantQuery);\n\n    _this4 = _super3.call(this);\n    _this4.queryExpression = null;\n    _this4.items = {};\n    Object.assign(_assertThisInitialized(_this4), params);\n\n    _this4.updateIndexName(params.indexName);\n\n    return _this4;\n  } // private props\n\n\n  _createClass(InstantQuery, [{\n    key: \"type\",\n    get: function get() {\n      return InstantQuery.type;\n    }\n    /**\n     * Spawns a new search request. The result will be provided asynchronously via the {@link InstantQuery#event:searchResult}\n     * event.\n     * @param {String} queryExpression A query expression to be executed against the given data index. For more information\n     * on the syntax read {@link Client#liveQuery}.\n     * @returns {Promise<void>} A promise that resolves when query result has been received.\n     * @public\n     */\n\n  }, {\n    key: \"search\",\n    value: function () {\n      var _search = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(queryExpression) {\n        var _this5 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.items = {};\n                return _context.abrupt(\"return\", queryItems({\n                  network: this.network,\n                  uri: this.queryUri,\n                  queryString: queryExpression\n                }).then(function (response) {\n                  _this5.queryExpression = queryExpression;\n\n                  if (response.items) {\n                    response.items.forEach(function (item) {\n                      _this5.items[item.key] = item.data;\n                    });\n                  }\n\n                  _this5.emit('searchResult', _this5.getItems());\n                }).catch(function (err) {\n                  logger_1.default.error(\"Error '\".concat(err.message, \"' while executing query '\").concat(queryExpression, \"'\"));\n                  _this5.queryExpression = null;\n                  throw err;\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function search(_x2) {\n        return _search.apply(this, arguments);\n      }\n\n      return search;\n    }()\n    /**\n     * Instantiates a LiveQuery object based on the last known query expression that was passed to the\n     * {@link InstantQuery#search} method. This LiveQuery will start receiving updates with new results,\n     * while current object can be still used to execute repetitive searches.\n     * @returns {Promise<LiveQuery>} A promise which resolves when the LiveQuery object is ready.\n     * @public\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.queryExpression == null)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", Promise.reject(new syncerror_1.SyncError(\"Invalid query\", 400, 54507)));\n\n              case 2:\n                return _context2.abrupt(\"return\", this.liveQueryCreator(this.indexName, this.queryExpression));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function subscribe() {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * @returns {LiveQuery#ItemsSnapshot} A snapshot of items matching current query expression.\n     * @public\n     */\n\n  }, {\n    key: \"getItems\",\n    value: function getItems() {\n      return this.items;\n    }\n    /**\n     * Set new index name\n     * @param {String} indexName New index name to set\n     * @returns void\n     * @public\n     */\n\n  }, {\n    key: \"updateIndexName\",\n    value: function updateIndexName(indexName) {\n      if (!indexName || typeof indexName !== 'string') {\n        throw new Error('Index name must contain a non-empty string value');\n      }\n\n      this.indexName = indexName;\n      this.queryUri = this.generateQueryUri(this.indexName);\n    }\n  }, {\n    key: \"generateQueryUri\",\n    value: function generateQueryUri(indexName) {\n      return new uri_1.UriBuilder(this.insightsUri).pathSegment(indexName).pathSegment('Items').build();\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'instant_query';\n    }\n  }]);\n\n  return InstantQuery;\n}(events_1.EventEmitter);\n\nexports.InstantQuery = InstantQuery;\nexports.default = LiveQuery;\n/**\n * @class InsightsItem\n * @classdesc An individual result from a LiveQuery or InstantQuery result set.\n * @property {String} key The identifier that maps to this item within the search result.\n * @property {Object} value The contents of the item.\n */\n\n/**\n * A result set, i.e. a collection of items that matched a LiveQuery or InstantQuery expression. Each result is a\n * key-value pair, where each key identifies its object uniquely. These results are equivalent to a set of\n * {@link InsightsItem}-s.\n * @typedef {Object.<string, Object>} LiveQuery#ItemsSnapshot\n */\n\n/**\n * Fired when an item has been added or updated.\n * @event LiveQuery#itemUpdated\n * @param {InsightsItem} item Updated item.\n * @example\n * liveQuery.on('itemUpdated', function(item) {\n *   console.log('Item ' + item.key + ' was updated');\n *   console.log('Item value: ', item.value);\n * });\n */\n\n/**\n * Fired when an existing item has been removed.\n * @event LiveQuery#itemRemoved\n * @param {Object} args Arguments provided with the event.\n * @param {String} args.key The key of the removed item.\n * @example\n * liveQuery.on('itemRemoved', function(args) {\n *   console.log('Item ' + args.key + ' was removed');\n * });\n */\n\n/**\n * Fired when a search result is ready.\n * @event InstantQuery#searchResult\n * @param {LiveQuery#ItemsSnapshot} items A snapshot of items matching current query expression.\n * @example\n * instantQuery.on('searchResult', function(items) {\n *    Object.entries(items).forEach(([key, value]) => {\n *      console.log('Search result item key: ' + key);\n *      console.log('Search result item value: ' + value);\n *    });\n * });\n */","map":null,"metadata":{},"sourceType":"script"}