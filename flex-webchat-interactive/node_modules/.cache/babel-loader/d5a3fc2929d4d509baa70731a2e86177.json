{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Router = void 0;\n\nvar logger_1 = require(\"./utils/logger\");\n\nvar SYNC_DOCUMENT_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.document';\nvar SYNC_LIST_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.list';\nvar SYNC_MAP_NOTIFICATION_TYPE = 'com.twilio.rtd.cds.map';\nvar SYNC_NOTIFICATION_TYPE = 'twilio.sync.event';\n/**\n * @class Router\n * @classdesc Routes all incoming messages to the consumers\n */\n\nvar Router = /*#__PURE__*/function () {\n  function Router(params) {\n    var _this = this;\n\n    _classCallCheck(this, Router);\n\n    this.config = params.config;\n    this.subscriptions = params.subscriptions;\n    this.notifications = params.notifications;\n    this.notifications.subscribe(SYNC_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_DOCUMENT_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_LIST_NOTIFICATION_TYPE);\n    this.notifications.subscribe(SYNC_MAP_NOTIFICATION_TYPE);\n    this.notifications.on('message', function (messageType, payload) {\n      return _this.onMessage(messageType, payload);\n    });\n    this.notifications.on('transportReady', function (isConnected) {\n      return _this.onConnectionStateChanged(isConnected);\n    });\n  }\n  /**\n   * Entry point for all incoming messages\n   * @param {String} type - Type of incoming message\n   * @param {Object} message - Message to route\n   */\n\n\n  _createClass(Router, [{\n    key: \"onMessage\",\n    value: function onMessage(type, message) {\n      logger_1.default.trace('Notification type:', type, 'content:', message);\n\n      switch (type) {\n        case SYNC_DOCUMENT_NOTIFICATION_TYPE:\n        case SYNC_LIST_NOTIFICATION_TYPE:\n        case SYNC_MAP_NOTIFICATION_TYPE:\n          this.subscriptions.acceptMessage(message, false);\n          break;\n\n        case SYNC_NOTIFICATION_TYPE:\n          this.subscriptions.acceptMessage(message, true);\n          break;\n      }\n    }\n    /**\n     * Subscribe for events\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(sid, entity) {\n      this.subscriptions.add(sid, entity);\n    }\n    /**\n     * Unsubscribe from events\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(sid) {\n      this.subscriptions.remove(sid);\n    }\n    /**\n     * Handle transport establishing event\n     * If we have any subscriptions - we should check object for modifications\n     */\n\n  }, {\n    key: \"onConnectionStateChanged\",\n    value: function onConnectionStateChanged(isConnected) {\n      this.subscriptions.onConnectionStateChanged(isConnected);\n    }\n  }]);\n\n  return Router;\n}();\n\nexports.Router = Router;\nexports.default = Router;","map":null,"metadata":{},"sourceType":"script"}