{"ast":null,"code":"var bind = require('../internals/function-bind-context');\n\nvar call = require('../internals/function-call');\n\nvar aConstructor = require('../internals/a-constructor');\n\nvar toObject = require('../internals/to-object');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar getIterator = require('../internals/get-iterator');\n\nvar getIteratorMethod = require('../internals/get-iterator-method');\n\nvar isArrayIteratorMethod = require('../internals/is-array-iterator-method');\n\nvar aTypedArrayConstructor = require('../internals/array-buffer-view-core').aTypedArrayConstructor;\n\nmodule.exports = function from(source\n/* , mapfn, thisArg */\n) {\n  var C = aConstructor(this);\n  var O = toObject(source);\n  var argumentsLength = arguments.length;\n  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;\n  var mapping = mapfn !== undefined;\n  var iteratorMethod = getIteratorMethod(O);\n  var i, length, result, step, iterator, next;\n\n  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {\n    iterator = getIterator(O, iteratorMethod);\n    next = iterator.next;\n    O = [];\n\n    while (!(step = call(next, iterator)).done) {\n      O.push(step.value);\n    }\n  }\n\n  if (mapping && argumentsLength > 2) {\n    mapfn = bind(mapfn, arguments[2]);\n  }\n\n  length = lengthOfArrayLike(O);\n  result = new (aTypedArrayConstructor(C))(length);\n\n  for (i = 0; length > i; i++) {\n    result[i] = mapping ? mapfn(O[i], i) : O[i];\n  }\n\n  return result;\n};","map":null,"metadata":{},"sourceType":"script"}