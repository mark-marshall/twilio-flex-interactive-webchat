{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n/**\n * Provides retrier service\n */\n\n\nvar Retrier = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Retrier, _events_1$EventEmitte);\n\n  var _super = _createSuper(Retrier);\n\n  /**\n   * Creates a new Retrier instance\n   */\n  function Retrier(options) {\n    var _this;\n\n    _classCallCheck(this, Retrier);\n\n    _this = _super.call(this);\n    _this.minDelay = options.min;\n    _this.maxDelay = options.max;\n    _this.initialDelay = options.initial || 0;\n    _this.maxAttemptsCount = options.maxAttemptsCount || 0;\n    _this.maxAttemptsTime = options.maxAttemptsTime || 0;\n    _this.randomness = options.randomness || 0;\n    _this.inProgress = false;\n    _this.attemptNum = 0;\n    _this.prevDelay = 0;\n    _this.currDelay = 0;\n    return _this;\n  }\n\n  _createClass(Retrier, [{\n    key: \"attempt\",\n    value: function attempt() {\n      clearTimeout(this.timeout);\n      this.attemptNum++;\n      this.timeout = null;\n      this.emit('attempt', this);\n    }\n  }, {\n    key: \"nextDelay\",\n    value: function nextDelay(delayOverride) {\n      if (typeof delayOverride === 'number') {\n        this.prevDelay = 0;\n        this.currDelay = delayOverride;\n        return delayOverride;\n      }\n\n      if (this.attemptNum == 0) {\n        return this.initialDelay;\n      }\n\n      if (this.attemptNum == 1) {\n        this.currDelay = this.minDelay;\n        return this.currDelay;\n      }\n\n      this.prevDelay = this.currDelay;\n      var delay = this.currDelay + this.prevDelay;\n\n      if (this.maxDelay && delay > this.maxDelay) {\n        this.currDelay = this.maxDelay;\n        delay = this.maxDelay;\n      }\n\n      this.currDelay = delay;\n      return delay;\n    }\n  }, {\n    key: \"randomize\",\n    value: function randomize(delay) {\n      var area = delay * this.randomness;\n      var corr = Math.round(Math.random() * area * 2 - area);\n      return Math.max(0, delay + corr);\n    }\n  }, {\n    key: \"scheduleAttempt\",\n    value: function scheduleAttempt(delayOverride) {\n      var _this2 = this;\n\n      if (this.maxAttemptsCount && this.attemptNum >= this.maxAttemptsCount) {\n        this.cleanup();\n        this.emit('failed', new Error('Maximum attempt count limit reached'));\n        this.reject(new Error('Maximum attempt count reached'));\n        return;\n      }\n\n      var delay = this.nextDelay(delayOverride);\n      delay = this.randomize(delay);\n\n      if (this.maxAttemptsTime && this.startTimestamp + this.maxAttemptsTime < Date.now() + delay) {\n        this.cleanup();\n        this.emit('failed', new Error('Maximum attempt time limit reached'));\n        this.reject(new Error('Maximum attempt time limit reached'));\n        return;\n      }\n\n      this.timeout = setTimeout(function () {\n        return _this2.attempt();\n      }, delay);\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n      this.inProgress = false;\n      this.attemptNum = 0;\n      this.prevDelay = 0;\n      this.currDelay = 0;\n    }\n  }, {\n    key: \"start\",\n    value: function start() {\n      var _this3 = this;\n\n      if (this.inProgress) {\n        throw new Error('Retrier is already in progress');\n      }\n\n      this.inProgress = true;\n      return new Promise(function (resolve, reject) {\n        _this3.resolve = resolve;\n        _this3.reject = reject;\n        _this3.startTimestamp = Date.now();\n\n        _this3.scheduleAttempt(_this3.initialDelay);\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.timeout) {\n        clearTimeout(this.timeout);\n        this.timeout = null;\n        this.inProgress = false;\n        this.emit('cancelled');\n        this.reject(new Error('Cancelled'));\n      }\n    }\n  }, {\n    key: \"succeeded\",\n    value: function succeeded(arg) {\n      this.emit('succeeded', arg);\n      this.resolve(arg);\n    }\n  }, {\n    key: \"failed\",\n    value: function failed(err, nextAttemptDelayOverride) {\n      if (this.timeout) {\n        throw new Error('Retrier attempt is already in progress');\n      }\n\n      this.scheduleAttempt(nextAttemptDelayOverride);\n    }\n  }, {\n    key: \"run\",\n    value: function run(handler) {\n      var _this4 = this;\n\n      this.on('attempt', function () {\n        handler().then(function (v) {\n          return _this4.succeeded(v);\n        }).catch(function (e) {\n          return _this4.failed(e);\n        });\n      });\n      return this.start();\n    }\n  }]);\n\n  return Retrier;\n}(events_1.EventEmitter);\n\nexports.Retrier = Retrier;\nexports.default = Retrier;","map":null,"metadata":{},"sourceType":"script"}