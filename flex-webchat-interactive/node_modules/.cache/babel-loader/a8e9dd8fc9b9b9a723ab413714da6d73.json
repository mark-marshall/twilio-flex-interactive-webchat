{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NamespacedMergingQueue = exports.MergingQueue = void 0;\n\nvar MergingQueue = /*#__PURE__*/function () {\n  function MergingQueue(inputMergingFunction) {\n    _classCallCheck(this, MergingQueue);\n\n    this.queuedRequests = [];\n    this.isRequestInFlight = false;\n    this.inputMergingFunction = inputMergingFunction;\n  }\n\n  _createClass(MergingQueue, [{\n    key: \"add\",\n    value: function add(input, requestFunction) {\n      var _this = this;\n\n      var promise = new Promise(function (resolve, reject) {\n        return _this.queuedRequests.push({\n          input: input,\n          requestFunction: requestFunction,\n          resolve: resolve,\n          reject: reject\n        });\n      });\n      this.wakeupQueue();\n      return promise;\n    }\n  }, {\n    key: \"squashAndAdd\",\n    value: function squashAndAdd(input, requestFunction) {\n      var queueToSquash = this.queuedRequests;\n      this.queuedRequests = [];\n      var reducedInput;\n\n      if (queueToSquash.length > 0) {\n        reducedInput = queueToSquash.map(function (r) {\n          return r.input;\n        }).reduce(this.inputMergingFunction);\n        reducedInput = this.inputMergingFunction(reducedInput, input);\n      } else {\n        reducedInput = input;\n      }\n\n      var promise = this.add(reducedInput, requestFunction);\n      queueToSquash.forEach(function (request) {\n        return promise.then(request.resolve, request.reject);\n      });\n      return promise;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.queuedRequests.length === 0 && !this.isRequestInFlight;\n    }\n  }, {\n    key: \"wakeupQueue\",\n    value: function wakeupQueue() {\n      var _this2 = this;\n\n      if (this.queuedRequests.length === 0 || this.isRequestInFlight) {\n        return;\n      } else {\n        var requestToExecute = this.queuedRequests.shift();\n        this.isRequestInFlight = true;\n        requestToExecute.requestFunction(requestToExecute.input).then(requestToExecute.resolve, requestToExecute.reject).then(function (__) {\n          _this2.isRequestInFlight = false;\n\n          _this2.wakeupQueue();\n        });\n      }\n    }\n  }]);\n\n  return MergingQueue;\n}();\n\nexports.MergingQueue = MergingQueue;\n\nvar NamespacedMergingQueue = /*#__PURE__*/function () {\n  function NamespacedMergingQueue(inputReducer) {\n    _classCallCheck(this, NamespacedMergingQueue);\n\n    this.queueByNamespaceKey = new Map();\n    this.inputReducer = inputReducer;\n  }\n\n  _createClass(NamespacedMergingQueue, [{\n    key: \"add\",\n    value: function () {\n      var _add = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(namespaceKey, input, requestFunction) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", this.invokeQueueMethod(namespaceKey, function (queue) {\n                  return queue.add(input, requestFunction);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function add(_x, _x2, _x3) {\n        return _add.apply(this, arguments);\n      }\n\n      return add;\n    }()\n  }, {\n    key: \"squashAndAdd\",\n    value: function () {\n      var _squashAndAdd = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(namespaceKey, input, requestFunction) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.invokeQueueMethod(namespaceKey, function (queue) {\n                  return queue.squashAndAdd(input, requestFunction);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function squashAndAdd(_x4, _x5, _x6) {\n        return _squashAndAdd.apply(this, arguments);\n      }\n\n      return squashAndAdd;\n    }()\n  }, {\n    key: \"invokeQueueMethod\",\n    value: function () {\n      var _invokeQueueMethod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(namespaceKey, queueMethodInvoker) {\n        var queue, result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.queueByNamespaceKey.has(namespaceKey)) {\n                  this.queueByNamespaceKey.set(namespaceKey, new MergingQueue(this.inputReducer));\n                }\n\n                queue = this.queueByNamespaceKey.get(namespaceKey);\n                result = queueMethodInvoker(queue);\n\n                if (this.queueByNamespaceKey.get(namespaceKey).isEmpty()) {\n                  this.queueByNamespaceKey.delete(namespaceKey);\n                }\n\n                return _context3.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function invokeQueueMethod(_x7, _x8) {\n        return _invokeQueueMethod.apply(this, arguments);\n      }\n\n      return invokeQueueMethod;\n    }()\n  }]);\n\n  return NamespacedMergingQueue;\n}();\n\nexports.NamespacedMergingQueue = NamespacedMergingQueue;","map":null,"metadata":{},"sourceType":"script"}