{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SessionStorage = void 0;\n\nvar SessionStorage = /*#__PURE__*/function () {\n  function SessionStorage(config, storage) {\n    _classCallCheck(this, SessionStorage);\n\n    this.config = config;\n    this.storageId = null;\n\n    try {\n      this.storage = storage || sessionStorage;\n    } catch (e) {}\n  }\n\n  _createClass(SessionStorage, [{\n    key: \"storageKey\",\n    value: function storageKey(type, key) {\n      return \"\".concat(this.storageId, \"::\").concat(type, \"::\").concat(key);\n    }\n  }, {\n    key: \"isReady\",\n    get: function get() {\n      return this.config.sessionStorageEnabled && !!this.storageId;\n    }\n  }, {\n    key: \"updateStorageId\",\n    value: function updateStorageId(storageId) {\n      this.storageId = storageId;\n    }\n  }, {\n    key: \"store\",\n    value: function store(type, id, value) {\n      if (!this.isReady) {\n        return null;\n      }\n\n      return this._store(this.storageKey(type, id), value);\n    }\n  }, {\n    key: \"read\",\n    value: function read(type, id) {\n      if (!this.isReady) {\n        return null;\n      }\n\n      return this._read(this.storageKey(type, id));\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(type, sid, uniqueName) {\n      if (!this.isReady) {\n        return null;\n      }\n\n      try {\n        this.storage.removeItem(this.storageKey(type, sid));\n\n        if (uniqueName) {\n          this.storage.removeItem(this.storageKey(type, uniqueName));\n        }\n      } catch (e) {}\n    }\n  }, {\n    key: \"update\",\n    value: function update(type, sid, uniqueName, patch) {\n      if (!this.isReady) {\n        return null;\n      } // Currently cache may have root stored twice - by sid and by uniqueName\n      // Maybe need to create some index if needed\n\n\n      this._apply(this.storageKey(type, sid), patch);\n\n      if (uniqueName) {\n        this._apply(this.storageKey(type, uniqueName), patch);\n      }\n    }\n  }, {\n    key: \"_store\",\n    value: function _store(key, value) {\n      try {\n        this.storage.setItem(key, JSON.stringify(value));\n      } catch (e) {}\n    }\n  }, {\n    key: \"_read\",\n    value: function _read(key) {\n      try {\n        var storedData = this.storage.getItem(key);\n\n        if (storedData) {\n          return JSON.parse(storedData);\n        }\n      } catch (e) {}\n\n      return null;\n    }\n  }, {\n    key: \"_apply\",\n    value: function _apply(key, patch) {\n      var value = this._read(key);\n\n      if (!value) {\n        return false;\n      }\n\n      this._store(key, Object.assign(value, patch));\n    }\n  }]);\n\n  return SessionStorage;\n}();\n\nexports.SessionStorage = SessionStorage;","map":null,"metadata":{},"sourceType":"script"}