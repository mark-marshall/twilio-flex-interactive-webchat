{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"className\", \"color\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { capitalize } from '@mui/material/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { getTimelineDotUtilityClass } from './timelineDotClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var color = ownerState.color,\n      variant = ownerState.variant,\n      classes = ownerState.classes;\n  var slots = {\n    root: ['root', variant, color !== 'inherit' && \"\".concat(variant).concat(capitalize(color))]\n  };\n  return composeClasses(slots, getTimelineDotUtilityClass, classes);\n};\n\nvar TimelineDotRoot = styled('span', {\n  name: 'MuiTimelineDot',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    var ownerState = props.ownerState;\n    return [styles.root, styles[ownerState.color !== 'inherit' && \"\".concat(ownerState.variant).concat(capitalize(ownerState.color))], styles[ownerState.variant]];\n  }\n})(function (_ref) {\n  var ownerState = _ref.ownerState,\n      theme = _ref.theme;\n  return _extends({\n    display: 'flex',\n    alignSelf: 'baseline',\n    borderStyle: 'solid',\n    borderWidth: 2,\n    padding: 4,\n    borderRadius: '50%',\n    boxShadow: theme.shadows[1],\n    margin: '11.5px 0'\n  }, ownerState.variant === 'filled' && _extends({\n    borderColor: 'transparent'\n  }, ownerState.color !== 'inherit' && _extends({}, ownerState.color === 'grey' ? {\n    color: theme.palette.grey[50],\n    backgroundColor: theme.palette.grey[400]\n  } : {\n    color: theme.palette[ownerState.color].contrastText,\n    backgroundColor: theme.palette[ownerState.color].main\n  })), ownerState.variant === 'outlined' && _extends({\n    boxShadow: 'none',\n    backgroundColor: 'transparent'\n  }, ownerState.color !== 'inherit' && _extends({}, ownerState.color === 'grey' ? {\n    borderColor: theme.palette.grey[400]\n  } : {\n    borderColor: theme.palette[ownerState.color].main\n  })));\n});\nvar TimelineDot = /*#__PURE__*/React.forwardRef(function TimelineDot(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiTimelineDot'\n  });\n\n  var className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'grey' : _props$color,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'filled' : _props$variant,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var ownerState = _extends({}, props, {\n    color: color,\n    variant: variant\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(TimelineDotRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? TimelineDot.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The dot can have a different colors.\n   * @default 'grey'\n   */\n  color: PropTypes.oneOf(['error', 'grey', 'info', 'inherit', 'primary', 'secondary', 'success', 'warning']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The dot can appear filled or outlined.\n   * @default 'filled'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined']), PropTypes.string])\n} : void 0;\nexport default TimelineDot;","map":null,"metadata":{},"sourceType":"module"}