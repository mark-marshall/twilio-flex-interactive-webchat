{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { unstable_useForkRef as useForkRef, unstable_useId as useId } from '@mui/utils';\nimport { ActionTypes } from './types';\nimport defaultReducer from './defaultListboxReducer';\nimport useControllableReducer from './useControllableReducer';\nimport areArraysEqual from '../utils/areArraysEqual';\n\nvar defaultOptionComparer = function defaultOptionComparer(optionA, optionB) {\n  return optionA === optionB;\n};\n\nexport default function useListbox(props) {\n  var _props$optionIdGenera, _options$highlightedI;\n\n  var _props$disableListWra = props.disableListWrap,\n      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,\n      _props$disabledItemsF = props.disabledItemsFocusable,\n      disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,\n      idProp = props.id,\n      options = props.options,\n      _props$multiple = props.multiple,\n      multiple = _props$multiple === void 0 ? false : _props$multiple,\n      _props$isOptionDisabl = props.isOptionDisabled,\n      isOptionDisabled = _props$isOptionDisabl === void 0 ? function () {\n    return false;\n  } : _props$isOptionDisabl,\n      _props$optionComparer = props.optionComparer,\n      optionComparer = _props$optionComparer === void 0 ? defaultOptionComparer : _props$optionComparer,\n      externalReducer = props.stateReducer,\n      externalListboxRef = props.listboxRef;\n  var id = useId(idProp);\n\n  function defaultIdGenerator(_, index) {\n    return \"\".concat(id, \"-option-\").concat(index);\n  }\n\n  var optionIdGenerator = (_props$optionIdGenera = props.optionIdGenerator) != null ? _props$optionIdGenera : defaultIdGenerator;\n\n  var propsWithDefaults = _extends({}, props, {\n    disableListWrap: disableListWrap,\n    disabledItemsFocusable: disabledItemsFocusable,\n    isOptionDisabled: isOptionDisabled,\n    multiple: multiple,\n    optionComparer: optionComparer\n  });\n\n  var listboxRef = React.useRef(null);\n  var handleRef = useForkRef(externalListboxRef, listboxRef);\n\n  var _useControllableReduc = useControllableReducer(defaultReducer, externalReducer, propsWithDefaults),\n      _useControllableReduc2 = _slicedToArray(_useControllableReduc, 2),\n      _useControllableReduc3 = _useControllableReduc2[0],\n      highlightedIndex = _useControllableReduc3.highlightedIndex,\n      selectedValue = _useControllableReduc3.selectedValue,\n      dispatch = _useControllableReduc2[1];\n\n  var previousOptions = React.useRef([]);\n  React.useEffect(function () {\n    if (areArraysEqual(previousOptions.current, options, optionComparer)) {\n      return;\n    }\n\n    dispatch({\n      type: ActionTypes.optionsChange,\n      options: options,\n      previousOptions: previousOptions.current,\n      props: propsWithDefaults\n    });\n    previousOptions.current = options; // No need to re-run this effect if props change\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, optionComparer, dispatch]);\n\n  var createHandleOptionClick = function createHandleOptionClick(option, other) {\n    return function (event) {\n      var _other$onClick;\n\n      (_other$onClick = other.onClick) == null ? void 0 : _other$onClick.call(other, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      event.preventDefault();\n      dispatch({\n        type: ActionTypes.optionClick,\n        option: option,\n        event: event,\n        props: propsWithDefaults\n      });\n    };\n  };\n\n  var createHandleKeyDown = function createHandleKeyDown(other) {\n    return function (event) {\n      var _other$onKeyDown;\n\n      (_other$onKeyDown = other.onKeyDown) == null ? void 0 : _other$onKeyDown.call(other, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      var keysToPreventDefault = [' ', 'Enter', 'ArrowUp', 'ArrowDown', 'Home', 'End', 'PageUp', 'PageDown'];\n\n      if (keysToPreventDefault.includes(event.key)) {\n        event.preventDefault();\n      }\n\n      dispatch({\n        type: ActionTypes.keyDown,\n        event: event,\n        props: propsWithDefaults\n      });\n    };\n  };\n\n  var createHandleBlur = function createHandleBlur(other) {\n    return function (event) {\n      var _other$onBlur, _listboxRef$current;\n\n      (_other$onBlur = other.onBlur) == null ? void 0 : _other$onBlur.call(other, event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if ((_listboxRef$current = listboxRef.current) != null && _listboxRef$current.contains(document.activeElement)) {\n        // focus is within the listbox\n        return;\n      }\n\n      dispatch({\n        type: ActionTypes.blur,\n        event: event,\n        props: propsWithDefaults\n      });\n    };\n  };\n\n  var getRootProps = function getRootProps() {\n    var other = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return _extends({}, other, {\n      'aria-activedescendant': highlightedIndex >= 0 ? optionIdGenerator(options[highlightedIndex], highlightedIndex) : undefined,\n      id: id,\n      onBlur: createHandleBlur(other),\n      onKeyDown: createHandleKeyDown(other),\n      role: 'listbox',\n      tabIndex: 0,\n      ref: handleRef\n    });\n  };\n\n  var getOptionState = function getOptionState(option) {\n    var selected;\n    var index = options.findIndex(function (opt) {\n      return optionComparer(opt, option);\n    });\n\n    if (multiple) {\n      var _ref;\n\n      selected = ((_ref = selectedValue) != null ? _ref : []).some(function (value) {\n        return value != null && optionComparer(option, value);\n      });\n    } else {\n      selected = optionComparer(option, selectedValue);\n    }\n\n    var disabled = isOptionDisabled(option, index);\n    return {\n      selected: selected,\n      disabled: disabled,\n      highlighted: highlightedIndex === index\n    };\n  };\n\n  var getOptionProps = function getOptionProps(option) {\n    var other = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    var _getOptionState = getOptionState(option),\n        selected = _getOptionState.selected,\n        disabled = _getOptionState.disabled;\n\n    var index = options.findIndex(function (opt) {\n      return optionComparer(opt, option);\n    });\n    return {\n      'aria-disabled': disabled || undefined,\n      'aria-selected': selected,\n      id: optionIdGenerator(option, index),\n      onClick: createHandleOptionClick(option, other),\n      role: 'option'\n    };\n  };\n\n  return {\n    getRootProps: getRootProps,\n    getOptionProps: getOptionProps,\n    getOptionState: getOptionState,\n    selectedOption: selectedValue,\n    highlightedOption: (_options$highlightedI = options[highlightedIndex]) != null ? _options$highlightedI : null\n  };\n}","map":null,"metadata":{},"sourceType":"module"}