{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar tryNodeRequire = require('../internals/try-node-require');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar fails = require('../internals/fails');\n\nvar create = require('../internals/object-create');\n\nvar createPropertyDescriptor = require('../internals/create-property-descriptor');\n\nvar defineProperty = require('../internals/object-define-property').f;\n\nvar defineProperties = require('../internals/object-define-properties').f;\n\nvar redefine = require('../internals/redefine');\n\nvar hasOwn = require('../internals/has-own-property');\n\nvar anInstance = require('../internals/an-instance');\n\nvar anObject = require('../internals/an-object');\n\nvar errorToString = require('../internals/error-to-string');\n\nvar normalizeStringArgument = require('../internals/normalize-string-argument');\n\nvar DOMExceptionConstants = require('../internals/dom-exception-constants');\n\nvar clearErrorStack = require('../internals/clear-error-stack');\n\nvar InternalStateModule = require('../internals/internal-state');\n\nvar DESCRIPTORS = require('../internals/descriptors');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar DOM_EXCEPTION = 'DOMException';\nvar DATA_CLONE_ERR = 'DATA_CLONE_ERR';\nvar Error = getBuiltIn('Error'); // NodeJS < 17.0 does not expose `DOMException` to global\n\nvar NativeDOMException = getBuiltIn(DOM_EXCEPTION) || function () {\n  try {\n    // NodeJS < 15.0 does not expose `MessageChannel` to global\n    var MessageChannel = getBuiltIn('MessageChannel') || tryNodeRequire('worker_threads').MessageChannel; // eslint-disable-next-line es/no-weak-map, unicorn/require-post-message-target-origin -- safe\n\n    new MessageChannel().port1.postMessage(new WeakMap());\n  } catch (error) {\n    if (error.name == DATA_CLONE_ERR && error.code == 25) return error.constructor;\n  }\n}();\n\nvar NativeDOMExceptionPrototype = NativeDOMException && NativeDOMException.prototype;\nvar ErrorPrototype = Error.prototype;\nvar setInternalState = InternalStateModule.set;\nvar getInternalState = InternalStateModule.getterFor(DOM_EXCEPTION);\nvar HAS_STACK = ('stack' in Error(DOM_EXCEPTION));\n\nvar codeFor = function codeFor(name) {\n  return hasOwn(DOMExceptionConstants, name) && DOMExceptionConstants[name].m ? DOMExceptionConstants[name].c : 0;\n};\n\nvar $DOMException = function DOMException() {\n  anInstance(this, DOMExceptionPrototype);\n  var argumentsLength = arguments.length;\n  var message = normalizeStringArgument(argumentsLength < 1 ? undefined : arguments[0]);\n  var name = normalizeStringArgument(argumentsLength < 2 ? undefined : arguments[1], 'Error');\n  var code = codeFor(name);\n  setInternalState(this, {\n    type: DOM_EXCEPTION,\n    name: name,\n    message: message,\n    code: code\n  });\n\n  if (!DESCRIPTORS) {\n    this.name = name;\n    this.message = message;\n    this.code = code;\n  }\n\n  if (HAS_STACK) {\n    var error = Error(message);\n    error.name = DOM_EXCEPTION;\n    defineProperty(this, 'stack', createPropertyDescriptor(1, clearErrorStack(error.stack, 1)));\n  }\n};\n\nvar DOMExceptionPrototype = $DOMException.prototype = create(ErrorPrototype);\n\nvar createGetterDescriptor = function createGetterDescriptor(get) {\n  return {\n    enumerable: true,\n    configurable: true,\n    get: get\n  };\n};\n\nvar getterFor = function getterFor(key) {\n  return createGetterDescriptor(function () {\n    return getInternalState(this)[key];\n  });\n};\n\nif (DESCRIPTORS) defineProperties(DOMExceptionPrototype, {\n  name: getterFor('name'),\n  message: getterFor('message'),\n  code: getterFor('code')\n});\ndefineProperty(DOMExceptionPrototype, 'constructor', createPropertyDescriptor(1, $DOMException)); // FF36- DOMException is a function, but can't be constructed\n\nvar INCORRECT_CONSTRUCTOR = fails(function () {\n  return !(new NativeDOMException() instanceof Error);\n}); // Safari 10.1 / Chrome 32- / IE8- DOMException.prototype.toString bugs\n\nvar INCORRECT_TO_STRING = INCORRECT_CONSTRUCTOR || fails(function () {\n  return ErrorPrototype.toString !== errorToString || String(new NativeDOMException(1, 2)) !== '2: 1';\n}); // Deno 1.6.3- DOMException.prototype.code just missed\n\nvar INCORRECT_CODE = INCORRECT_CONSTRUCTOR || fails(function () {\n  return new NativeDOMException(1, 'DataCloneError').code !== 25;\n}); // Deno 1.6.3- DOMException constants just missed\n\nvar MISSED_CONSTANTS = INCORRECT_CONSTRUCTOR || NativeDOMException[DATA_CLONE_ERR] !== 25 || NativeDOMExceptionPrototype[DATA_CLONE_ERR] !== 25;\nvar FORCED_CONSTRUCTOR = IS_PURE ? INCORRECT_TO_STRING || INCORRECT_CODE || MISSED_CONSTANTS : INCORRECT_CONSTRUCTOR; // `DOMException` constructor\n// https://webidl.spec.whatwg.org/#idl-DOMException\n\n$({\n  global: true,\n  forced: FORCED_CONSTRUCTOR\n}, {\n  DOMException: FORCED_CONSTRUCTOR ? $DOMException : NativeDOMException\n});\nvar PolyfilledDOMException = getBuiltIn(DOM_EXCEPTION);\nvar PolyfilledDOMExceptionPrototype = PolyfilledDOMException.prototype;\n\nif (INCORRECT_TO_STRING && (IS_PURE || NativeDOMException === PolyfilledDOMException)) {\n  redefine(PolyfilledDOMExceptionPrototype, 'toString', errorToString);\n}\n\nif (INCORRECT_CODE && DESCRIPTORS && NativeDOMException === PolyfilledDOMException) {\n  defineProperty(PolyfilledDOMExceptionPrototype, 'code', createGetterDescriptor(function () {\n    return codeFor(anObject(this).name);\n  }));\n}\n\nfor (var key in DOMExceptionConstants) {\n  if (hasOwn(DOMExceptionConstants, key)) {\n    var constant = DOMExceptionConstants[key];\n    var constantName = constant.s;\n    var descriptor = createPropertyDescriptor(6, constant.c);\n\n    if (!hasOwn(PolyfilledDOMException, constantName)) {\n      defineProperty(PolyfilledDOMException, constantName, descriptor);\n    }\n\n    if (!hasOwn(PolyfilledDOMExceptionPrototype, constantName)) {\n      defineProperty(PolyfilledDOMExceptionPrototype, constantName, descriptor);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}