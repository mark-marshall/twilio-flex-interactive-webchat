{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx\";\n\n// Package Imports\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport DateAdapter from '@mui/lab/AdapterMoment';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport { Button, Select, FormControl, MenuItem, TextField } from '@mui/material';\nimport { DatePicker } from '@mui/lab';\nimport moment from 'moment'; // Component Imports\n\nimport Buttons from './Buttons';\nimport Dropdown from './Dropdown'; // Consts\n\nvar defaultCurInteractives = {\n  type: '',\n  options: []\n}; // type = buttons OR dropdown OR calendar\n// options is used for dropdown and buttons and specific props\n\nvar Interactives = function Interactives(_ref) {\n  var manager = _ref.manager,\n      messageList = _ref.messageList,\n      channelSid = _ref.channelSid;\n  // Refs\n  var interactivesContainer = useRef(null); // State\n\n  var _useState = useState(defaultCurInteractives),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1];\n\n  var _useState3 = useState(moment()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      curDateValue = _useState4[0],\n      setDateValue = _useState4[1]; // UI\n\n\n  useEffect(function () {\n    if (messageList && messageList.length > 0 && !messageList[messageList.length - 1].isFromMe && messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions) {\n      var lastMessageAttributes = messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n  useEffect(function () {\n    if (curInteractives !== defaultCurInteractives) {\n      interactivesContainer.current.scrollIntoView();\n    }\n  }, [curInteractives]); // Functions\n\n  var sendMessage = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {\n      var curChannel;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return manager.chatClient.getChannelBySid(channelSid);\n\n            case 2:\n              curChannel = _context.sent;\n              curChannel.sendMessage(message);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendMessage(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Render\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, curInteractives !== defaultCurInteractives ? /*#__PURE__*/React.createElement(\"div\", {\n    ref: interactivesContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, curInteractives.type === 'buttons' ? /*#__PURE__*/React.createElement(Buttons, {\n    curInteractives: curInteractives,\n    sendMessage: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }) : curInteractives.type === 'dropdown' ? /*#__PURE__*/React.createElement(Dropdown, {\n    curInteractives: curInteractives,\n    sendMessage: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }) : curInteractives.type === 'calendar' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"interactive-calendar-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LocalizationProvider, {\n    dateAdapter: DateAdapter,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(DatePicker, {\n    renderInput: function renderInput(props) {\n      return /*#__PURE__*/React.createElement(TextField, Object.assign({}, props, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 43\n        }\n      }));\n    },\n    value: curDateValue,\n    defaultValue: moment(),\n    onChange: function onChange(value) {\n      return setDateValue(moment(value));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      return sendMessage(curDateValue.format('MM/DD/YYYY'));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"Select Date\")) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}; // Redux\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx"],"names":["React","useState","useEffect","useRef","connect","DateAdapter","LocalizationProvider","Button","Select","FormControl","MenuItem","TextField","DatePicker","moment","Buttons","Dropdown","defaultCurInteractives","type","options","Interactives","manager","messageList","channelSid","interactivesContainer","curInteractives","setCurInteractives","curDateValue","setDateValue","length","isFromMe","source","state","attributes","interactiveWebchatOptions","lastMessageAttributes","current","scrollIntoView","sendMessage","message","chatClient","getChannelBySid","curChannel","props","value","format","mapStateToProps","flex","chat","channels","session","messages"],"mappings":"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","sourcesContent":["// Package Imports\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport DateAdapter from '@mui/lab/AdapterMoment';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport {\n  Button,\n  Select,\n  FormControl,\n  MenuItem,\n  TextField,\n} from '@mui/material';\nimport { DatePicker } from '@mui/lab';\nimport moment from 'moment';\n\n// Component Imports\nimport Buttons from './Buttons';\nimport Dropdown from './Dropdown';\n\n// Consts\nconst defaultCurInteractives = { type: '', options: [] };\n// type = buttons OR dropdown OR calendar\n// options is used for dropdown and buttons and specific props\n\nconst Interactives = ({ manager, messageList, channelSid }) => {\n  // Refs\n  const interactivesContainer = useRef(null);\n\n  // State\n  const [curInteractives, setCurInteractives] = useState(\n    defaultCurInteractives\n  );\n\n  const [curDateValue, setDateValue] = useState(moment());\n\n  // UI\n  useEffect(() => {\n    if (\n      messageList &&\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe &&\n      messageList[messageList.length - 1].source.state.attributes\n        .interactiveWebchatOptions\n    ) {\n      const lastMessageAttributes =\n        messageList[messageList.length - 1].source.state.attributes\n          .interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n\n  useEffect(() => {\n    if (curInteractives !== defaultCurInteractives) {\n      interactivesContainer.current.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  // Functions\n  const sendMessage = async (message) => {\n    const curChannel = await manager.chatClient.getChannelBySid(channelSid);\n    curChannel.sendMessage(message);\n  };\n\n  // Render\n  return (\n    <>\n      {curInteractives !== defaultCurInteractives ? (\n        <div ref={interactivesContainer}>\n          {curInteractives.type === 'buttons' ? (\n            <Buttons\n              curInteractives={curInteractives}\n              sendMessage={sendMessage}\n            />\n          ) : curInteractives.type === 'dropdown' ? (\n            <Dropdown\n              curInteractives={curInteractives}\n              sendMessage={sendMessage}\n            />\n          ) : curInteractives.type === 'calendar' ? (\n            <div className=\"interactive-calendar-container\">\n              <LocalizationProvider dateAdapter={DateAdapter}>\n                <DatePicker\n                  renderInput={(props) => <TextField {...props} />}\n                  value={curDateValue}\n                  defaultValue={moment()}\n                  onChange={(value) => setDateValue(moment(value))}\n                />\n              </LocalizationProvider>\n              <Button\n                onClick={() => sendMessage(curDateValue.format('MM/DD/YYYY'))}\n              >\n                Select Date\n              </Button>\n            </div>\n          ) : (\n            <></>\n          )}\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\n// Redux\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}