{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nvar Interactives = function Interactives(_ref) {\n  var messageList = _ref.messageList,\n      state = _ref.state;\n\n  var _useState = useState({\n    type: '',\n    options: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1];\n\n  useEffect(function () {\n    if (messageList && messageList.length > 0 && !messageList[messageList.length - 1].isFromMe && messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions) {\n      var lastMessageAttributes = messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives([]);\n    }\n  }, [messageList]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, curInteractives.options.map(function (o, idx) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      key: idx,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, o.content);\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    state: state\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx"],"names":["React","useState","useEffect","connect","Interactives","messageList","state","type","options","curInteractives","setCurInteractives","length","isFromMe","source","attributes","interactiveWebchatOptions","lastMessageAttributes","map","o","idx","content","mapStateToProps","flex","chat","channels","session","channelSid","messages"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAA4B;AAAA,MAAzBC,WAAyB,QAAzBA,WAAyB;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBACDL,QAAQ,CAAC;AACrDM,IAAAA,IAAI,EAAE,EAD+C;AAErDC,IAAAA,OAAO,EAAE;AAF4C,GAAD,CADP;AAAA;AAAA,MACxCC,eADwC;AAAA,MACvBC,kBADuB;;AAM/CR,EAAAA,SAAS,CAAC,YAAM;AACd,QACEG,WAAW,IACXA,WAAW,CAACM,MAAZ,GAAqB,CADrB,IAEA,CAACN,WAAW,CAACA,WAAW,CAACM,MAAZ,GAAqB,CAAtB,CAAX,CAAoCC,QAFrC,IAGAP,WAAW,CAACA,WAAW,CAACM,MAAZ,GAAqB,CAAtB,CAAX,CAAoCE,MAApC,CAA2CP,KAA3C,CAAiDQ,UAAjD,CACGC,yBALL,EAME;AACA,UAAMC,qBAAqB,GACzBX,WAAW,CAACA,WAAW,CAACM,MAAZ,GAAqB,CAAtB,CAAX,CAAoCE,MAApC,CAA2CP,KAA3C,CAAiDQ,UAAjD,CACGC,yBAFL;AAGAL,MAAAA,kBAAkB,CAACM,qBAAD,CAAlB;AACD,KAXD,MAWO;AACLN,MAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACD;AACF,GAfQ,EAeN,CAACL,WAAD,CAfM,CAAT;AAiBA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGI,eAAe,CAACD,OAAhB,CAAwBS,GAAxB,CAA4B,UAACC,CAAD,EAAIC,GAAJ;AAAA,wBAC3B;AAAQ,MAAA,GAAG,EAAEA,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,CAAC,CAACE,OAArB,CAD2B;AAAA,GAA5B,CADH,CADF;AAOD,CA9BD;;AAgCA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACf,KAAD,EAAW;AACjC,SAAO;AACLD,IAAAA,WAAW,EACTC,KAAK,CAACgB,IAAN,CAAWC,IAAX,CAAgBC,QAAhB,CAAyBlB,KAAK,CAACgB,IAAN,CAAWG,OAAX,CAAmBC,UAA5C,EAAwDC,QAFrD;AAGLrB,IAAAA,KAAK,EAAEA;AAHF,GAAP;AAKD,CAND;;AAQA,eAAeH,OAAO,CAACkB,eAAD,CAAP,CAAyBjB,YAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nconst Interactives = ({ messageList, state }) => {\n  const [curInteractives, setCurInteractives] = useState({\n    type: '',\n    options: [],\n  });\n\n  useEffect(() => {\n    if (\n      messageList &&\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe &&\n      messageList[messageList.length - 1].source.state.attributes\n        .interactiveWebchatOptions\n    ) {\n      const lastMessageAttributes =\n        messageList[messageList.length - 1].source.state.attributes\n          .interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives([]);\n    }\n  }, [messageList]);\n\n  return (\n    <div>\n      {curInteractives.options.map((o, idx) => (\n        <button key={idx}>{o.content}</button>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    state: state,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}