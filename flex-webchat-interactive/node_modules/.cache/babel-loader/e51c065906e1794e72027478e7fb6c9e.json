{"ast":null,"code":"\"use strict\";\n\nvar _assertThisInitialized = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get2 = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SyncListImpl = exports.SyncList = void 0;\n\nvar sanitize_1 = require(\"./utils/sanitize\");\n\nvar uri_1 = require(\"./utils/uri\");\n\nvar syncerror_1 = require(\"./utils/syncerror\");\n\nvar logger_1 = require(\"./utils/logger\");\n\nvar entity_1 = require(\"./entity\");\n\nvar listitem_1 = require(\"./listitem\");\n\nvar paginator_1 = require(\"./paginator\");\n\nvar cache_1 = require(\"./cache\");\n\nvar mergingqueue_1 = require(\"./mergingqueue\");\n\nvar closeable_1 = require(\"./closeable\");\n\nvar SyncListImpl = /*#__PURE__*/function (_entity_1$SyncEntity) {\n  _inherits(SyncListImpl, _entity_1$SyncEntity);\n\n  var _super = _createSuper(SyncListImpl);\n\n  /**\n   * @private\n   */\n  function SyncListImpl(services, descriptor, removalHandler) {\n    var _this;\n\n    _classCallCheck(this, SyncListImpl);\n\n    _this = _super.call(this, services, removalHandler);\n\n    var updateRequestReducer = function updateRequestReducer(acc, input) {\n      return typeof input.ttl === 'number' ? {\n        ttl: input.ttl\n      } : acc;\n    };\n\n    _this.updateMergingQueue = new mergingqueue_1.NamespacedMergingQueue(updateRequestReducer);\n    _this.cache = new cache_1.Cache();\n    _this.descriptor = descriptor;\n    _this.descriptor.date_updated = new Date(_this.descriptor.date_updated);\n    return _this;\n  } // private props\n\n\n  _createClass(SyncListImpl, [{\n    key: \"uri\",\n    get: function get() {\n      return this.descriptor.url;\n    }\n  }, {\n    key: \"revision\",\n    get: function get() {\n      return this.descriptor.revision;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return this.descriptor.last_event_id;\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      return this.descriptor.links;\n    }\n  }, {\n    key: \"dateExpires\",\n    get: function get() {\n      return this.descriptor.date_expires;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return 'list';\n    } // below properties are specific to Insights only\n\n  }, {\n    key: \"indexName\",\n    get: function get() {\n      return undefined;\n    }\n  }, {\n    key: \"queryString\",\n    get: function get() {\n      return undefined;\n    } // public props, documented along with class description\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.descriptor.sid;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.descriptor.unique_name || null;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.descriptor.date_updated;\n    }\n  }, {\n    key: \"_addOrUpdateItemOnServer\",\n    value: function () {\n      var _addOrUpdateItemOnServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, data, ifMatch, ttl) {\n        var requestBody, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                requestBody = {\n                  data: data\n                };\n\n                if (ttl !== undefined) {\n                  requestBody.ttl = ttl;\n                }\n\n                _context.next = 4;\n                return this.services.network.post(url, requestBody, ifMatch);\n\n              case 4:\n                response = _context.sent;\n                response.body.data = data;\n                response.body.date_updated = new Date(response.body.date_updated);\n                return _context.abrupt(\"return\", response.body);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _addOrUpdateItemOnServer(_x, _x2, _x3, _x4) {\n        return _addOrUpdateItemOnServer2.apply(this, arguments);\n      }\n\n      return _addOrUpdateItemOnServer;\n    }()\n  }, {\n    key: \"push\",\n    value: function () {\n      var _push = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(value, itemMetadata) {\n        var ttl, item, index;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                ttl = (itemMetadata || {}).ttl;\n                sanitize_1.validateOptionalTtl(ttl);\n                _context2.next = 4;\n                return this._addOrUpdateItemOnServer(this.links.items, value, undefined, ttl);\n\n              case 4:\n                item = _context2.sent;\n                index = Number(item.index);\n\n                this._handleItemMutated(index, item.url, item.last_event_id, item.revision, value, item.date_updated, item.date_expires, true, false);\n\n                return _context2.abrupt(\"return\", this.cache.get(index));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function push(_x5, _x6) {\n        return _push.apply(this, arguments);\n      }\n\n      return push;\n    }()\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(index, value, itemMetadataUpdates) {\n        var _this2 = this;\n\n        var input;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                input = itemMetadataUpdates || {};\n                sanitize_1.validateOptionalTtl(input.ttl);\n                return _context3.abrupt(\"return\", this.updateMergingQueue.squashAndAdd(index, input, function (input) {\n                  return _this2._updateItemUnconditionally(index, value, input.ttl);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function set(_x7, _x8, _x9) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"_updateItemUnconditionally\",\n    value: function () {\n      var _updateItemUnconditionally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(index, data, ttl) {\n        var existingItem, itemDescriptor;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.get(index);\n\n              case 2:\n                existingItem = _context4.sent;\n                _context4.next = 5;\n                return this._addOrUpdateItemOnServer(existingItem.uri, data, undefined, ttl);\n\n              case 5:\n                itemDescriptor = _context4.sent;\n\n                this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision, itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n\n                return _context4.abrupt(\"return\", this.cache.get(index));\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _updateItemUnconditionally(_x10, _x11, _x12) {\n        return _updateItemUnconditionally2.apply(this, arguments);\n      }\n\n      return _updateItemUnconditionally;\n    }()\n  }, {\n    key: \"_updateItemWithIfMatch\",\n    value: function () {\n      var _updateItemWithIfMatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(index, mutatorFunction, ttl) {\n        var existingItem, data, ifMatch, itemDescriptor;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.get(index);\n\n              case 2:\n                existingItem = _context5.sent;\n                data = mutatorFunction(sanitize_1.deepClone(existingItem.value));\n\n                if (!data) {\n                  _context5.next = 25;\n                  break;\n                }\n\n                ifMatch = existingItem.revision;\n                _context5.prev = 6;\n                _context5.next = 9;\n                return this._addOrUpdateItemOnServer(existingItem.uri, data, ifMatch, ttl);\n\n              case 9:\n                itemDescriptor = _context5.sent;\n\n                this._handleItemMutated(index, itemDescriptor.url, itemDescriptor.last_event_id, itemDescriptor.revision, itemDescriptor.data, itemDescriptor.date_updated, itemDescriptor.date_expires, false, false);\n\n                return _context5.abrupt(\"return\", this.cache.get(index));\n\n              case 14:\n                _context5.prev = 14;\n                _context5.t0 = _context5[\"catch\"](6);\n\n                if (!(_context5.t0.status === 412)) {\n                  _context5.next = 22;\n                  break;\n                }\n\n                _context5.next = 19;\n                return this._getItemFromServer(index);\n\n              case 19:\n                return _context5.abrupt(\"return\", this._updateItemWithIfMatch(index, mutatorFunction, ttl));\n\n              case 22:\n                throw _context5.t0;\n\n              case 23:\n                _context5.next = 26;\n                break;\n\n              case 25:\n                return _context5.abrupt(\"return\", existingItem);\n\n              case 26:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[6, 14]]);\n      }));\n\n      function _updateItemWithIfMatch(_x13, _x14, _x15) {\n        return _updateItemWithIfMatch2.apply(this, arguments);\n      }\n\n      return _updateItemWithIfMatch;\n    }()\n  }, {\n    key: \"mutate\",\n    value: function () {\n      var _mutate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(index, mutator, itemMetadataUpdates) {\n        var _this3 = this;\n\n        var input;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                input = itemMetadataUpdates || {};\n                sanitize_1.validateOptionalTtl(input.ttl);\n                return _context6.abrupt(\"return\", this.updateMergingQueue.add(index, input, function (input) {\n                  return _this3._updateItemWithIfMatch(index, mutator, input.ttl);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function mutate(_x16, _x17, _x18) {\n        return _mutate.apply(this, arguments);\n      }\n\n      return mutate;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(index, obj, itemMetadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.mutate(index, function (remote) {\n                  return Object.assign(remote, obj);\n                }, itemMetadataUpdates));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function update(_x19, _x20, _x21) {\n        return _update2.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(index) {\n        var item, response;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.get(index);\n\n              case 2:\n                item = _context8.sent;\n                _context8.next = 5;\n                return this.services.network.delete(item.uri);\n\n              case 5:\n                response = _context8.sent;\n\n                this._handleItemRemoved(index, response.body.last_event_id, undefined, new Date(response.body.date_updated), false);\n\n              case 7:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function remove(_x22) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(index) {\n        var cachedItem;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                cachedItem = this.cache.get(index);\n\n                if (!cachedItem) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", cachedItem);\n\n              case 5:\n                return _context9.abrupt(\"return\", this._getItemFromServer(index));\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function get(_x23) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"_getItemFromServer\",\n    value: function () {\n      var _getItemFromServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(index) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.queryItems({\n                  index: index\n                });\n\n              case 2:\n                result = _context10.sent;\n\n                if (!(result.items.length < 1)) {\n                  _context10.next = 7;\n                  break;\n                }\n\n                throw new syncerror_1.SyncError(\"No item with index \".concat(index, \" found\"), 404, 54151);\n\n              case 7:\n                return _context10.abrupt(\"return\", result.items[0]);\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _getItemFromServer(_x24) {\n        return _getItemFromServer2.apply(this, arguments);\n      }\n\n      return _getItemFromServer;\n    }()\n    /**\n     * Query items from the List\n     * @private\n     */\n\n  }, {\n    key: \"queryItems\",\n    value: function () {\n      var _queryItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(arg) {\n        var _this4 = this;\n\n        var url, response, items, meta;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                arg = arg || {};\n                url = new uri_1.UriBuilder(this.links.items).queryParam('From', arg.from).queryParam('PageSize', arg.limit).queryParam('Index', arg.index).queryParam('PageToken', arg.pageToken).queryParam('Order', arg.order).build();\n                _context11.next = 4;\n                return this.services.network.get(url);\n\n              case 4:\n                response = _context11.sent;\n                items = response.body.items.map(function (el) {\n                  el.date_updated = new Date(el.date_updated);\n\n                  var itemInCache = _this4.cache.get(el.index);\n\n                  if (itemInCache) {\n                    _this4._handleItemMutated(el.index, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);\n                  } else {\n                    _this4.cache.store(Number(el.index), new listitem_1.ListItem({\n                      index: Number(el.index),\n                      uri: el.url,\n                      revision: el.revision,\n                      lastEventId: el.last_event_id,\n                      dateUpdated: el.date_updated,\n                      dateExpires: el.date_expires,\n                      value: el.data\n                    }), el.last_event_id);\n                  }\n\n                  return _this4.cache.get(el.index);\n                });\n                meta = response.body.meta;\n                return _context11.abrupt(\"return\", new paginator_1.Paginator(items, function (pageToken) {\n                  return _this4.queryItems({\n                    pageToken: pageToken\n                  });\n                }, meta.previous_token, meta.next_token));\n\n              case 8:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function queryItems(_x25) {\n        return _queryItems.apply(this, arguments);\n      }\n\n      return queryItems;\n    }()\n  }, {\n    key: \"getItems\",\n    value: function () {\n      var _getItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(args) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                args = args || {};\n                sanitize_1.validatePageSize(args.pageSize);\n                args.limit = args.pageSize || args.limit || 50;\n                args.order = args.order || 'asc';\n                return _context12.abrupt(\"return\", this.queryItems(args));\n\n              case 5:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getItems(_x26) {\n        return _getItems.apply(this, arguments);\n      }\n\n      return getItems;\n    }()\n    /**\n     * @return {Promise<Object>} Context of List\n     * @private\n     */\n\n  }, {\n    key: \"getContext\",\n    value: function () {\n      var _getContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (this.context) {\n                  _context13.next = 5;\n                  break;\n                }\n\n                _context13.next = 3;\n                return this.services.network.get(this.links.context);\n\n              case 3:\n                response = _context13.sent;\n\n                // store fetched context if we have't received any newer update\n                this._updateContextIfRequired(response.body.data, response.body.last_event_id);\n\n              case 5:\n                return _context13.abrupt(\"return\", this.context);\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getContext() {\n        return _getContext.apply(this, arguments);\n      }\n\n      return getContext;\n    }()\n  }, {\n    key: \"setTtl\",\n    value: function () {\n      var _setTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(ttl) {\n        var requestBody, response;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                sanitize_1.validateMandatoryTtl(ttl);\n                _context14.prev = 1;\n                requestBody = {\n                  ttl: ttl\n                };\n                _context14.next = 5;\n                return this.services.network.post(this.uri, requestBody);\n\n              case 5:\n                response = _context14.sent;\n                this.descriptor.date_expires = response.body.date_expires;\n                _context14.next = 13;\n                break;\n\n              case 9:\n                _context14.prev = 9;\n                _context14.t0 = _context14[\"catch\"](1);\n\n                if (_context14.t0.status === 404) {\n                  this.onRemoved(false);\n                }\n\n                throw _context14.t0;\n\n              case 13:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[1, 9]]);\n      }));\n\n      function setTtl(_x27) {\n        return _setTtl.apply(this, arguments);\n      }\n\n      return setTtl;\n    }()\n  }, {\n    key: \"setItemTtl\",\n    value: function () {\n      var _setItemTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(index, ttl) {\n        var existingItem, requestBody, response;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                sanitize_1.validateMandatoryTtl(ttl);\n                _context15.next = 3;\n                return this.get(index);\n\n              case 3:\n                existingItem = _context15.sent;\n                requestBody = {\n                  ttl: ttl\n                };\n                _context15.next = 7;\n                return this.services.network.post(existingItem.uri, requestBody);\n\n              case 7:\n                response = _context15.sent;\n                existingItem.updateDateExpires(response.body.date_expires);\n\n              case 9:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function setItemTtl(_x28, _x29) {\n        return _setItemTtl.apply(this, arguments);\n      }\n\n      return setItemTtl;\n    }()\n  }, {\n    key: \"removeList\",\n    value: function () {\n      var _removeList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.services.network.delete(this.uri);\n\n              case 2:\n                this.onRemoved(true);\n\n              case 3:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function removeList() {\n        return _removeList.apply(this, arguments);\n      }\n\n      return removeList;\n    }()\n  }, {\n    key: \"onRemoved\",\n    value: function onRemoved(locally) {\n      this._unsubscribe();\n\n      this.removalHandler(this.type, this.sid, this.uniqueName);\n      this.broadcastEventToListeners('removed', {\n        isLocal: locally\n      });\n    }\n  }, {\n    key: \"shouldIgnoreEvent\",\n    value: function shouldIgnoreEvent(key, eventId) {\n      return this.cache.isKnown(key, eventId);\n    }\n    /**\n     * Handle update, which came from the server.\n     * @private\n     */\n\n  }, {\n    key: \"_update\",\n    value: function _update(update, isStrictlyOrdered) {\n      var itemIndex = Number(update.item_index);\n      update.date_created = new Date(update.date_created);\n\n      switch (update.type) {\n        case 'list_item_added':\n        case 'list_item_updated':\n          {\n            this._handleItemMutated(itemIndex, update.item_url, update.id, update.item_revision, update.item_data, update.date_created, undefined, // orchestration does not include date_expires\n            update.type === 'list_item_added', true);\n          }\n          break;\n\n        case 'list_item_removed':\n          {\n            this._handleItemRemoved(itemIndex, update.id, update.item_data, update.date_created, true);\n          }\n          break;\n\n        case 'list_context_updated':\n          {\n            this._handleContextUpdate(update.context_data, update.id, update.date_created);\n          }\n          break;\n\n        case 'list_removed':\n          {\n            this.onRemoved(false);\n          }\n          break;\n      }\n\n      if (isStrictlyOrdered) {\n        this._advanceLastEventId(update.id, update.list_revision);\n      }\n    }\n  }, {\n    key: \"_advanceLastEventId\",\n    value: function _advanceLastEventId(eventId, revision) {\n      if (this.lastEventId < eventId) {\n        this.descriptor.last_event_id = eventId;\n\n        if (revision) {\n          this.descriptor.revision = revision;\n        }\n      }\n    }\n  }, {\n    key: \"_updateRootDateUpdated\",\n    value: function _updateRootDateUpdated(dateUpdated) {\n      if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {\n        this.descriptor.date_updated = dateUpdated;\n        this.services.storage.update(this.type, this.sid, this.uniqueName, {\n          date_updated: dateUpdated\n        });\n      }\n    }\n  }, {\n    key: \"_handleItemMutated\",\n    value: function _handleItemMutated(index, uri, lastEventId, revision, value, dateUpdated, dateExpires, added, remote) {\n      if (this.shouldIgnoreEvent(index, lastEventId)) {\n        logger_1.default.trace('Item ', index, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);\n        return;\n      } else {\n        this._updateRootDateUpdated(dateUpdated);\n\n        var item = this.cache.get(index);\n\n        if (!item) {\n          var _item = new listitem_1.ListItem({\n            index: index,\n            uri: uri,\n            lastEventId: lastEventId,\n            revision: revision,\n            value: value,\n            dateUpdated: dateUpdated,\n            dateExpires: dateExpires\n          });\n\n          this.cache.store(index, _item, lastEventId);\n          this.emitItemMutationEvent(_item, remote, added);\n        } else {\n          item.update(lastEventId, revision, value, dateUpdated);\n          this.cache.store(index, item, lastEventId);\n\n          if (dateExpires !== undefined) {\n            item.updateDateExpires(dateExpires);\n          }\n\n          this.emitItemMutationEvent(item, remote, false);\n        }\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"emitItemMutationEvent\",\n    value: function emitItemMutationEvent(item, remote, added) {\n      var eventName = added ? 'itemAdded' : 'itemUpdated';\n      this.broadcastEventToListeners(eventName, {\n        item: item,\n        isLocal: !remote\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_handleItemRemoved\",\n    value: function _handleItemRemoved(index, eventId, oldData, dateUpdated, remote) {\n      this._updateRootDateUpdated(dateUpdated);\n\n      this.cache.delete(index, eventId);\n      this.broadcastEventToListeners('itemRemoved', {\n        index: index,\n        isLocal: !remote,\n        value: oldData\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_handleContextUpdate\",\n    value: function _handleContextUpdate(data, eventId, dateUpdated) {\n      this._updateRootDateUpdated(dateUpdated);\n\n      if (this._updateContextIfRequired(data, eventId)) {\n        this.broadcastEventToListeners('contextUpdated', {\n          context: data,\n          isLocal: false\n        });\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_updateContextIfRequired\",\n    value: function _updateContextIfRequired(data, eventId) {\n      if (!this.contextEventId || eventId > this.contextEventId) {\n        this.context = data;\n        this.contextEventId = eventId;\n        return true;\n      } else {\n        logger_1.default.trace('Context update skipped, current:', this.lastEventId, ', remote:', eventId);\n        return false;\n      }\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'list';\n    }\n  }]);\n\n  return SyncListImpl;\n}(entity_1.SyncEntity);\n\nexports.SyncListImpl = SyncListImpl;\n/**\n * @class\n * @alias List\n * @classdesc Represents a Sync List, which stores an ordered list of values.\n * Use the {@link Client#list} method to obtain a reference to a Sync List.\n * @property {String} sid - List unique id, immutable identifier assigned by the system.\n * @property {String} [uniqueName=null] - List unique name, immutable identifier that can be assigned to list during creation.\n * @property {Date} dateUpdated Date when the List was last updated.\n *\n * @fires List#removed\n * @fires List#itemAdded\n * @fires List#itemRemoved\n * @fires List#itemUpdated\n */\n\nvar SyncList = /*#__PURE__*/function (_closeable_1$default) {\n  _inherits(SyncList, _closeable_1$default);\n\n  var _super2 = _createSuper(SyncList);\n\n  function SyncList(syncListImpl) {\n    var _this5;\n\n    _classCallCheck(this, SyncList);\n\n    _this5 = _super2.call(this);\n    _this5.syncListImpl = syncListImpl;\n\n    _this5.syncListImpl.attach(_assertThisInitialized(_this5));\n\n    return _this5;\n  } // private props\n\n\n  _createClass(SyncList, [{\n    key: \"uri\",\n    get: function get() {\n      return this.syncListImpl.uri;\n    }\n  }, {\n    key: \"revision\",\n    get: function get() {\n      return this.syncListImpl.revision;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return this.syncListImpl.lastEventId;\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      return this.syncListImpl.links;\n    }\n  }, {\n    key: \"dateExpires\",\n    get: function get() {\n      return this.syncListImpl.dateExpires;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return SyncListImpl.type;\n    } // public props, documented along with class description\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.syncListImpl.sid;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.syncListImpl.uniqueName;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.syncListImpl.dateUpdated;\n    }\n    /**\n     * Add a new item to the list.\n     * @param {Object} value Value to be added.\n     * @param {List#ItemMetadata} [itemMetadata] Item metadata.\n     * @returns {Promise<ListItem>} A newly added item.\n     * @public\n     * @example\n     * list.push({ name: 'John Smith' }, { ttl: 86400 })\n     *   .then(function(item) {\n     *     console.log('List Item push() successful, item index:' + item.index + ', value: ', item.value)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item push() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"push\",\n    value: function () {\n      var _push2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(value, itemMetadata) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context17.abrupt(\"return\", this.syncListImpl.push(value, itemMetadata));\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function push(_x30, _x31) {\n        return _push2.apply(this, arguments);\n      }\n\n      return push;\n    }()\n    /**\n     * Assign new value to an existing item, given its index.\n     * @param {Number} index Index of the item to be updated.\n     * @param {Object} value New value to be assigned to an item.\n     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<ListItem>} A promise with updated item containing latest known value.\n     * The promise will be rejected if the item does not exist.\n     * @public\n     * @example\n     * list.set(42, { name: 'John Smith' }, { ttl: 86400 })\n     *   .then(function(item) {\n     *     console.log('List Item set() successful, item value:', item.value)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item set() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(index, value, itemMetadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context18.abrupt(\"return\", this.syncListImpl.set(index, value, itemMetadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function set(_x32, _x33, _x34) {\n        return _set2.apply(this, arguments);\n      }\n\n      return set;\n    }()\n    /**\n     * Modify an existing item by applying a mutation function to it.\n     * @param {Number} index Index of an item to be changed.\n     * @param {List~Mutator} mutator A function that outputs a new value based on the existing value.\n     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<ListItem>} Resolves with the most recent item state, the output of a successful\n     *    mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>). This promise\n     *    will be rejected if the indicated item does not already exist.\n     * @public\n     * @example\n     * var mutatorFunction = function(currentValue) {\n     *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n     *     return currentValue;\n     * };\n     * list.mutate(42, mutatorFunction, { ttl: 86400 })\n     *   .then(function(item) {\n     *     console.log('List Item mutate() successful, new value:', item.value)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item mutate() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"mutate\",\n    value: function () {\n      var _mutate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(index, mutator, itemMetadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context19.abrupt(\"return\", this.syncListImpl.mutate(index, mutator, itemMetadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function mutate(_x35, _x36, _x37) {\n        return _mutate2.apply(this, arguments);\n      }\n\n      return mutate;\n    }()\n    /**\n     * Modify an existing item by appending new fields (or overwriting existing ones) with the values from Object.\n     * This is equivalent to\n     * <pre>\n     * list.mutate(42, function(currentValue) {\n     *   return Object.assign(currentValue, obj));\n     * });\n     * </pre>\n     * @param {Number} index Index of an item to be changed.\n     * @param {Object} obj Set of fields to update.\n     * @param {List#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<ListItem>} A promise with a modified item containing latest known value.\n     * The promise will be rejected if an item was not found.\n     * @public\n     * @example\n     * // Say, the List Item (index: 42) value is { name: 'John Smith' }\n     * list.update(42, { age: 34 }, { ttl: 86400 })\n     *   .then(function(item) {\n     *     // Now the List Item value is { name: 'John Smith', age: 34 }\n     *     console.log('List Item update() successful, new value:', item.value);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item update() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(index, obj, itemMetadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context20.abrupt(\"return\", this.syncListImpl.update(index, obj, itemMetadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function update(_x38, _x39, _x40) {\n        return _update3.apply(this, arguments);\n      }\n\n      return update;\n    }()\n    /**\n     * Delete an item, given its index.\n     * @param {Number} index Index of an item to be removed.\n     * @returns {Promise<void>} A promise to remove an item.\n     * A promise will be rejected if an item was not found.\n     * @public\n     * @example\n     * list.remove(42)\n     *   .then(function() {\n     *     console.log('List Item remove() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item remove() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(index) {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context21.abrupt(\"return\", this.syncListImpl.remove(index));\n\n              case 2:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function remove(_x41) {\n        return _remove2.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Retrieve an item by List index.\n     * @param {Number} index Item index in a List.\n     * @returns {Promise<ListItem>} A promise with an item containing latest known value.\n     * A promise will be rejected if an item was not found.\n     * @public\n     * @example\n     * list.get(42)\n     *   .then(function(item) {\n     *     console.log('List Item get() successful, item value:', item.value)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List Item get() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(index) {\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context22.abrupt(\"return\", this.syncListImpl.get(index));\n\n              case 2:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function get(_x42) {\n        return _get3.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Retrieve a List context\n     * @returns {Promise<Object>} A promise with a List's context\n     * @ignore\n     */\n\n  }, {\n    key: \"getContext\",\n    value: function () {\n      var _getContext2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context23.abrupt(\"return\", this.syncListImpl.getContext());\n\n              case 2:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function getContext() {\n        return _getContext2.apply(this, arguments);\n      }\n\n      return getContext;\n    }()\n    /**\n     * Query a list of items from collection.\n     * @param {Object} [args] Arguments for query\n     * @param {Number} [args.from] Item index, which should be used as the offset.\n     * If undefined, starts from the beginning or end depending on args.order.\n     * @param {Number} [args.pageSize=50] Results page size.\n     * @param {'asc'|'desc'} [args.order='asc'] Numeric order of results.\n     * @returns {Promise<Paginator<ListItem>>}\n     * @public\n     * @example\n     * var pageHandler = function(paginator) {\n     *   paginator.items.forEach(function(item) {\n     *     console.log('Item ' + item.index + ': ', item.value);\n     *   });\n     *   return paginator.hasNextPage ? paginator.nextPage().then(pageHandler)\n     *                                : null;\n     * };\n     * list.getItems({ from: 0, order: 'asc' })\n     *   .then(pageHandler)\n     *   .catch(function(error) {\n     *     console.error('List getItems() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"getItems\",\n    value: function () {\n      var _getItems2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(args) {\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context24.abrupt(\"return\", this.syncListImpl.getItems(args));\n\n              case 2:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getItems(_x43) {\n        return _getItems2.apply(this, arguments);\n      }\n\n      return getItems;\n    }()\n    /**\n     * Update the time-to-live of the list.\n     * @param {Number} ttl Specifies the TTL in seconds after which the list is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * list.setTtl(3600)\n     *   .then(function() {\n     *     console.log('List setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List setTtl() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"setTtl\",\n    value: function () {\n      var _setTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(ttl) {\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context25.abrupt(\"return\", this.syncListImpl.setTtl(ttl));\n\n              case 2:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function setTtl(_x44) {\n        return _setTtl2.apply(this, arguments);\n      }\n\n      return setTtl;\n    }()\n    /**\n     * Update the time-to-live of a list item.\n     * @param {Number} index Item index.\n     * @param {Number} ttl Specifies the TTL in seconds after which the list item is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * list.setItemTtl(42, 86400)\n     *   .then(function() {\n     *     console.log('List setItemTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List setItemTtl() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"setItemTtl\",\n    value: function () {\n      var _setItemTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(index, ttl) {\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context26.abrupt(\"return\", this.syncListImpl.setItemTtl(index, ttl));\n\n              case 2:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function setItemTtl(_x45, _x46) {\n        return _setItemTtl2.apply(this, arguments);\n      }\n\n      return setItemTtl;\n    }()\n    /**\n     * Delete this list. It will be impossible to restore it.\n     * @return {Promise<void>} A promise that resolves when the list has been deleted.\n     * @public\n     * @example\n     * list.removeList()\n     *   .then(function() {\n     *     console.log('List removeList() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('List removeList() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"removeList\",\n    value: function () {\n      var _removeList2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context27.abrupt(\"return\", this.syncListImpl.removeList());\n\n              case 2:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function removeList() {\n        return _removeList2.apply(this, arguments);\n      }\n\n      return removeList;\n    }()\n    /**\n     * Conclude work with the list instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this list will continue operating and receiving events normally.\n     * @public\n     * @example\n     * list.close();\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      _get2(_getPrototypeOf(SyncList.prototype), \"close\", this).call(this);\n\n      this.syncListImpl.detach(this.listenerUuid);\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return SyncListImpl.type;\n    }\n  }]);\n\n  return SyncList;\n}(closeable_1.default);\n\nexports.SyncList = SyncList;\nexports.default = SyncList;\n/**\n * Contains List Item metadata.\n * @typedef {Object} List#ItemMetadata\n * @property {Number} [ttl] Specifies the time-to-live in seconds after which the list item is subject to automatic deletion.\n * The value 0 means infinity.\n */\n\n/**\n * Applies a transformation to the item value. May be called multiple times on the\n * same datum in case of collisions with remote code.\n * @callback List~Mutator\n * @param {Object} currentValue The current value of the item in the cloud.\n * @return {Object} The desired new value for the item or <code>null</code> to gracefully cancel the mutation.\n */\n\n/**\n * Fired when a new item appears in the list, whether its creator was local or remote.\n * @event List#itemAdded\n * @param {Object} args Arguments provided with the event.\n * @param {ListItem} args.item Added item.\n * @param {Boolean} args.isLocal Equals 'true' if item was added by local actor, 'false' otherwise.\n * @example\n * list.on('itemAdded', function(args) {\n *   console.log('List item ' + args.item.index + ' was added');\n *   console.log('args.item.value:', args.item.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a list item is updated (not added or removed, but changed), whether the updater was local or remote.\n * @event List#itemUpdated\n * @param {Object} args Arguments provided with the event.\n * @param {ListItem} args.item Updated item.\n * @param {Boolean} args.isLocal Equals 'true' if item was updated by local actor, 'false' otherwise.\n * @example\n * list.on('itemUpdated', function(args) {\n *   console.log('List item ' + args.item.index + ' was updated');\n *   console.log('args.item.value:', args.item.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a list item is removed, whether the remover was local or remote.\n * @event List#itemRemoved\n * @param {Object} args Arguments provided with the event.\n * @param {Number} args.index The index of the removed item.\n * @param {Boolean} args.isLocal Equals 'true' if item was removed by local actor, 'false' otherwise.\n * @param {Object} args.value In case item was removed by a remote actor, contains a snapshot of item data before removal.\n * @example\n * list.on('itemRemoved', function(args) {\n *   console.log('List item ' + args.index + ' was removed');\n *   console.log('args.value:', args.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a list is deleted entirely, by any actor local or remote.\n * @event List#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if list was removed by local actor, 'false' otherwise.\n * @example\n * list.on('removed', function(args) {\n *   console.log('List ' + list.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */","map":null,"metadata":{},"sourceType":"script"}