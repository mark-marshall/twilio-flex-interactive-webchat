{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Cache = void 0;\n\nvar tree_1 = require(\"./utils/tree\");\n\nvar Entry = /*#__PURE__*/function () {\n  function Entry(value, revision) {\n    _classCallCheck(this, Entry);\n\n    this.value = value;\n    this.revision = revision || 0;\n  }\n\n  _createClass(Entry, [{\n    key: \"isValid\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return Entry;\n}();\n\nvar Tombstone = /*#__PURE__*/function () {\n  function Tombstone(revision) {\n    _classCallCheck(this, Tombstone);\n\n    this.revision = revision;\n  }\n\n  _createClass(Tombstone, [{\n    key: \"isValid\",\n    get: function get() {\n      return false;\n    }\n  }]);\n\n  return Tombstone;\n}();\n\nvar Cache = /*#__PURE__*/function () {\n  function Cache() {\n    _classCallCheck(this, Cache);\n\n    this.items = new tree_1.TreeMap();\n  }\n\n  _createClass(Cache, [{\n    key: \"store\",\n    value: function store(key, value, revision) {\n      var entry = this.items.get(key);\n\n      if (entry && entry.revision > revision) {\n        if (entry.isValid) {\n          return entry.value;\n        }\n\n        return null;\n      }\n\n      this.items.set(key, new Entry(value, revision));\n      return value;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key, revision) {\n      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var curr = this.items.get(key);\n\n      if (!curr || curr.revision < revision || curr && force === true\n      /* forced delete when revision is unknown */\n      ) {\n        this.items.set(key, new Tombstone(revision));\n      }\n    }\n  }, {\n    key: \"isKnown\",\n    value: function isKnown(key, revision) {\n      var curr = this.items.get(key);\n      return curr && curr.revision >= revision;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var entry = this.items.get(key);\n\n      if (entry && entry.isValid) {\n        return entry.value;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"has\",\n    value: function has(key) {\n      var entry = this.items.get(key);\n      return entry && entry.isValid;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackfn) {\n      if (this.items) {\n        var _iterator = _createForOfIteratorHelper(this.items),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _step$value = _slicedToArray(_step.value, 2),\n                key = _step$value[0],\n                entry = _step$value[1];\n\n            if (entry.isValid) {\n              callbackfn(key, entry.value);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }]);\n\n  return Cache;\n}();\n\nexports.Cache = Cache;\nexports.default = Cache;","map":null,"metadata":{},"sourceType":"script"}