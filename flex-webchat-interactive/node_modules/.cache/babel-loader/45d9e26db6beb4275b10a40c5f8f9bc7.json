{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar toString = require('../internals/to-string');\n\nvar stringSlice = uncurryThis(''.slice);\nvar max = Math.max;\nvar min = Math.min; // eslint-disable-next-line unicorn/prefer-string-slice -- required for testing\n\nvar FORCED = !''.substr || 'ab'.substr(-1) !== 'b'; // `String.prototype.substr` method\n// https://tc39.es/ecma262/#sec-string.prototype.substr\n\n$({\n  target: 'String',\n  proto: true,\n  forced: FORCED\n}, {\n  substr: function substr(start, length) {\n    var that = toString(requireObjectCoercible(this));\n    var size = that.length;\n    var intStart = toIntegerOrInfinity(start);\n    var intLength, intEnd;\n    if (intStart === Infinity) intStart = 0;\n    if (intStart < 0) intStart = max(size + intStart, 0);\n    intLength = length === undefined ? size : toIntegerOrInfinity(length);\n    if (intLength <= 0 || intLength === Infinity) return '';\n    intEnd = min(intStart + intLength, size);\n    return intStart >= intEnd ? '' : stringSlice(that, intStart, intEnd);\n  }\n});","map":null,"metadata":{},"sourceType":"script"}