{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BindingToSyntax = void 0;\n\nvar ERROR_MSGS = require(\"../constants/error_msgs\");\n\nvar literal_types_1 = require(\"../constants/literal_types\");\n\nvar binding_in_when_on_syntax_1 = require(\"./binding_in_when_on_syntax\");\n\nvar binding_when_on_syntax_1 = require(\"./binding_when_on_syntax\");\n\nvar BindingToSyntax = function () {\n  function BindingToSyntax(binding) {\n    this._binding = binding;\n  }\n\n  BindingToSyntax.prototype.to = function (constructor) {\n    this._binding.type = literal_types_1.BindingTypeEnum.Instance;\n    this._binding.implementationType = constructor;\n    return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);\n  };\n\n  BindingToSyntax.prototype.toSelf = function () {\n    if (typeof this._binding.serviceIdentifier !== \"function\") {\n      throw new Error(\"\" + ERROR_MSGS.INVALID_TO_SELF_VALUE);\n    }\n\n    var self = this._binding.serviceIdentifier;\n    return this.to(self);\n  };\n\n  BindingToSyntax.prototype.toConstantValue = function (value) {\n    this._binding.type = literal_types_1.BindingTypeEnum.ConstantValue;\n    this._binding.cache = value;\n    this._binding.dynamicValue = null;\n    this._binding.implementationType = null;\n    this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;\n    return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n  };\n\n  BindingToSyntax.prototype.toDynamicValue = function (func) {\n    this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;\n    this._binding.cache = null;\n    this._binding.dynamicValue = func;\n    this._binding.implementationType = null;\n    return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);\n  };\n\n  BindingToSyntax.prototype.toConstructor = function (constructor) {\n    this._binding.type = literal_types_1.BindingTypeEnum.Constructor;\n    this._binding.implementationType = constructor;\n    this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;\n    return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n  };\n\n  BindingToSyntax.prototype.toFactory = function (factory) {\n    this._binding.type = literal_types_1.BindingTypeEnum.Factory;\n    this._binding.factory = factory;\n    this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;\n    return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n  };\n\n  BindingToSyntax.prototype.toFunction = function (func) {\n    if (typeof func !== \"function\") {\n      throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);\n    }\n\n    var bindingWhenOnSyntax = this.toConstantValue(func);\n    this._binding.type = literal_types_1.BindingTypeEnum.Function;\n    this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;\n    return bindingWhenOnSyntax;\n  };\n\n  BindingToSyntax.prototype.toAutoFactory = function (serviceIdentifier) {\n    this._binding.type = literal_types_1.BindingTypeEnum.Factory;\n\n    this._binding.factory = function (context) {\n      var autofactory = function autofactory() {\n        return context.container.get(serviceIdentifier);\n      };\n\n      return autofactory;\n    };\n\n    this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;\n    return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n  };\n\n  BindingToSyntax.prototype.toProvider = function (provider) {\n    this._binding.type = literal_types_1.BindingTypeEnum.Provider;\n    this._binding.provider = provider;\n    this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;\n    return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);\n  };\n\n  BindingToSyntax.prototype.toService = function (service) {\n    this.toDynamicValue(function (context) {\n      return context.container.get(service);\n    });\n  };\n\n  return BindingToSyntax;\n}();\n\nexports.BindingToSyntax = BindingToSyntax;","map":null,"metadata":{},"sourceType":"script"}