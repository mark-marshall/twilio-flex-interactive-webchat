{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _span;\n\nvar _excluded = [\"autoFocus\", \"onViewChange\", \"date\", \"disableFuture\", \"disablePast\", \"defaultCalendarMonth\", \"loading\", \"maxDate\", \"minDate\", \"onChange\", \"onMonthChange\", \"reduceAnimations\", \"renderLoading\", \"shouldDisableDate\", \"shouldDisableYear\", \"view\", \"views\", \"openTo\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { unstable_composeClasses as composeClasses, generateUtilityClass, generateUtilityClasses } from '@mui/base';\nimport MonthPicker from '../MonthPicker/MonthPicker';\nimport { useCalendarState } from './useCalendarState';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport FadeTransitionGroup from './PickersFadeTransitionGroup';\nimport PickersCalendar from './PickersCalendar';\nimport { useViews } from '../internal/pickers/hooks/useViews';\nimport PickersCalendarHeader from './PickersCalendarHeader';\nimport YearPicker from '../YearPicker/YearPicker';\nimport { findClosestEnabledDate } from '../internal/pickers/date-utils';\nimport PickerView from '../internal/pickers/Picker/PickerView';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function getCalendarPickerUtilityClass(slot) {\n  return generateUtilityClass('MuiCalendarPicker', slot);\n}\nexport var calendarPickerClasses = generateUtilityClasses('MuiCalendarPicker', ['root', 'viewTransitionContainer']);\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['root'],\n    viewTransitionContainer: ['viewTransitionContainer']\n  };\n  return composeClasses(slots, getCalendarPickerUtilityClass, classes);\n};\n\nvar CalendarPickerRoot = styled(PickerView, {\n  name: 'MuiCalendarPicker',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  display: 'flex',\n  flexDirection: 'column'\n});\nvar CalendarPickerViewTransitionContainer = styled(FadeTransitionGroup, {\n  name: 'MuiCalendarPicker',\n  slot: 'ViewTransitionContainer',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.viewTransitionContainer;\n  }\n})({\n  overflowY: 'auto'\n});\nexport var defaultReduceAnimations = typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent);\nvar CalendarPicker = /*#__PURE__*/React.forwardRef(function CalendarPicker(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiCalendarPicker'\n  });\n\n  var autoFocus = props.autoFocus,\n      onViewChange = props.onViewChange,\n      date = props.date,\n      _props$disableFuture = props.disableFuture,\n      disableFuture = _props$disableFuture === void 0 ? false : _props$disableFuture,\n      _props$disablePast = props.disablePast,\n      disablePast = _props$disablePast === void 0 ? false : _props$disablePast,\n      defaultCalendarMonth = props.defaultCalendarMonth,\n      _props$loading = props.loading,\n      loading = _props$loading === void 0 ? false : _props$loading,\n      maxDateProp = props.maxDate,\n      minDateProp = props.minDate,\n      onChange = props.onChange,\n      onMonthChange = props.onMonthChange,\n      _props$reduceAnimatio = props.reduceAnimations,\n      reduceAnimations = _props$reduceAnimatio === void 0 ? defaultReduceAnimations : _props$reduceAnimatio,\n      _props$renderLoading = props.renderLoading,\n      renderLoading = _props$renderLoading === void 0 ? function () {\n    return _span || (_span = /*#__PURE__*/_jsx(\"span\", {\n      children: \"...\"\n    }));\n  } : _props$renderLoading,\n      shouldDisableDate = props.shouldDisableDate,\n      shouldDisableYear = props.shouldDisableYear,\n      view = props.view,\n      _props$views = props.views,\n      views = _props$views === void 0 ? ['year', 'day'] : _props$views,\n      _props$openTo = props.openTo,\n      openTo = _props$openTo === void 0 ? 'day' : _props$openTo,\n      className = props.className,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var utils = useUtils();\n  var defaultDates = useDefaultDates();\n  var minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  var maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n\n  var _useViews = useViews({\n    view: view,\n    views: views,\n    openTo: openTo,\n    onChange: onChange,\n    onViewChange: onViewChange\n  }),\n      openView = _useViews.openView,\n      setOpenView = _useViews.setOpenView;\n\n  var _useCalendarState = useCalendarState({\n    date: date,\n    defaultCalendarMonth: defaultCalendarMonth,\n    reduceAnimations: reduceAnimations,\n    onMonthChange: onMonthChange,\n    minDate: minDate,\n    maxDate: maxDate,\n    shouldDisableDate: shouldDisableDate,\n    disablePast: disablePast,\n    disableFuture: disableFuture\n  }),\n      calendarState = _useCalendarState.calendarState,\n      changeFocusedDay = _useCalendarState.changeFocusedDay,\n      changeMonth = _useCalendarState.changeMonth,\n      isDateDisabled = _useCalendarState.isDateDisabled,\n      handleChangeMonth = _useCalendarState.handleChangeMonth,\n      onMonthSwitchingAnimationEnd = _useCalendarState.onMonthSwitchingAnimationEnd;\n\n  React.useEffect(function () {\n    if (date && isDateDisabled(date)) {\n      var closestEnabledDate = findClosestEnabledDate({\n        utils: utils,\n        date: date,\n        minDate: minDate,\n        maxDate: maxDate,\n        disablePast: disablePast,\n        disableFuture: disableFuture,\n        shouldDisableDate: isDateDisabled\n      });\n      onChange(closestEnabledDate, 'partial');\n    } // This call is too expensive to run it on each prop change.\n    // So just ensure that we are not rendering disabled as selected on mount.\n\n  }, []); // eslint-disable-line\n\n  React.useEffect(function () {\n    if (date) {\n      changeMonth(date);\n    }\n  }, [date]); // eslint-disable-line\n\n  var ownerState = props;\n  var classes = useUtilityClasses(ownerState);\n  var monthPickerProps = {\n    className: className,\n    date: date,\n    disabled: other.disabled,\n    disablePast: disablePast,\n    disableFuture: disableFuture,\n    onChange: onChange,\n    minDate: minDate,\n    maxDate: maxDate,\n    onMonthChange: onMonthChange,\n    readOnly: other.readOnly\n  };\n  return /*#__PURE__*/_jsxs(CalendarPickerRoot, {\n    ref: ref,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(PickersCalendarHeader, _extends({}, other, {\n      views: views,\n      openView: openView,\n      currentMonth: calendarState.currentMonth,\n      onViewChange: setOpenView,\n      onMonthChange: function onMonthChange(newMonth, direction) {\n        return handleChangeMonth({\n          newMonth: newMonth,\n          direction: direction\n        });\n      },\n      minDate: minDate,\n      maxDate: maxDate,\n      disablePast: disablePast,\n      disableFuture: disableFuture,\n      reduceAnimations: reduceAnimations\n    })), /*#__PURE__*/_jsx(CalendarPickerViewTransitionContainer, {\n      reduceAnimations: reduceAnimations,\n      className: classes.viewTransitionContainer,\n      transKey: openView,\n      ownerState: ownerState,\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        children: [openView === 'year' && /*#__PURE__*/_jsx(YearPicker, _extends({}, other, {\n          autoFocus: autoFocus,\n          date: date,\n          onChange: onChange,\n          minDate: minDate,\n          maxDate: maxDate,\n          disableFuture: disableFuture,\n          disablePast: disablePast,\n          isDateDisabled: isDateDisabled,\n          shouldDisableYear: shouldDisableYear,\n          onFocusedDayChange: changeFocusedDay\n        })), openView === 'month' && /*#__PURE__*/_jsx(MonthPicker, _extends({}, monthPickerProps)), openView === 'day' && /*#__PURE__*/_jsx(PickersCalendar, _extends({}, other, calendarState, {\n          autoFocus: autoFocus,\n          onMonthSwitchingAnimationEnd: onMonthSwitchingAnimationEnd,\n          onFocusedDayChange: changeFocusedDay,\n          reduceAnimations: reduceAnimations,\n          date: date,\n          onChange: onChange,\n          isDateDisabled: isDateDisabled,\n          loading: loading,\n          renderLoading: renderLoading\n        }))]\n      })\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? CalendarPicker.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit TypeScript types and run \"yarn proptypes\"  |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * @ignore\n   */\n  date: PropTypes.any,\n\n  /**\n   * Default calendar month displayed when `value={null}`.\n   */\n  defaultCalendarMonth: PropTypes.any,\n\n  /**\n   * If `true`, the picker and text field are disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disableFuture: PropTypes.bool,\n\n  /**\n   * @default false\n   */\n  disablePast: PropTypes.bool,\n\n  /**\n   * If `true` renders `LoadingComponent` in calendar instead of calendar view.\n   * Can be used to preload information and show it in calendar.\n   * @default false\n   */\n  loading: PropTypes.bool,\n\n  /**\n   * Max selectable date. @DateIOType\n   */\n  maxDate: PropTypes.any,\n\n  /**\n   * Min selectable date. @DateIOType\n   */\n  minDate: PropTypes.any,\n\n  /**\n   * Callback fired on date change\n   */\n  onChange: PropTypes.func.isRequired,\n\n  /**\n   * Callback firing on month change. @DateIOType\n   */\n  onMonthChange: PropTypes.func,\n\n  /**\n   * Callback fired on view change.\n   */\n  onViewChange: PropTypes.func,\n\n  /**\n   * Initially open view.\n   * @default 'day'\n   */\n  openTo: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Make picker read only.\n   * @default false\n   */\n  readOnly: PropTypes.bool,\n\n  /**\n   * Disable heavy animations.\n   * @default typeof navigator !== 'undefined' && /(android)/i.test(navigator.userAgent)\n   */\n  reduceAnimations: PropTypes.bool,\n\n  /**\n   * Component displaying when passed `loading` true.\n   * @default () => <span data-mui-test=\"loading-progress\">...</span>\n   */\n  renderLoading: PropTypes.func,\n\n  /**\n   * Disable specific date. @DateIOType\n   */\n  shouldDisableDate: PropTypes.func,\n\n  /**\n   * Disable specific years dynamically.\n   * Works like `shouldDisableDate` but for year selection view @DateIOType.\n   */\n  shouldDisableYear: PropTypes.func,\n\n  /**\n   * Controlled open view.\n   */\n  view: PropTypes.oneOf(['day', 'month', 'year']),\n\n  /**\n   * Views for calendar picker.\n   * @default ['year', 'day']\n   */\n  views: PropTypes.arrayOf(PropTypes.oneOf(['day', 'month', 'year']).isRequired)\n} : void 0;\n/**\n *\n * Demos:\n *\n * - [Date Picker](https://mui.com/components/date-picker/)\n *\n * API:\n *\n * - [CalendarPicker API](https://mui.com/api/calendar-picker/)\n */\n\nexport default CalendarPicker;","map":null,"metadata":{},"sourceType":"module"}