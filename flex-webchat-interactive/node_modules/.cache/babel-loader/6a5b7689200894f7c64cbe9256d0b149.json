{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Select, FormControl, InputLabel, MenuItem } from '@mui/material';\nvar defaultCurInteractives = {\n  type: '',\n  options: [],\n  label: ''\n}; // type = buttons OR dropdown OR calendar\n// label can be left blank, is used in dropdown only\n// options is used for dropdown and buttons\n\nvar Interactives = function Interactives(_ref) {\n  var manager = _ref.manager,\n      messageList = _ref.messageList,\n      channelSid = _ref.channelSid;\n\n  var _useState = useState(defaultCurInteractives),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1];\n\n  useEffect(function () {\n    if (messageList && messageList.length > 0 && !messageList[messageList.length - 1].isFromMe && messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions) {\n      var lastMessageAttributes = messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n  useEffect(function () {\n    if (curInteractives !== defaultCurInteractives) {\n      var el = document.getElementById('interactive-container');\n      el.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  var sendMessage = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {\n      var curChannel;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return manager.chatClient.getChannelBySid(channelSid);\n\n            case 2:\n              curChannel = _context.sent;\n              curChannel.sendMessage(message);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendMessage(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, curInteractives !== defaultCurInteractives ? /*#__PURE__*/React.createElement(\"div\", {\n    id: \"interactive-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, curInteractives.type === 'buttons' ? /*#__PURE__*/React.createElement(React.Fragment, null, curInteractives.options.map(function (o, idx) {\n    return /*#__PURE__*/React.createElement(Button, {\n      key: o.uuid,\n      onClick: function onClick() {\n        return sendMessage(o.buttonValue);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }\n    }, o.buttonContent);\n  })) : curInteractives.type === 'dropdown' ? /*#__PURE__*/React.createElement(FormControl, {\n    fullWidth: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    id: \"demo-simple-select-label\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }, \"Age\"), /*#__PURE__*/React.createElement(Select, {\n    labelId: \"demo-simple-select-label\",\n    id: \"demo-simple-select\",\n    value: '10',\n    label: \"Select an option\",\n    onChange: function onChange() {\n      return console.log('change');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }, curInteractives.options.map(function (o, idx) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      value: o.buttonValue,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 19\n      }\n    }, o.buttonContent);\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null)) // BUTTONS\n  // <div id=\"interactive-container\">\n  //   {curInteractives.options.map((o, idx) => (\n  //     <Button key={o.uuid} onClick={() => sendMessage(o.buttonValue)}>\n  //       {o.buttonContent}\n  //     </Button>\n  //   ))}\n  // </div>\n  // DROPDOWN\n  // <div id=\"interactive-container\">\n  //   {curInteractives.options.length ? (\n  //     <FormControl fullWidth>\n  //       <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n  //       <Select\n  //         labelId=\"demo-simple-select-label\"\n  //         id=\"demo-simple-select\"\n  //         value={'10'}\n  //         label=\"Select an option\"\n  //         onChange={() => console.log('change')}\n  //       >\n  //         {curInteractives.options.map((o, idx) => (\n  //           <MenuItem value={o.buttonValue}>{o.buttonContent}</MenuItem>\n  //         ))}\n  //       </Select>\n  //     </FormControl>\n  //   ) : (\n  //     <></>\n  //   )}\n  // </div>\n  ;\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx"],"names":["React","useState","useEffect","connect","Button","Select","FormControl","InputLabel","MenuItem","defaultCurInteractives","type","options","label","Interactives","manager","messageList","channelSid","curInteractives","setCurInteractives","length","isFromMe","source","state","attributes","interactiveWebchatOptions","lastMessageAttributes","el","document","getElementById","scrollIntoView","sendMessage","message","chatClient","getChannelBySid","curChannel","map","o","idx","uuid","buttonValue","buttonContent","console","log","mapStateToProps","flex","chat","channels","session","messages"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Select,\n  FormControl,\n  InputLabel,\n  MenuItem,\n} from '@mui/material';\n\nconst defaultCurInteractives = { type: '', options: [], label: '' };\n\n// type = buttons OR dropdown OR calendar\n// label can be left blank, is used in dropdown only\n// options is used for dropdown and buttons\n\nconst Interactives = ({ manager, messageList, channelSid }) => {\n  const [curInteractives, setCurInteractives] = useState(\n    defaultCurInteractives\n  );\n\n  useEffect(() => {\n    if (\n      messageList &&\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe &&\n      messageList[messageList.length - 1].source.state.attributes\n        .interactiveWebchatOptions\n    ) {\n      const lastMessageAttributes =\n        messageList[messageList.length - 1].source.state.attributes\n          .interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n\n  useEffect(() => {\n    if (curInteractives !== defaultCurInteractives) {\n      const el = document.getElementById('interactive-container');\n      el.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  const sendMessage = async (message) => {\n    const curChannel = await manager.chatClient.getChannelBySid(channelSid);\n    curChannel.sendMessage(message);\n  };\n\n  return (\n    <>\n      {curInteractives !== defaultCurInteractives ? (\n        <div id=\"interactive-container\">\n          {curInteractives.type === 'buttons' ? (\n            <>\n              {curInteractives.options.map((o, idx) => (\n                <Button key={o.uuid} onClick={() => sendMessage(o.buttonValue)}>\n                  {o.buttonContent}\n                </Button>\n              ))}\n            </>\n          ) : curInteractives.type === 'dropdown' ? (\n            <FormControl fullWidth>\n              <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n              <Select\n                labelId=\"demo-simple-select-label\"\n                id=\"demo-simple-select\"\n                value={'10'}\n                label=\"Select an option\"\n                onChange={() => console.log('change')}\n              >\n                {curInteractives.options.map((o, idx) => (\n                  <MenuItem value={o.buttonValue}>{o.buttonContent}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          ) : (\n            <></>\n          )}\n        </div>\n      ) : (\n        <></>\n      )}\n    </>\n\n    // BUTTONS\n    // <div id=\"interactive-container\">\n    //   {curInteractives.options.map((o, idx) => (\n    //     <Button key={o.uuid} onClick={() => sendMessage(o.buttonValue)}>\n    //       {o.buttonContent}\n    //     </Button>\n    //   ))}\n    // </div>\n\n    // DROPDOWN\n    // <div id=\"interactive-container\">\n    //   {curInteractives.options.length ? (\n    //     <FormControl fullWidth>\n    //       <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n    //       <Select\n    //         labelId=\"demo-simple-select-label\"\n    //         id=\"demo-simple-select\"\n    //         value={'10'}\n    //         label=\"Select an option\"\n    //         onChange={() => console.log('change')}\n    //       >\n    //         {curInteractives.options.map((o, idx) => (\n    //           <MenuItem value={o.buttonValue}>{o.buttonContent}</MenuItem>\n    //         ))}\n    //       </Select>\n    //     </FormControl>\n    //   ) : (\n    //     <></>\n    //   )}\n    // </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}