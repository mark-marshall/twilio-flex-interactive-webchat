{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BindingWhenOnSyntax = void 0;\n\nvar binding_on_syntax_1 = require(\"./binding_on_syntax\");\n\nvar binding_when_syntax_1 = require(\"./binding_when_syntax\");\n\nvar BindingWhenOnSyntax = function () {\n  function BindingWhenOnSyntax(binding) {\n    this._binding = binding;\n    this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);\n    this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);\n  }\n\n  BindingWhenOnSyntax.prototype.when = function (constraint) {\n    return this._bindingWhenSyntax.when(constraint);\n  };\n\n  BindingWhenOnSyntax.prototype.whenTargetNamed = function (name) {\n    return this._bindingWhenSyntax.whenTargetNamed(name);\n  };\n\n  BindingWhenOnSyntax.prototype.whenTargetIsDefault = function () {\n    return this._bindingWhenSyntax.whenTargetIsDefault();\n  };\n\n  BindingWhenOnSyntax.prototype.whenTargetTagged = function (tag, value) {\n    return this._bindingWhenSyntax.whenTargetTagged(tag, value);\n  };\n\n  BindingWhenOnSyntax.prototype.whenInjectedInto = function (parent) {\n    return this._bindingWhenSyntax.whenInjectedInto(parent);\n  };\n\n  BindingWhenOnSyntax.prototype.whenParentNamed = function (name) {\n    return this._bindingWhenSyntax.whenParentNamed(name);\n  };\n\n  BindingWhenOnSyntax.prototype.whenParentTagged = function (tag, value) {\n    return this._bindingWhenSyntax.whenParentTagged(tag, value);\n  };\n\n  BindingWhenOnSyntax.prototype.whenAnyAncestorIs = function (ancestor) {\n    return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);\n  };\n\n  BindingWhenOnSyntax.prototype.whenNoAncestorIs = function (ancestor) {\n    return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);\n  };\n\n  BindingWhenOnSyntax.prototype.whenAnyAncestorNamed = function (name) {\n    return this._bindingWhenSyntax.whenAnyAncestorNamed(name);\n  };\n\n  BindingWhenOnSyntax.prototype.whenAnyAncestorTagged = function (tag, value) {\n    return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);\n  };\n\n  BindingWhenOnSyntax.prototype.whenNoAncestorNamed = function (name) {\n    return this._bindingWhenSyntax.whenNoAncestorNamed(name);\n  };\n\n  BindingWhenOnSyntax.prototype.whenNoAncestorTagged = function (tag, value) {\n    return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);\n  };\n\n  BindingWhenOnSyntax.prototype.whenAnyAncestorMatches = function (constraint) {\n    return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);\n  };\n\n  BindingWhenOnSyntax.prototype.whenNoAncestorMatches = function (constraint) {\n    return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);\n  };\n\n  BindingWhenOnSyntax.prototype.onActivation = function (handler) {\n    return this._bindingOnSyntax.onActivation(handler);\n  };\n\n  return BindingWhenOnSyntax;\n}();\n\nexports.BindingWhenOnSyntax = BindingWhenOnSyntax;","map":null,"metadata":{},"sourceType":"script"}