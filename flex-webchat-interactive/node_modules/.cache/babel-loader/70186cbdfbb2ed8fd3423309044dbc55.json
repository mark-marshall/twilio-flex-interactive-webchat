{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  var valueRef = React.useRef(value);\n  valueRef.current = value;\n  var onValueChangeRef = React.useRef(onValueChange);\n  onValueChangeRef.current = onValueChange;\n  var onHighlightChangeRef = React.useRef(onHighlightChange);\n  onHighlightChangeRef.current = onHighlightChange;\n  React.useEffect(function () {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur; // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n\n\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(function () {\n    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n    if (state.highlightedIndex === -1) {\n      var _onHighlightChangeRef;\n\n      (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, null);\n    } else {\n      var _onHighlightChangeRef2;\n\n      (_onHighlightChangeRef2 = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef2.call(onHighlightChangeRef, options[state.highlightedIndex]);\n    }\n  }, [state.highlightedIndex, options]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  var controlledValue = props.value,\n      defaultValue = props.defaultValue,\n      onValueChange = props.onChange,\n      onHighlightChange = props.onHighlightChange,\n      options = props.options,\n      optionComparer = props.optionComparer;\n  var propsRef = React.useRef(props);\n  propsRef.current = props;\n\n  var _useControlled = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValueState = _useControlled2[1];\n\n  var previousValueRef = React.useRef(null);\n\n  var _React$useReducer = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedIndex: -1,\n    selectedValue: value\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(function () {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setControlledValue,\n      value: controlledValue,\n      props: propsRef.current\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}","map":null,"metadata":{},"sourceType":"module"}