{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Target = void 0;\n\nvar METADATA_KEY = require(\"../constants/metadata_keys\");\n\nvar id_1 = require(\"../utils/id\");\n\nvar metadata_1 = require(\"./metadata\");\n\nvar queryable_string_1 = require(\"./queryable_string\");\n\nvar Target = function () {\n  function Target(type, name, serviceIdentifier, namedOrTagged) {\n    this.id = id_1.id();\n    this.type = type;\n    this.serviceIdentifier = serviceIdentifier;\n    this.name = new queryable_string_1.QueryableString(name || \"\");\n    this.metadata = new Array();\n    var metadataItem = null;\n\n    if (typeof namedOrTagged === \"string\") {\n      metadataItem = new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, namedOrTagged);\n    } else if (namedOrTagged instanceof metadata_1.Metadata) {\n      metadataItem = namedOrTagged;\n    }\n\n    if (metadataItem !== null) {\n      this.metadata.push(metadataItem);\n    }\n  }\n\n  Target.prototype.hasTag = function (key) {\n    for (var _i = 0, _a = this.metadata; _i < _a.length; _i++) {\n      var m = _a[_i];\n\n      if (m.key === key) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Target.prototype.isArray = function () {\n    return this.hasTag(METADATA_KEY.MULTI_INJECT_TAG);\n  };\n\n  Target.prototype.matchesArray = function (name) {\n    return this.matchesTag(METADATA_KEY.MULTI_INJECT_TAG)(name);\n  };\n\n  Target.prototype.isNamed = function () {\n    return this.hasTag(METADATA_KEY.NAMED_TAG);\n  };\n\n  Target.prototype.isTagged = function () {\n    return this.metadata.some(function (metadata) {\n      return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) {\n        return metadata.key !== key;\n      });\n    });\n  };\n\n  Target.prototype.isOptional = function () {\n    return this.matchesTag(METADATA_KEY.OPTIONAL_TAG)(true);\n  };\n\n  Target.prototype.getNamedTag = function () {\n    if (this.isNamed()) {\n      return this.metadata.filter(function (m) {\n        return m.key === METADATA_KEY.NAMED_TAG;\n      })[0];\n    }\n\n    return null;\n  };\n\n  Target.prototype.getCustomTags = function () {\n    if (this.isTagged()) {\n      return this.metadata.filter(function (metadata) {\n        return METADATA_KEY.NON_CUSTOM_TAG_KEYS.every(function (key) {\n          return metadata.key !== key;\n        });\n      });\n    } else {\n      return null;\n    }\n  };\n\n  Target.prototype.matchesNamedTag = function (name) {\n    return this.matchesTag(METADATA_KEY.NAMED_TAG)(name);\n  };\n\n  Target.prototype.matchesTag = function (key) {\n    var _this = this;\n\n    return function (value) {\n      for (var _i = 0, _a = _this.metadata; _i < _a.length; _i++) {\n        var m = _a[_i];\n\n        if (m.key === key && m.value === value) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n  };\n\n  return Target;\n}();\n\nexports.Target = Target;","map":null,"metadata":{},"sourceType":"script"}