{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"./logger\");\n\nvar log = logger_1.Logger.scope('UserDescriptor');\n\nfunction parseAttributes(attrs) {\n  try {\n    return JSON.parse(attrs);\n  } catch (e) {\n    log.warn('Failed to parse user attributes', e);\n  }\n\n  return {};\n}\n/**\n * @classdesc Extended user information.\n * Note that <code>online</code> and <code>notifiable</code> properties are eligible\n * to use only if reachability function is enabled.\n * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.\n *\n * @property {String} identity - User identity\n * @property {String} friendlyName - User friendly name, null if not set\n * @property {Object} attributes - Object with custom attributes for user\n * @property {Boolean} online - User real-time channel connection status\n * @property {Boolean} notifiable - User push notification registration status\n *\n * @constructor\n * @param {Users} users Users instance\n * @param {Object} descriptor User descriptor data object\n */\n\n\nvar UserDescriptor = function () {\n  /**\n   * @param {UserDescriptorServices} services - services, needed for UserDescriptor\n   * @param {Object} descriptor User descriptor data object\n   * @private\n   */\n  function UserDescriptor(services, descriptor) {\n    (0, _classCallCheck3.default)(this, UserDescriptor);\n    this.services = services;\n    this.descriptor = descriptor;\n    this.identity = descriptor.identity;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes);\n    this.online = descriptor.is_online;\n    this.notifiable = descriptor.is_notifiable;\n  }\n  /**\n   * Gets User object from descriptor and subscribes to it.\n   * @returns {Promise<User>}\n   */\n\n\n  (0, _createClass3.default)(UserDescriptor, [{\n    key: \"subscribe\",\n    value: function subscribe() {\n      return this.services.users.getUser(this.identity, this.descriptor.sync_unique_name);\n    }\n  }, {\n    key: \"_getDescriptor\",\n    value: function _getDescriptor() {\n      return this.descriptor;\n    }\n  }]);\n  return UserDescriptor;\n}();\n\nexports.UserDescriptor = UserDescriptor;","map":null,"metadata":{},"sourceType":"script"}