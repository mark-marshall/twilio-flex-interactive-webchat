{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkService = void 0;\n\nvar uuid = require(\"uuid\");\n\nvar syncerror_1 = require(\"../utils/syncerror\");\n\nvar logger_1 = require(\"../utils/logger\");\n\nvar operation_retrier_1 = require(\"operation-retrier\");\n\nvar twilsock_1 = require(\"twilsock\");\n\nvar MINIMUM_RETRY_DELAY = 4000;\nvar MAXIMUM_RETRY_DELAY = 60000;\nvar MAXIMUM_ATTEMPTS_TIME = 90000;\nvar RETRY_DELAY_RANDOMNESS = 0.2;\n\nfunction messageFromErrorBody(transportError) {\n  if (transportError.body) {\n    if (transportError.body.message) {\n      return transportError.body.message;\n    }\n  }\n\n  switch (transportError.status) {\n    case 429:\n      return 'Throttled by server';\n\n    case 404:\n      return 'Not found from server';\n\n    default:\n      return 'Error from server';\n  }\n}\n\nfunction codeFromErrorBody(trasportError) {\n  if (trasportError.body) {\n    return trasportError.body.code;\n  }\n\n  return 0;\n}\n\nfunction mapTransportError(transportError) {\n  if (transportError.status === 409) {\n    return new syncerror_1.SyncNetworkError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError), transportError.body);\n  } else if (transportError.status) {\n    return new syncerror_1.SyncError(messageFromErrorBody(transportError), transportError.status, codeFromErrorBody(transportError));\n  } else if (transportError instanceof twilsock_1.TransportUnavailableError) {\n    return transportError;\n  } else {\n    return new syncerror_1.SyncError(transportError.message, 0, 0);\n  }\n}\n/**\n * @classdesc Incapsulates network operations to make it possible to add some optimization/caching strategies\n */\n\n\nvar NetworkService = /*#__PURE__*/function () {\n  function NetworkService(clientInfo, config, transport) {\n    _classCallCheck(this, NetworkService);\n\n    this.clientInfo = clientInfo;\n    this.config = config;\n    this.transport = transport;\n  }\n\n  _createClass(NetworkService, [{\n    key: \"createHeaders\",\n    value: function createHeaders() {\n      return {\n        'Content-Type': 'application/json',\n        'Twilio-Sync-Client-Info': JSON.stringify(this.clientInfo),\n        'Twilio-Request-Id': 'RQ' + uuid.v4().replace(/-/g, '')\n      };\n    }\n  }, {\n    key: \"backoffConfig\",\n    value: function backoffConfig() {\n      return Object.assign({\n        min: MINIMUM_RETRY_DELAY,\n        max: MAXIMUM_RETRY_DELAY,\n        maxAttemptsTime: MAXIMUM_ATTEMPTS_TIME,\n        randomness: RETRY_DELAY_RANDOMNESS\n      }, this.config.backoffConfig);\n    }\n  }, {\n    key: \"executeWithRetry\",\n    value: function executeWithRetry(request) {\n      var _this = this;\n\n      var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return new Promise(function (resolve, reject) {\n        var codesToRetryOn = [502, 503, 504];\n\n        if (retryWhenThrottled) {\n          codesToRetryOn.push(429);\n        }\n\n        var retrier = new operation_retrier_1.Retrier(_this.backoffConfig());\n        retrier.on('attempt', function () {\n          request().then(function (result) {\n            return retrier.succeeded(result);\n          }).catch(function (err) {\n            if (codesToRetryOn.includes(err.status)) {\n              var delayOverride = parseInt(err.headers ? err.headers['Retry-After'] : null);\n              retrier.failed(mapTransportError(err), isNaN(delayOverride) ? null : delayOverride * 1000);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(mapTransportError(err));\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(mapTransportError(err));\n            }\n          });\n        });\n        retrier.on('succeeded', function (result) {\n          resolve(result);\n        });\n        retrier.on('cancelled', function (err) {\n          return reject(mapTransportError(err));\n        });\n        retrier.on('failed', function (err) {\n          return reject(mapTransportError(err));\n        });\n        retrier.start();\n      });\n    }\n    /**\n     * Make a GET request by given URI\n     * @Returns Promise<Response> Result of successful get request\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(uri) {\n      var _this2 = this;\n\n      var headers = this.createHeaders();\n      logger_1.default.debug('GET', uri, 'ID:', headers['Twilio-Request-Id']);\n      return this.executeWithRetry(function () {\n        return _this2.transport.get(uri, headers);\n      }, true);\n    }\n  }, {\n    key: \"post\",\n    value: function post(uri, body, revision) {\n      var _this3 = this;\n\n      var retryWhenThrottled = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var headers = this.createHeaders();\n\n      if (typeof revision !== 'undefined' && revision !== null) {\n        headers['If-Match'] = revision;\n      }\n\n      logger_1.default.debug('POST', uri, 'ID:', headers['Twilio-Request-Id']);\n      return this.executeWithRetry(function () {\n        return _this3.transport.post(uri, headers, body);\n      }, retryWhenThrottled);\n    }\n  }, {\n    key: \"put\",\n    value: function put(uri, body, revision) {\n      var _this4 = this;\n\n      var headers = this.createHeaders();\n\n      if (typeof revision !== 'undefined' && revision !== null) {\n        headers['If-Match'] = revision;\n      }\n\n      logger_1.default.debug('PUT', uri, 'ID:', headers['Twilio-Request-Id']);\n      return this.executeWithRetry(function () {\n        return _this4.transport.put(uri, headers, body);\n      }, false);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(uri) {\n      var _this5 = this;\n\n      var headers = this.createHeaders();\n      logger_1.default.debug('DELETE', uri, 'ID:', headers['Twilio-Request-Id']);\n      return this.executeWithRetry(function () {\n        return _this5.transport.delete(uri, headers);\n      }, false);\n    }\n  }]);\n\n  return NetworkService;\n}();\n\nexports.NetworkService = NetworkService;","map":null,"metadata":{},"sourceType":"script"}