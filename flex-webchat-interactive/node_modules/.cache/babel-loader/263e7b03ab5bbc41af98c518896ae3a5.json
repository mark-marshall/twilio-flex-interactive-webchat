{"ast":null,"code":"'use strict';\n\nvar call = require('../internals/function-call');\n\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\n\nvar anObject = require('../internals/an-object');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar sameValue = require('../internals/same-value');\n\nvar toString = require('../internals/to-string');\n\nvar getMethod = require('../internals/get-method');\n\nvar regExpExec = require('../internals/regexp-exec-abstract'); // @@search logic\n\n\nfixRegExpWellKnownSymbolLogic('search', function (SEARCH, nativeSearch, maybeCallNative) {\n  return [// `String.prototype.search` method\n  // https://tc39.es/ecma262/#sec-string.prototype.search\n  function search(regexp) {\n    var O = requireObjectCoercible(this);\n    var searcher = regexp == undefined ? undefined : getMethod(regexp, SEARCH);\n    return searcher ? call(searcher, regexp, O) : new RegExp(regexp)[SEARCH](toString(O));\n  }, // `RegExp.prototype[@@search]` method\n  // https://tc39.es/ecma262/#sec-regexp.prototype-@@search\n  function (string) {\n    var rx = anObject(this);\n    var S = toString(string);\n    var res = maybeCallNative(nativeSearch, rx, S);\n    if (res.done) return res.value;\n    var previousLastIndex = rx.lastIndex;\n    if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n    var result = regExpExec(rx, S);\n    if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n    return result === null ? -1 : result.index;\n  }];\n});","map":null,"metadata":{},"sourceType":"script"}