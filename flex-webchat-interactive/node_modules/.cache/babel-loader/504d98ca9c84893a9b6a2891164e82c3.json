{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar call = require('../internals/function-call');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar isCallable = require('../internals/is-callable');\n\nvar isRegExp = require('../internals/is-regexp');\n\nvar toString = require('../internals/to-string');\n\nvar getMethod = require('../internals/get-method');\n\nvar regExpFlags = require('../internals/regexp-flags');\n\nvar getSubstitution = require('../internals/get-substitution');\n\nvar wellKnownSymbol = require('../internals/well-known-symbol');\n\nvar IS_PURE = require('../internals/is-pure');\n\nvar REPLACE = wellKnownSymbol('replace');\nvar RegExpPrototype = RegExp.prototype;\nvar TypeError = global.TypeError;\nvar getFlags = uncurryThis(regExpFlags);\nvar indexOf = uncurryThis(''.indexOf);\nvar replace = uncurryThis(''.replace);\nvar stringSlice = uncurryThis(''.slice);\nvar max = Math.max;\n\nvar stringIndexOf = function stringIndexOf(string, searchValue, fromIndex) {\n  if (fromIndex > string.length) return -1;\n  if (searchValue === '') return fromIndex;\n  return indexOf(string, searchValue, fromIndex);\n}; // `String.prototype.replaceAll` method\n// https://tc39.es/ecma262/#sec-string.prototype.replaceall\n\n\n$({\n  target: 'String',\n  proto: true\n}, {\n  replaceAll: function replaceAll(searchValue, replaceValue) {\n    var O = requireObjectCoercible(this);\n    var IS_REG_EXP, flags, replacer, string, searchString, functionalReplace, searchLength, advanceBy, replacement;\n    var position = 0;\n    var endOfLastMatch = 0;\n    var result = '';\n\n    if (searchValue != null) {\n      IS_REG_EXP = isRegExp(searchValue);\n\n      if (IS_REG_EXP) {\n        flags = toString(requireObjectCoercible('flags' in RegExpPrototype ? searchValue.flags : getFlags(searchValue)));\n        if (!~indexOf(flags, 'g')) throw TypeError('`.replaceAll` does not allow non-global regexes');\n      }\n\n      replacer = getMethod(searchValue, REPLACE);\n\n      if (replacer) {\n        return call(replacer, searchValue, O, replaceValue);\n      } else if (IS_PURE && IS_REG_EXP) {\n        return replace(toString(O), searchValue, replaceValue);\n      }\n    }\n\n    string = toString(O);\n    searchString = toString(searchValue);\n    functionalReplace = isCallable(replaceValue);\n    if (!functionalReplace) replaceValue = toString(replaceValue);\n    searchLength = searchString.length;\n    advanceBy = max(1, searchLength);\n    position = stringIndexOf(string, searchString, 0);\n\n    while (position !== -1) {\n      replacement = functionalReplace ? toString(replaceValue(searchString, position, string)) : getSubstitution(searchString, string, position, [], undefined, replaceValue);\n      result += stringSlice(string, endOfLastMatch, position) + replacement;\n      endOfLastMatch = position + searchLength;\n      position = stringIndexOf(string, searchString, position + advanceBy);\n    }\n\n    if (endOfLastMatch < string.length) {\n      result += stringSlice(string, endOfLastMatch);\n    }\n\n    return result;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}