{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EntitiesCache = void 0;\n/**\n * Container for entities which are known by the client\n * It's needed for deduplication when client obtain the same object several times\n */\n\nvar EntitiesCache = /*#__PURE__*/function () {\n  function EntitiesCache() {\n    _classCallCheck(this, EntitiesCache);\n\n    this.names = new Map();\n    this.entities = new Map();\n  }\n\n  _createClass(EntitiesCache, [{\n    key: \"store\",\n    value: function store(entity) {\n      var stored = this.entities.get(entity.sid);\n\n      if (stored) {\n        return stored;\n      }\n\n      this.entities.set(entity.sid, entity);\n\n      if (entity.uniqueName) {\n        this.names.set(entity.type + '::' + entity.uniqueName, entity.sid);\n      }\n\n      return entity;\n    }\n  }, {\n    key: \"getResolved\",\n    value: function getResolved(id, type) {\n      var resolvedSid = this.names.get(type + '::' + id);\n      return resolvedSid ? this.entities.get(resolvedSid) : null;\n    }\n  }, {\n    key: \"get\",\n    value: function get(id, type) {\n      return this.entities.get(id) || this.getResolved(id, type) || null;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(sid) {\n      var cached = this.entities.get(sid);\n\n      if (cached) {\n        this.entities.delete(sid);\n\n        if (cached.uniqueName) {\n          this.names.delete(cached.type + '::' + cached.uniqueName);\n        }\n      }\n    }\n  }]);\n\n  return EntitiesCache;\n}();\n\nexports.EntitiesCache = EntitiesCache;","map":null,"metadata":{},"sourceType":"script"}