{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"calendars\", \"changeMonth\", \"components\", \"componentsProps\", \"currentlySelectingRangeEnd\", \"currentMonth\", \"date\", \"disableFuture\", \"disablePast\", \"leftArrowButtonText\", \"maxDate\", \"minDate\", \"onChange\", \"renderDay\", \"rightArrowButtonText\"];\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport { calculateRangePreview } from './date-range-manager';\nimport PickersCalendar from '../CalendarPicker/PickersCalendar';\nimport DateRangePickerDay from '../DateRangePickerDay';\nimport PickersArrowSwitcher from '../internal/pickers/PickersArrowSwitcher';\nimport { usePreviousMonthDisabled, useNextMonthDisabled } from '../internal/pickers/hooks/date-helpers-hooks';\nimport { isWithinRange, isStartOfRange, isEndOfRange } from '../internal/pickers/date-utils';\nimport { doNothing } from '../internal/pickers/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createElement as _createElement } from \"react\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar DateRangePickerViewDesktopRoot = styled('div')({\n  display: 'flex',\n  flexDirection: 'row'\n});\nvar DateRangePickerViewDesktopContainer = styled('div')(function (_ref) {\n  var theme = _ref.theme;\n  return {\n    '&:not(:last-of-type)': {\n      borderRight: \"2px solid \".concat(theme.palette.divider)\n    }\n  };\n});\nvar DateRangePickerViewDesktopCalendar = styled(PickersCalendar)({\n  minWidth: 312,\n  minHeight: 288\n});\nvar DateRangePickerViewDesktopArrowSwitcher = styled(PickersArrowSwitcher)({\n  padding: '16px 16px 8px 16px',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'space-between'\n});\n\nfunction getCalendarsArray(calendars) {\n  switch (calendars) {\n    case 1:\n      return [0];\n\n    case 2:\n      return [0, 0];\n\n    case 3:\n      return [0, 0, 0];\n    // this will not work in IE11, but allows to support any amount of calendars\n\n    default:\n      return new Array(calendars).fill(0);\n  }\n}\n/**\n * @ignore - internal component.\n */\n\n\nfunction DateRangePickerViewDesktop(props) {\n  var calendars = props.calendars,\n      changeMonth = props.changeMonth,\n      components = props.components,\n      componentsProps = props.componentsProps,\n      currentlySelectingRangeEnd = props.currentlySelectingRangeEnd,\n      currentMonth = props.currentMonth,\n      date = props.date,\n      disableFuture = props.disableFuture,\n      disablePast = props.disablePast,\n      _props$leftArrowButto = props.leftArrowButtonText,\n      leftArrowButtonText = _props$leftArrowButto === void 0 ? 'Previous month' : _props$leftArrowButto,\n      maxDateProp = props.maxDate,\n      minDateProp = props.minDate,\n      onChange = props.onChange,\n      _props$renderDay = props.renderDay,\n      _renderDay = _props$renderDay === void 0 ? function (_, dateRangeProps) {\n    return /*#__PURE__*/_jsx(DateRangePickerDay, _extends({}, dateRangeProps));\n  } : _props$renderDay,\n      _props$rightArrowButt = props.rightArrowButtonText,\n      rightArrowButtonText = _props$rightArrowButt === void 0 ? 'Next month' : _props$rightArrowButt,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var utils = useUtils();\n  var defaultDates = useDefaultDates();\n  var minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  var maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      rangePreviewDay = _React$useState2[0],\n      setRangePreviewDay = _React$useState2[1];\n\n  var isNextMonthDisabled = useNextMonthDisabled(currentMonth, {\n    disableFuture: disableFuture,\n    maxDate: maxDate\n  });\n  var isPreviousMonthDisabled = usePreviousMonthDisabled(currentMonth, {\n    disablePast: disablePast,\n    minDate: minDate\n  });\n  var previewingRange = calculateRangePreview({\n    utils: utils,\n    range: date,\n    newDate: rangePreviewDay,\n    currentlySelectingRangeEnd: currentlySelectingRangeEnd\n  });\n  var handleDayChange = React.useCallback(function (day) {\n    setRangePreviewDay(null);\n    onChange(day);\n  }, [onChange]);\n\n  var handlePreviewDayChange = function handlePreviewDayChange(newPreviewRequest) {\n    if (!isWithinRange(utils, newPreviewRequest, date)) {\n      setRangePreviewDay(newPreviewRequest);\n    } else {\n      setRangePreviewDay(null);\n    }\n  };\n\n  var CalendarTransitionProps = React.useMemo(function () {\n    return {\n      onMouseLeave: function onMouseLeave() {\n        return setRangePreviewDay(null);\n      }\n    };\n  }, []);\n  var selectNextMonth = React.useCallback(function () {\n    changeMonth(utils.getNextMonth(currentMonth));\n  }, [changeMonth, currentMonth, utils]);\n  var selectPreviousMonth = React.useCallback(function () {\n    changeMonth(utils.getPreviousMonth(currentMonth));\n  }, [changeMonth, currentMonth, utils]);\n  return /*#__PURE__*/_jsx(DateRangePickerViewDesktopRoot, {\n    children: getCalendarsArray(calendars).map(function (_, index) {\n      var monthOnIteration = utils.setMonth(currentMonth, utils.getMonth(currentMonth) + index);\n      return /*#__PURE__*/_jsxs(DateRangePickerViewDesktopContainer, {\n        children: [/*#__PURE__*/_jsx(DateRangePickerViewDesktopArrowSwitcher, {\n          onLeftClick: selectPreviousMonth,\n          onRightClick: selectNextMonth,\n          isLeftHidden: index !== 0,\n          isRightHidden: index !== calendars - 1,\n          isLeftDisabled: isPreviousMonthDisabled,\n          isRightDisabled: isNextMonthDisabled,\n          leftArrowButtonText: leftArrowButtonText,\n          components: components,\n          componentsProps: componentsProps,\n          rightArrowButtonText: rightArrowButtonText,\n          children: utils.format(monthOnIteration, 'monthAndYear')\n        }), /*#__PURE__*/_createElement(DateRangePickerViewDesktopCalendar, _extends({}, other, {\n          key: index,\n          date: date,\n          onFocusedDayChange: doNothing,\n          onChange: handleDayChange,\n          currentMonth: monthOnIteration,\n          TransitionProps: CalendarTransitionProps,\n          renderDay: function renderDay(day, __, DayProps) {\n            return _renderDay(day, _extends({\n              isPreviewing: isWithinRange(utils, day, previewingRange),\n              isStartOfPreviewing: isStartOfRange(utils, day, previewingRange),\n              isEndOfPreviewing: isEndOfRange(utils, day, previewingRange),\n              isHighlighting: isWithinRange(utils, day, date),\n              isStartOfHighlighting: isStartOfRange(utils, day, date),\n              isEndOfHighlighting: isEndOfRange(utils, day, date),\n              onMouseEnter: function onMouseEnter() {\n                return handlePreviewDayChange(day);\n              }\n            }, DayProps));\n          }\n        }))]\n      }, index);\n    })\n  });\n}\n\nexport default DateRangePickerViewDesktop;","map":null,"metadata":{},"sourceType":"module"}