{"ast":null,"code":"'use strict';\n\nvar global = require('../internals/global');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar aCallable = require('../internals/a-callable');\n\nvar isObject = require('../internals/is-object');\n\nvar hasOwn = require('../internals/has-own-property');\n\nvar arraySlice = require('../internals/array-slice');\n\nvar NATIVE_BIND = require('../internals/function-bind-native');\n\nvar Function = global.Function;\nvar concat = uncurryThis([].concat);\nvar join = uncurryThis([].join);\nvar factories = {};\n\nvar construct = function construct(C, argsLength, args) {\n  if (!hasOwn(factories, argsLength)) {\n    for (var list = [], i = 0; i < argsLength; i++) {\n      list[i] = 'a[' + i + ']';\n    }\n\n    factories[argsLength] = Function('C,a', 'return new C(' + join(list, ',') + ')');\n  }\n\n  return factories[argsLength](C, args);\n}; // `Function.prototype.bind` method implementation\n// https://tc39.es/ecma262/#sec-function.prototype.bind\n\n\nmodule.exports = NATIVE_BIND ? Function.bind : function bind(that\n/* , ...args */\n) {\n  var F = aCallable(this);\n  var Prototype = F.prototype;\n  var partArgs = arraySlice(arguments, 1);\n\n  var boundFunction = function\n    /* args... */\n  bound() {\n    var args = concat(partArgs, arraySlice(arguments));\n    return this instanceof boundFunction ? construct(F, args.length, args) : F.apply(that, args);\n  };\n\n  if (isObject(Prototype)) boundFunction.prototype = Prototype;\n  return boundFunction;\n};","map":null,"metadata":{},"sourceType":"script"}