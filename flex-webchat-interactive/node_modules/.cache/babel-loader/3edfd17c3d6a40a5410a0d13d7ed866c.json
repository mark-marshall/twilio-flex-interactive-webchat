{"ast":null,"code":"var $ = require('../internals/export');\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar apply = require('../internals/function-apply');\n\nvar fails = require('../internals/fails');\n\nvar wrapErrorConstructorWithCause = require('../internals/wrap-error-constructor-with-cause');\n\nvar AGGREGATE_ERROR = 'AggregateError';\nvar $AggregateError = getBuiltIn(AGGREGATE_ERROR);\nvar FORCED = !fails(function () {\n  return $AggregateError([1]).errors[0] !== 1;\n}) && fails(function () {\n  return $AggregateError([1], AGGREGATE_ERROR, {\n    cause: 7\n  }).cause !== 7;\n}); // https://github.com/tc39/proposal-error-cause\n\n$({\n  global: true,\n  forced: FORCED\n}, {\n  AggregateError: wrapErrorConstructorWithCause(AGGREGATE_ERROR, function (init) {\n    // eslint-disable-next-line no-unused-vars -- required for functions `.length`\n    return function AggregateError(errors, message) {\n      return apply(init, this, arguments);\n    };\n  }, FORCED, true)\n});","map":null,"metadata":{},"sourceType":"script"}