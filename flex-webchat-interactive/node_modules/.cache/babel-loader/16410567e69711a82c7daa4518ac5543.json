{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"../logger\");\n\nvar events_1 = require(\"events\");\n\nvar uuid_1 = require(\"uuid\");\n\nvar twilsockerror_1 = require(\"../error/twilsockerror\");\n/**\n * Registrations module handles all operations with registration contexts through twilsock\n * Main role: it automatically refreshes all registrations after reconnect.\n */\n\n\nvar Registrations = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Registrations, _events_1$EventEmitte);\n\n  var _super = _createSuper(Registrations);\n\n  function Registrations(transport) {\n    var _this;\n\n    _classCallCheck(this, Registrations);\n\n    _this = _super.call(this);\n    _this.transport = transport;\n    _this.registrations = new Map();\n    _this.registrationsInProgress = new Map();\n    return _this;\n  }\n\n  _createClass(Registrations, [{\n    key: \"putNotificationContext\",\n    value: function () {\n      var _putNotificationContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(contextId, context) {\n        var header, reply;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                header = {\n                  method: 'put_notification_ctx',\n                  notification_ctx_id: contextId\n                };\n                _context.next = 3;\n                return this.transport.sendWithReply(header, context);\n\n              case 3:\n                reply = _context.sent;\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function putNotificationContext(_x, _x2) {\n        return _putNotificationContext.apply(this, arguments);\n      }\n\n      return putNotificationContext;\n    }()\n  }, {\n    key: \"deleteNotificationContext\",\n    value: function () {\n      var _deleteNotificationContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(contextId) {\n        var message, reply;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                message = {\n                  method: 'delete_notification_ctx',\n                  notification_ctx_id: contextId\n                };\n                _context2.next = 3;\n                return this.transport.sendWithReply(message);\n\n              case 3:\n                reply = _context2.sent;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteNotificationContext(_x3) {\n        return _deleteNotificationContext.apply(this, arguments);\n      }\n\n      return deleteNotificationContext;\n    }()\n  }, {\n    key: \"updateRegistration\",\n    value: function () {\n      var _updateRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(contextId, context) {\n        var registrationAttempts, attemptId;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                logger_1.log.debug('update registration for context', contextId);\n                registrationAttempts = this.registrationsInProgress.get(contextId);\n\n                if (!registrationAttempts) {\n                  registrationAttempts = new Set();\n                  this.registrationsInProgress.set(contextId, registrationAttempts);\n                }\n\n                attemptId = uuid_1.v4();\n                registrationAttempts.add(attemptId);\n                _context3.prev = 5;\n                _context3.next = 8;\n                return this.putNotificationContext(contextId, context);\n\n              case 8:\n                logger_1.log.debug('registration attempt succeeded for context', context);\n                registrationAttempts.delete(attemptId);\n\n                if (registrationAttempts.size === 0) {\n                  this.registrationsInProgress.delete(contextId);\n                  this.emit('registered', contextId);\n                }\n\n                _context3.next = 19;\n                break;\n\n              case 13:\n                _context3.prev = 13;\n                _context3.t0 = _context3[\"catch\"](5);\n                logger_1.log.warn('registration attempt failed for context', context);\n                logger_1.log.debug(_context3.t0);\n                registrationAttempts.delete(attemptId);\n\n                if (registrationAttempts.size === 0) {\n                  this.registrationsInProgress.delete(contextId);\n                  this.emit('registrationFailed', contextId, _context3.t0);\n                }\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[5, 13]]);\n      }));\n\n      function updateRegistration(_x4, _x5) {\n        return _updateRegistration.apply(this, arguments);\n      }\n\n      return updateRegistration;\n    }()\n  }, {\n    key: \"updateRegistrations\",\n    value: function updateRegistrations() {\n      var _this2 = this;\n\n      logger_1.log.trace(\"refreshing \".concat(this.registrations.size, \" registrations\"));\n      this.registrations.forEach(function (context, id) {\n        _this2.updateRegistration(id, context);\n      });\n    }\n  }, {\n    key: \"setNotificationsContext\",\n    value: function setNotificationsContext(contextId, context) {\n      if (!contextId || !context) {\n        throw new twilsockerror_1.TwilsockError('Invalid arguments provided');\n      }\n\n      this.registrations.set(contextId, context);\n\n      if (this.transport.isConnected) {\n        this.updateRegistration(contextId, context);\n      }\n    }\n  }, {\n    key: \"removeNotificationsContext\",\n    value: function () {\n      var _removeNotificationsContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(contextId) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.registrations.has(contextId)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                _context4.next = 4;\n                return this.deleteNotificationContext(contextId);\n\n              case 4:\n                if (this.transport.isConnected) {\n                  this.registrations.delete(contextId);\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function removeNotificationsContext(_x6) {\n        return _removeNotificationsContext.apply(this, arguments);\n      }\n\n      return removeNotificationsContext;\n    }()\n  }]);\n\n  return Registrations;\n}(events_1.EventEmitter);\n\nexports.Registrations = Registrations;","map":null,"metadata":{},"sourceType":"script"}