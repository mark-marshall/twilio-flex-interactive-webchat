{"ast":null,"code":"import _classCallCheck from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/clickableMessages.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as FlexWebChat from '@twilio/flex-webchat-ui';\nvar wrapper = {\n  display: 'block',\n  overflowX: 'hidden',\n  justifyContent: 'center',\n  width: '40%'\n};\nvar bubble = {\n  paddingLeft: '12px',\n  paddingRight: '12px',\n  color: 'black',\n  paddingTop: '5px',\n  paddingBottom: '8px',\n  margin: '5px 10px',\n  position: 'relative',\n  overflowX: 'hidden',\n  display: 'flex',\n  background: '#eeeeee',\n  borderRadius: '6px',\n  fontSize: '1em'\n};\n\nvar ClickableMessages = /*#__PURE__*/function (_React$Component) {\n  _inherits(ClickableMessages, _React$Component);\n\n  var _super = _createSuper(ClickableMessages);\n\n  function ClickableMessages(props) {\n    var _this;\n\n    _classCallCheck(this, ClickableMessages);\n\n    _this = _super.call(this);\n    _this.props = props;\n    return _this;\n  } // We are going to get the channel, then add a channel listener (to subscribe to) any time there are updates to\n  // the attributes of the channel.  From there we will push the updated clickableMessages object into redux\n  // and that is how we are rendering button/component changes as the studio flow push new objects throughout the flow!\n\n\n  _createClass(ClickableMessages, [{\n    key: \"getChannelAttributes\",\n    value: function getChannelAttributes() {\n      var dispatch = this.props.dispatch;\n      FlexWebChat.manager.chatClient.getChannelBySid(this.props.channelSid).then(function (channel) {\n        channel.on('updated', function (_ref) {\n          var channel = _ref.channel,\n              updateReasons = _ref.updateReasons;\n\n          if (updateReasons.indexOf('attributes') !== -1 && channel.attributes.status === \"INACTIVE\") {\n            FlexWebChat.Actions.invokeAction('RestartEngagement');\n            return;\n          }\n\n          if (undefined !== channel.attributes.clickableMessages && updateReasons.indexOf('attributes') !== -1) {\n            dispatch({\n              type: 'SET_CLICKABLE_MESSAGES',\n              payload: {\n                clickableMessages: channel.attributes.clickableMessages\n              }\n            });\n          }\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var channelSid = this.props.channelSid;\n      var dispatch = this.props.dispatch;\n      this.getChannelAttributes();\n      return this.props.clickableMessages ? /*#__PURE__*/React.createElement(\"div\", {\n        className: \"generatedAnswers\",\n        style: wrapper,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 9\n        }\n      }, this.props.clickableMessages.map(function (m) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"generatedAnswerBubble\",\n          style: bubble,\n          onClick: function onClick(e) {\n            // This removes all the clickable messages on click to reset the buttons\n            dispatch({\n              type: 'SET_CLICKABLE_MESSAGES',\n              payload: {\n                clickableMessages: []\n              }\n            }); // Once they click the button, we will post that as the message in the chat\n\n            FlexWebChat.manager.chatClient.getChannelBySid(channelSid).then(function (channel) {\n              channel.sendMessage(m.message);\n            });\n          },\n          key: m.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 15\n          }\n        }, m.message);\n      })) : null;\n    }\n  }]);\n\n  return ClickableMessages;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var channelSid = state.flex.session.channelSid;\n  return {\n    clickableMessages: state.custom.clickableMessages,\n    channelSid: channelSid\n  };\n};\n\nexport default connect(mapStateToProps)(ClickableMessages);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/clickableMessages.js"],"names":["React","connect","FlexWebChat","wrapper","display","overflowX","justifyContent","width","bubble","paddingLeft","paddingRight","color","paddingTop","paddingBottom","margin","position","background","borderRadius","fontSize","ClickableMessages","props","dispatch","manager","chatClient","getChannelBySid","channelSid","then","channel","on","updateReasons","indexOf","attributes","status","Actions","invokeAction","undefined","clickableMessages","type","payload","getChannelAttributes","map","m","e","sendMessage","message","Component","mapStateToProps","state","flex","session","custom"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport * as FlexWebChat from '@twilio/flex-webchat-ui';\n\nconst wrapper = {\n    display: 'block',\n    overflowX: 'hidden',\n    justifyContent: 'center',\n    width: '40%'\n}\n\nconst bubble = {\n    paddingLeft: '12px',\n    paddingRight: '12px',\n    color: 'black',\n    paddingTop: '5px',\n    paddingBottom: '8px',\n    margin: '5px 10px',\n    position: 'relative',\n    overflowX: 'hidden',\n    display: 'flex',\n    background: '#eeeeee',\n    borderRadius: '6px',\n    fontSize: '1em'\n}\n\nclass ClickableMessages extends React.Component {\n  constructor(props) {\n    super();\n    this.props = props;\n  }\n\n  // We are going to get the channel, then add a channel listener (to subscribe to) any time there are updates to\n  // the attributes of the channel.  From there we will push the updated clickableMessages object into redux\n  // and that is how we are rendering button/component changes as the studio flow push new objects throughout the flow!\n  getChannelAttributes() {\n    const dispatch = this.props.dispatch; \n\n    FlexWebChat.manager.chatClient.getChannelBySid(this.props.channelSid)\n    .then(channel => {\n      channel.on('updated', ({ channel, updateReasons }) => {\n        if ( updateReasons.indexOf('attributes') !== -1 &&channel.attributes.status === \"INACTIVE\") {\n          FlexWebChat.Actions.invokeAction('RestartEngagement');\n          return;\n        }\n        if (undefined !== channel.attributes.clickableMessages && (updateReasons.indexOf('attributes') !== -1)) {\n          dispatch({\n            type: 'SET_CLICKABLE_MESSAGES',\n            payload: {\n              clickableMessages: channel.attributes.clickableMessages\n            }\n          })\n        }\n      });\n    })\n  }\n\n  render() {\n    const channelSid = this.props.channelSid;\n    const dispatch = this.props.dispatch; \n\n    this.getChannelAttributes();\n\n    return (\n      this.props.clickableMessages ?\n        <div className=\"generatedAnswers\" style={wrapper}>\n          { this.props.clickableMessages.map(function(m) {\n            return (\n              <div className=\"generatedAnswerBubble\" style={bubble} onClick={(e) => {\n                // This removes all the clickable messages on click to reset the buttons\n                dispatch({\n                  type: 'SET_CLICKABLE_MESSAGES',\n                  payload: { clickableMessages: [] }\n                })\n                // Once they click the button, we will post that as the message in the chat\n                FlexWebChat.manager.chatClient.getChannelBySid(channelSid)\n                .then(channel => {\n                  channel.sendMessage(m.message);\n                });                 \n              }} key={m.message}>\n                {m.message}\n              </div>\n            );\n          }) }\n        </div> : null\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  let channelSid = state.flex.session.channelSid;\n\n  return { \n    clickableMessages: state.custom.clickableMessages,\n    channelSid\n  }\n}\n\nexport default connect(mapStateToProps)(ClickableMessages);"]},"metadata":{},"sourceType":"module"}