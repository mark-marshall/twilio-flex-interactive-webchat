{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.apply = exports.InvalidOperationError = exports.test = exports.copy = exports.move = exports.replace = exports.remove = exports.add = exports.TestError = exports.MissingError = void 0;\n\nvar pointer_1 = require(\"./pointer\");\n\nvar util_1 = require(\"./util\");\n\nvar equal_1 = require(\"./equal\");\n\nvar MissingError =\n/** @class */\nfunction (_super) {\n  __extends(MissingError, _super);\n\n  function MissingError(path) {\n    var _this = _super.call(this, \"Value required at path: \" + path) || this;\n\n    _this.path = path;\n    _this.name = 'MissingError';\n    return _this;\n  }\n\n  return MissingError;\n}(Error);\n\nexports.MissingError = MissingError;\n\nvar TestError =\n/** @class */\nfunction (_super) {\n  __extends(TestError, _super);\n\n  function TestError(actual, expected) {\n    var _this = _super.call(this, \"Test failed: \" + actual + \" != \" + expected) || this;\n\n    _this.actual = actual;\n    _this.expected = expected;\n    _this.name = 'TestError';\n    return _this;\n  }\n\n  return TestError;\n}(Error);\n\nexports.TestError = TestError;\n\nfunction _add(object, key, value) {\n  if (Array.isArray(object)) {\n    // `key` must be an index\n    if (key == '-') {\n      object.push(value);\n    } else {\n      var index = parseInt(key, 10);\n      object.splice(index, 0, value);\n    }\n  } else {\n    object[key] = value;\n  }\n}\n\nfunction _remove(object, key) {\n  if (Array.isArray(object)) {\n    // '-' syntax doesn't make sense when removing\n    var index = parseInt(key, 10);\n    object.splice(index, 1);\n  } else {\n    // not sure what the proper behavior is when path = ''\n    delete object[key];\n  }\n}\n/**\n>  o  If the target location specifies an array index, a new value is\n>     inserted into the array at the specified index.\n>  o  If the target location specifies an object member that does not\n>     already exist, a new member is added to the object.\n>  o  If the target location specifies an object member that does exist,\n>     that member's value is replaced.\n*/\n\n\nfunction add(object, operation) {\n  var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object); // it's not exactly a \"MissingError\" in the same way that `remove` is -- more like a MissingParent, or something\n\n  if (endpoint.parent === undefined) {\n    return new MissingError(operation.path);\n  }\n\n  _add(endpoint.parent, endpoint.key, util_1.clone(operation.value));\n\n  return null;\n}\n\nexports.add = add;\n/**\n> The \"remove\" operation removes the value at the target location.\n> The target location MUST exist for the operation to be successful.\n*/\n\nfunction remove(object, operation) {\n  // endpoint has parent, key, and value properties\n  var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n\n  if (endpoint.value === undefined) {\n    return new MissingError(operation.path);\n  } // not sure what the proper behavior is when path = ''\n\n\n  _remove(endpoint.parent, endpoint.key);\n\n  return null;\n}\n\nexports.remove = remove;\n/**\n> The \"replace\" operation replaces the value at the target location\n> with a new value.  The operation object MUST contain a \"value\" member\n> whose content specifies the replacement value.\n> The target location MUST exist for the operation to be successful.\n\n> This operation is functionally identical to a \"remove\" operation for\n> a value, followed immediately by an \"add\" operation at the same\n> location with the replacement value.\n\nEven more simply, it's like the add operation with an existence check.\n*/\n\nfunction replace(object, operation) {\n  var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n\n  if (endpoint.parent === null) {\n    return new MissingError(operation.path);\n  } // this existence check treats arrays as a special case\n\n\n  if (Array.isArray(endpoint.parent)) {\n    if (parseInt(endpoint.key, 10) >= endpoint.parent.length) {\n      return new MissingError(operation.path);\n    }\n  } else if (endpoint.value === undefined) {\n    return new MissingError(operation.path);\n  }\n\n  endpoint.parent[endpoint.key] = operation.value;\n  return null;\n}\n\nexports.replace = replace;\n/**\n> The \"move\" operation removes the value at a specified location and\n> adds it to the target location.\n> The operation object MUST contain a \"from\" member, which is a string\n> containing a JSON Pointer value that references the location in the\n> target document to move the value from.\n> This operation is functionally identical to a \"remove\" operation on\n> the \"from\" location, followed immediately by an \"add\" operation at\n> the target location with the value that was just removed.\n\n> The \"from\" location MUST NOT be a proper prefix of the \"path\"\n> location; i.e., a location cannot be moved into one of its children.\n\nTODO: throw if the check described in the previous paragraph fails.\n*/\n\nfunction move(object, operation) {\n  var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);\n\n  if (from_endpoint.value === undefined) {\n    return new MissingError(operation.from);\n  }\n\n  var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n\n  if (endpoint.parent === undefined) {\n    return new MissingError(operation.path);\n  }\n\n  _remove(from_endpoint.parent, from_endpoint.key);\n\n  _add(endpoint.parent, endpoint.key, from_endpoint.value);\n\n  return null;\n}\n\nexports.move = move;\n/**\n> The \"copy\" operation copies the value at a specified location to the\n> target location.\n> The operation object MUST contain a \"from\" member, which is a string\n> containing a JSON Pointer value that references the location in the\n> target document to copy the value from.\n> The \"from\" location MUST exist for the operation to be successful.\n\n> This operation is functionally identical to an \"add\" operation at the\n> target location using the value specified in the \"from\" member.\n\nAlternatively, it's like 'move' without the 'remove'.\n*/\n\nfunction copy(object, operation) {\n  var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);\n\n  if (from_endpoint.value === undefined) {\n    return new MissingError(operation.from);\n  }\n\n  var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n\n  if (endpoint.parent === undefined) {\n    return new MissingError(operation.path);\n  }\n\n  _add(endpoint.parent, endpoint.key, util_1.clone(from_endpoint.value));\n\n  return null;\n}\n\nexports.copy = copy;\n/**\n> The \"test\" operation tests that a value at the target location is\n> equal to a specified value.\n> The operation object MUST contain a \"value\" member that conveys the\n> value to be compared to the target location's value.\n> The target location MUST be equal to the \"value\" value for the\n> operation to be considered successful.\n*/\n\nfunction test(object, operation) {\n  var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);\n  var result = equal_1.compare(endpoint.value, operation.value);\n\n  if (!result) {\n    return new TestError(endpoint.value, operation.value);\n  }\n\n  return null;\n}\n\nexports.test = test;\n\nvar InvalidOperationError =\n/** @class */\nfunction (_super) {\n  __extends(InvalidOperationError, _super);\n\n  function InvalidOperationError(operation) {\n    var _this = _super.call(this, \"Invalid operation: \" + operation.op) || this;\n\n    _this.operation = operation;\n    _this.name = 'InvalidOperationError';\n    return _this;\n  }\n\n  return InvalidOperationError;\n}(Error);\n\nexports.InvalidOperationError = InvalidOperationError;\n/**\nSwitch on `operation.op`, applying the corresponding patch function for each\ncase to `object`.\n*/\n\nfunction apply(object, operation) {\n  // not sure why TypeScript can't infer typesafety of:\n  //   {add, remove, replace, move, copy, test}[operation.op](object, operation)\n  // (seems like a bug)\n  switch (operation.op) {\n    case 'add':\n      return add(object, operation);\n\n    case 'remove':\n      return remove(object, operation);\n\n    case 'replace':\n      return replace(object, operation);\n\n    case 'move':\n      return move(object, operation);\n\n    case 'copy':\n      return copy(object, operation);\n\n    case 'test':\n      return test(object, operation);\n  }\n\n  return new InvalidOperationError(operation);\n}\n\nexports.apply = apply;","map":null,"metadata":{},"sourceType":"script"}