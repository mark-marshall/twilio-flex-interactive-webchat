{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar WebSocketChannel = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(WebSocketChannel, _events_1$EventEmitte);\n\n  function WebSocketChannel(url) {\n    var _this;\n\n    _classCallCheck(this, WebSocketChannel);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(WebSocketChannel).call(this));\n    _this.url = url;\n    _this.WebSocket = global['WebSocket'] || global['MozWebSocket'] || require('ws');\n    return _this;\n  }\n\n  _createClass(WebSocketChannel, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      logger_1.log.trace('connecting to socket');\n      var socket;\n\n      try {\n        socket = new this.WebSocket(this.url);\n      } catch (e) {\n        logger_1.log.debug(\"Socket error: \".concat(this.url));\n        this.emit('socketError', e);\n        return;\n      }\n\n      socket.binaryType = 'arraybuffer';\n\n      socket.onopen = function () {\n        logger_1.log.debug(\"socket opened \".concat(_this2.url));\n\n        _this2.emit('connected');\n      };\n\n      socket.onclose = function (e) {\n        logger_1.log.debug('socket closed', e);\n\n        _this2.emit('disconnected', e);\n      };\n\n      socket.onerror = function (e) {\n        logger_1.log.debug('Socket error:', e);\n\n        _this2.emit('socketError', e);\n      };\n\n      socket.onmessage = function (message) {\n        _this2.emit('message', message.data);\n      };\n\n      this.socket = socket;\n    }\n  }, {\n    key: \"send\",\n    value: function send(message) {\n      this.socket.send(message);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      logger_1.log.trace('closing socket');\n\n      if (this.socket) {\n        this.socket.onopen = null;\n        this.socket.onclose = null;\n        this.socket.onerror = null;\n        this.socket.onmessage = null;\n\n        try {\n          this.socket.close();\n        } finally {}\n      }\n    }\n  }, {\n    key: \"isConnected\",\n    get: function get() {\n      return this.socket && this.socket.readyState === 1;\n    }\n  }]);\n\n  return WebSocketChannel;\n}(events_1.EventEmitter);\n\nexports.WebSocketChannel = WebSocketChannel;","map":null,"metadata":{},"sourceType":"script"}