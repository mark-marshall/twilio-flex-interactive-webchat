{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"calendars\", \"className\", \"currentlySelectingRangeEnd\", \"date\", \"DateInputProps\", \"defaultCalendarMonth\", \"disableAutoMonthSwitching\", \"disableFuture\", \"disableHighlightToday\", \"disablePast\", \"endText\", \"isMobileKeyboardViewOpen\", \"maxDate\", \"minDate\", \"onDateChange\", \"onMonthChange\", \"open\", \"reduceAnimations\", \"setCurrentlySelectingRangeEnd\", \"shouldDisableDate\", \"showToolbar\", \"startText\", \"toggleMobileKeyboardView\", \"toolbarFormat\", \"toolbarTitle\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isRangeValid } from '../internal/pickers/date-utils';\nimport { calculateRangeChange } from './date-range-manager';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport DateRangePickerToolbar from './DateRangePickerToolbar';\nimport { useCalendarState } from '../CalendarPicker/useCalendarState';\nimport { DateRangePickerViewMobile } from './DateRangePickerViewMobile';\nimport { WrapperVariantContext } from '../internal/pickers/wrappers/WrapperVariantContext';\nimport { MobileKeyboardInputView } from '../internal/pickers/Picker/Picker';\nimport DateRangePickerInput from './DateRangePickerInput';\nimport { defaultReduceAnimations } from '../CalendarPicker/CalendarPicker';\nimport DateRangePickerViewDesktop from './DateRangePickerViewDesktop';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n/**\n * @ignore - internal component.\n */\n\nexport function DateRangePickerView(props) {\n  var calendars = props.calendars,\n      className = props.className,\n      currentlySelectingRangeEnd = props.currentlySelectingRangeEnd,\n      date = props.date,\n      DateInputProps = props.DateInputProps,\n      defaultCalendarMonth = props.defaultCalendarMonth,\n      _props$disableAutoMon = props.disableAutoMonthSwitching,\n      disableAutoMonthSwitching = _props$disableAutoMon === void 0 ? false : _props$disableAutoMon,\n      disableFuture = props.disableFuture,\n      disableHighlightToday = props.disableHighlightToday,\n      disablePast = props.disablePast,\n      endText = props.endText,\n      isMobileKeyboardViewOpen = props.isMobileKeyboardViewOpen,\n      maxDate = props.maxDate,\n      minDate = props.minDate,\n      onDateChange = props.onDateChange,\n      onMonthChange = props.onMonthChange,\n      open = props.open,\n      _props$reduceAnimatio = props.reduceAnimations,\n      reduceAnimations = _props$reduceAnimatio === void 0 ? defaultReduceAnimations : _props$reduceAnimatio,\n      setCurrentlySelectingRangeEnd = props.setCurrentlySelectingRangeEnd,\n      shouldDisableDate = props.shouldDisableDate,\n      showToolbar = props.showToolbar,\n      startText = props.startText,\n      toggleMobileKeyboardView = props.toggleMobileKeyboardView,\n      toolbarFormat = props.toolbarFormat,\n      toolbarTitle = props.toolbarTitle,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var utils = useUtils();\n  var wrapperVariant = React.useContext(WrapperVariantContext);\n\n  var _date = _slicedToArray(date, 2),\n      start = _date[0],\n      end = _date[1];\n\n  var _useCalendarState = useCalendarState({\n    date: start || end,\n    defaultCalendarMonth: defaultCalendarMonth,\n    disableFuture: disableFuture,\n    disablePast: disablePast,\n    disableSwitchToMonthOnDayFocus: true,\n    maxDate: maxDate,\n    minDate: minDate,\n    onMonthChange: onMonthChange,\n    reduceAnimations: reduceAnimations,\n    shouldDisableDate: shouldDisableDate\n  }),\n      changeMonth = _useCalendarState.changeMonth,\n      calendarState = _useCalendarState.calendarState,\n      isDateDisabled = _useCalendarState.isDateDisabled,\n      onMonthSwitchingAnimationEnd = _useCalendarState.onMonthSwitchingAnimationEnd,\n      changeFocusedDay = _useCalendarState.changeFocusedDay;\n\n  var toShowToolbar = showToolbar != null ? showToolbar : wrapperVariant !== 'desktop';\n\n  var scrollToDayIfNeeded = function scrollToDayIfNeeded(day) {\n    if (!day || !utils.isValid(day) || isDateDisabled(day)) {\n      return;\n    }\n\n    var currentlySelectedDate = currentlySelectingRangeEnd === 'start' ? start : end;\n\n    if (currentlySelectedDate === null) {\n      // do not scroll if one of ages is not selected\n      return;\n    }\n\n    var displayingMonthRange = wrapperVariant === 'mobile' ? 0 : calendars - 1;\n    var currentMonthNumber = utils.getMonth(calendarState.currentMonth);\n    var requestedMonthNumber = utils.getMonth(day);\n\n    if (!utils.isSameYear(calendarState.currentMonth, day) || requestedMonthNumber < currentMonthNumber || requestedMonthNumber > currentMonthNumber + displayingMonthRange) {\n      var newMonth = currentlySelectingRangeEnd === 'start' ? currentlySelectedDate : // If need to focus end, scroll to the state when \"end\" is displaying in the last calendar\n      utils.addMonths(currentlySelectedDate, -displayingMonthRange);\n      changeMonth(newMonth);\n    }\n  };\n\n  React.useEffect(function () {\n    if (disableAutoMonthSwitching || !open) {\n      return;\n    }\n\n    scrollToDayIfNeeded(currentlySelectingRangeEnd === 'start' ? start : end);\n  }, [currentlySelectingRangeEnd, date]); // eslint-disable-line\n\n  var handleChange = React.useCallback(function (newDate) {\n    var _calculateRangeChange = calculateRangeChange({\n      newDate: newDate,\n      utils: utils,\n      range: date,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd\n    }),\n        nextSelection = _calculateRangeChange.nextSelection,\n        newRange = _calculateRangeChange.newRange;\n\n    setCurrentlySelectingRangeEnd(nextSelection);\n    var isFullRangeSelected = currentlySelectingRangeEnd === 'end' && isRangeValid(utils, newRange);\n    onDateChange(newRange, wrapperVariant, isFullRangeSelected ? 'finish' : 'partial');\n  }, [currentlySelectingRangeEnd, date, onDateChange, setCurrentlySelectingRangeEnd, utils, wrapperVariant]);\n\n  var renderView = function renderView() {\n    var sharedCalendarProps = _extends({\n      date: date,\n      isDateDisabled: isDateDisabled,\n      changeFocusedDay: changeFocusedDay,\n      onChange: handleChange,\n      reduceAnimations: reduceAnimations,\n      disableHighlightToday: disableHighlightToday,\n      onMonthSwitchingAnimationEnd: onMonthSwitchingAnimationEnd,\n      changeMonth: changeMonth,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      disableFuture: disableFuture,\n      disablePast: disablePast,\n      minDate: minDate,\n      maxDate: maxDate\n    }, calendarState, other);\n\n    switch (wrapperVariant) {\n      case 'desktop':\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewDesktop, _extends({\n            calendars: calendars\n          }, sharedCalendarProps));\n        }\n\n      default:\n        {\n          return /*#__PURE__*/_jsx(DateRangePickerViewMobile, _extends({}, sharedCalendarProps));\n        }\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: className,\n    children: [toShowToolbar && /*#__PURE__*/_jsx(DateRangePickerToolbar, {\n      date: date,\n      isMobileKeyboardViewOpen: isMobileKeyboardViewOpen,\n      toggleMobileKeyboardView: toggleMobileKeyboardView,\n      currentlySelectingRangeEnd: currentlySelectingRangeEnd,\n      setCurrentlySelectingRangeEnd: setCurrentlySelectingRangeEnd,\n      startText: startText,\n      endText: endText,\n      toolbarTitle: toolbarTitle,\n      toolbarFormat: toolbarFormat\n    }), isMobileKeyboardViewOpen ? /*#__PURE__*/_jsx(MobileKeyboardInputView, {\n      children: /*#__PURE__*/_jsx(DateRangePickerInput, _extends({\n        disableOpenPicker: true,\n        ignoreInvalidInputs: true\n      }, DateInputProps))\n    }) : renderView()]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? DateRangePickerView.propTypes = {\n  calendars: PropTypes.oneOf([1, 2, 3]),\n  disableAutoMonthSwitching: PropTypes.bool\n} : void 0;","map":null,"metadata":{},"sourceType":"module"}