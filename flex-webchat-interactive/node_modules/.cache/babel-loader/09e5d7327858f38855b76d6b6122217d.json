{"ast":null,"code":"import _toConsumableArray from \"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"children\", \"className\", \"component\", \"columns\", \"spacing\", \"defaultColumns\", \"defaultHeight\", \"defaultSpacing\"];\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport { styled, useThemeProps } from '@mui/material/styles';\nimport { createUnarySpacing, getValue, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { deepmerge, unstable_useForkRef as useForkRef } from '@mui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { getMasonryUtilityClass } from './masonryClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var parseToNumber = function parseToNumber(val) {\n  return Number(val.replace('px', ''));\n};\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getMasonryUtilityClass, classes);\n};\n\nexport var getStyle = function getStyle(_ref) {\n  var ownerState = _ref.ownerState,\n      theme = _ref.theme;\n  var styles = {\n    width: '100%',\n    display: 'flex',\n    flexFlow: 'column wrap',\n    alignContent: 'space-between',\n    boxSizing: 'border-box',\n    '& > *': {\n      boxSizing: 'border-box'\n    }\n  };\n  var stylesSSR = {};\n\n  if (ownerState.isSSR) {\n    var orderStyleSSR = {};\n    var defaultSpacing = Number(theme.spacing(ownerState.defaultSpacing).replace('px', ''));\n\n    for (var i = 1; i <= ownerState.defaultColumns; i += 1) {\n      orderStyleSSR[\"&:nth-of-type(\".concat(ownerState.defaultColumns, \"n+\").concat(i % ownerState.defaultColumns, \")\")] = {\n        order: i\n      };\n    }\n\n    stylesSSR.height = ownerState.defaultHeight;\n    stylesSSR.margin = -(defaultSpacing / 2);\n    stylesSSR['& > *'] = _extends({}, styles['& > *'], orderStyleSSR, {\n      margin: defaultSpacing / 2,\n      width: \"calc(\".concat((100 / ownerState.defaultColumns).toFixed(2), \"% - \").concat(defaultSpacing, \"px)\")\n    });\n    return _extends({}, styles, stylesSSR);\n  }\n\n  var spacingValues = resolveBreakpointValues({\n    values: ownerState.spacing,\n    breakpoints: theme.breakpoints.values\n  });\n  var transformer = createUnarySpacing(theme);\n\n  var spacingStyleFromPropValue = function spacingStyleFromPropValue(propValue) {\n    var themeSpacingValue = Number(propValue);\n    var spacing = Number(getValue(transformer, themeSpacingValue).replace('px', ''));\n    return _extends({\n      margin: -(spacing / 2),\n      '& > *': {\n        margin: spacing / 2\n      }\n    }, ownerState.maxColumnHeight && {\n      height: Math.ceil(ownerState.maxColumnHeight + spacing)\n    });\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme: theme\n  }, spacingValues, spacingStyleFromPropValue));\n  var columnValues = resolveBreakpointValues({\n    values: ownerState.columns,\n    breakpoints: theme.breakpoints.values\n  });\n\n  var columnStyleFromPropValue = function columnStyleFromPropValue(propValue) {\n    var columnValue = Number(propValue);\n    var width = \"\".concat((100 / columnValue).toFixed(2), \"%\");\n    var spacing = typeof spacingValues !== 'object' ? getValue(transformer, Number(spacingValues)) : '0px';\n    return {\n      '& > *': {\n        width: \"calc(\".concat(width, \" - \").concat(spacing, \")\")\n      }\n    };\n  };\n\n  styles = deepmerge(styles, handleBreakpoints({\n    theme: theme\n  }, columnValues, columnStyleFromPropValue)); // configure width for responsive spacing values\n\n  if (typeof spacingValues === 'object') {\n    styles = deepmerge(styles, handleBreakpoints({\n      theme: theme\n    }, spacingValues, function (propValue, breakpoint) {\n      if (breakpoint) {\n        var themeSpacingValue = Number(propValue);\n        var lastBreakpoint = Object.keys(columnValues).pop();\n        var spacing = getValue(transformer, themeSpacingValue);\n        var column = typeof columnValues === 'object' ? columnValues[breakpoint] || columnValues[lastBreakpoint] : columnValues;\n        var width = \"\".concat((100 / column).toFixed(2), \"%\");\n        return {\n          '& > *': {\n            width: \"calc(\".concat(width, \" - \").concat(spacing, \")\")\n          }\n        };\n      }\n\n      return null;\n    }));\n  }\n\n  return styles;\n};\nvar MasonryRoot = styled('div', {\n  name: 'MuiMasonry',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return [styles.root];\n  }\n})(getStyle);\nvar Masonry = /*#__PURE__*/React.forwardRef(function Masonry(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiMasonry'\n  });\n\n  var children = props.children,\n      className = props.className,\n      _props$component = props.component,\n      component = _props$component === void 0 ? 'div' : _props$component,\n      _props$columns = props.columns,\n      columns = _props$columns === void 0 ? 4 : _props$columns,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 1 : _props$spacing,\n      defaultColumns = props.defaultColumns,\n      defaultHeight = props.defaultHeight,\n      defaultSpacing = props.defaultSpacing,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var masonryRef = React.useRef();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      maxColumnHeight = _React$useState2[0],\n      setMaxColumnHeight = _React$useState2[1];\n\n  var isSSR = !maxColumnHeight && defaultHeight && defaultColumns !== undefined && defaultSpacing !== undefined;\n\n  var _React$useState3 = React.useState(isSSR ? defaultColumns - 1 : 0),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      numberOfLineBreaks = _React$useState4[0],\n      setNumberOfLineBreaks = _React$useState4[1];\n\n  var ownerState = _extends({}, props, {\n    spacing: spacing,\n    columns: columns,\n    maxColumnHeight: maxColumnHeight,\n    defaultColumns: defaultColumns,\n    defaultHeight: defaultHeight,\n    defaultSpacing: defaultSpacing,\n    isSSR: isSSR\n  });\n\n  var classes = useUtilityClasses(ownerState);\n\n  var handleResize = function handleResize(masonryChildren) {\n    if (!masonryRef.current || !masonryChildren || masonryChildren.length === 0) {\n      return;\n    }\n\n    var masonry = masonryRef.current;\n    var masonryFirstChild = masonryRef.current.firstChild;\n    var parentWidth = masonry.clientWidth;\n    var firstChildWidth = masonryFirstChild.clientWidth;\n\n    if (parentWidth === 0 || firstChildWidth === 0) {\n      return;\n    }\n\n    var firstChildComputedStyle = window.getComputedStyle(masonryFirstChild);\n    var firstChildMarginLeft = parseToNumber(firstChildComputedStyle.marginLeft);\n    var firstChildMarginRight = parseToNumber(firstChildComputedStyle.marginRight);\n    var currentNumberOfColumns = Math.round(parentWidth / (firstChildWidth + firstChildMarginLeft + firstChildMarginRight));\n    var columnHeights = new Array(currentNumberOfColumns).fill(0);\n    var skip = false;\n    masonry.childNodes.forEach(function (child) {\n      if (child.nodeType !== Node.ELEMENT_NODE || child.dataset.class === 'line-break' || skip) {\n        return;\n      }\n\n      var childComputedStyle = window.getComputedStyle(child);\n      var childMarginTop = parseToNumber(childComputedStyle.marginTop);\n      var childMarginBottom = parseToNumber(childComputedStyle.marginBottom); // if any one of children isn't rendered yet, masonry's height shouldn't be computed yet\n\n      var childHeight = parseToNumber(childComputedStyle.height) ? Math.ceil(parseToNumber(childComputedStyle.height)) + childMarginTop + childMarginBottom : 0;\n\n      if (childHeight === 0) {\n        skip = true;\n        return;\n      } // if there is a nested image that isn't rendered yet, masonry's height shouldn't be computed yet\n\n\n      for (var i = 0; i < child.childNodes.length; i += 1) {\n        var nestedChild = child.childNodes[i];\n\n        if (nestedChild.tagName === 'IMG' && nestedChild.clientHeight === 0) {\n          skip = true;\n          break;\n        }\n      }\n\n      if (!skip) {\n        // find the current shortest column (where the current item will be placed)\n        var currentMinColumnIndex = columnHeights.indexOf(Math.min.apply(Math, _toConsumableArray(columnHeights)));\n        columnHeights[currentMinColumnIndex] += childHeight;\n        var order = currentMinColumnIndex + 1;\n        child.style.order = order;\n      }\n    });\n\n    if (!skip) {\n      setMaxColumnHeight(Math.max.apply(Math, _toConsumableArray(columnHeights)));\n      var numOfLineBreaks = currentNumberOfColumns > 0 ? currentNumberOfColumns - 1 : 0;\n      setNumberOfLineBreaks(numOfLineBreaks);\n    }\n  };\n\n  var observer = React.useRef(typeof ResizeObserver === 'undefined' ? undefined : new ResizeObserver(handleResize));\n  React.useEffect(function () {\n    var resizeObserver = observer.current; // IE and old browsers are not supported\n\n    if (resizeObserver === undefined) {\n      return undefined;\n    }\n\n    if (masonryRef.current) {\n      masonryRef.current.childNodes.forEach(function (childNode) {\n        resizeObserver.observe(childNode);\n      });\n    }\n\n    return function () {\n      return resizeObserver ? resizeObserver.disconnect() : {};\n    };\n  }, [columns, spacing, children]);\n  var handleRef = useForkRef(ref, masonryRef);\n  var lineBreakStyle = {\n    flexBasis: '100%',\n    width: 0,\n    margin: 0,\n    padding: 0\n  }; //  columns are likely to have different heights and hence can start to merge;\n  //  a line break at the end of each column prevents columns from merging\n\n  var lineBreaks = new Array(numberOfLineBreaks).fill('').map(function (_, index) {\n    return /*#__PURE__*/_jsx(\"span\", {\n      \"data-class\": \"line-break\",\n      style: _extends({}, lineBreakStyle, {\n        order: index + 1\n      })\n    }, index);\n  });\n  return /*#__PURE__*/_jsxs(MasonryRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ref: handleRef,\n    ownerState: ownerState\n  }, other, {\n    children: [children, lineBreaks]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Masonry.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Number of columns.\n   * @default 4\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The default number of columns of the component. This is provided for server-side rendering.\n   */\n  defaultColumns: PropTypes.number,\n\n  /**\n   * The default height of the component in px. This is provided for server-side rendering.\n   */\n  defaultHeight: PropTypes.number,\n\n  /**\n   * The default spacing of the component. Like `spacing`, it is a factor of the theme's spacing. This is provided for server-side rendering.\n   */\n  defaultSpacing: PropTypes.number,\n\n  /**\n   * Defines the space between children. It is a factor of the theme's spacing.\n   * @default 1\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * Allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Masonry;","map":null,"metadata":{},"sourceType":"module"}