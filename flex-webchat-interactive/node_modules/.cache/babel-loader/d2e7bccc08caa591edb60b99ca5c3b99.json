{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar operation_retrier_1 = require(\"operation-retrier\");\n\nvar logger_1 = require(\"../logger\");\n\nvar configuration_1 = require(\"../configuration\");\n\nvar log = logger_1.Logger.scope('Network');\n\nvar Network = /*#__PURE__*/function () {\n  function Network(config, transport) {\n    _classCallCheck(this, Network);\n\n    this.config = config;\n    this.transport = transport;\n  }\n\n  _createClass(Network, [{\n    key: \"backoffConfig\",\n    value: function backoffConfig() {\n      return Object.assign(configuration_1.Configuration.backoffConfigDefault, this.config.backoffConfigOverride);\n    }\n  }, {\n    key: \"retryWhenThrottled\",\n    value: function retryWhenThrottled() {\n      if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {\n        return this.config.retryWhenThrottledOverride;\n      }\n\n      if (typeof configuration_1.Configuration.retryWhenThrottledDefault !== 'undefined') {\n        return configuration_1.Configuration.retryWhenThrottledDefault;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"executeWithRetry\",\n    value: function executeWithRetry(request) {\n      var _this = this;\n\n      var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return new Promise(function (resolve, reject) {\n        var codesToRetryOn = [502, 503, 504];\n\n        if (retryWhenThrottled) {\n          codesToRetryOn.push(429);\n        }\n\n        var retrier = new operation_retrier_1.Retrier(_this.backoffConfig());\n        retrier.on('attempt', function () {\n          request().then(function (result) {\n            return retrier.succeeded(result);\n          }).catch(function (err) {\n            if (codesToRetryOn.indexOf(err.status) > -1) {\n              retrier.failed(err);\n            } else if (err.message === 'Twilsock disconnected') {\n              // Ugly hack. We must make a proper exceptions for twilsock\n              retrier.failed(err);\n            } else {\n              // Fatal error\n              retrier.removeAllListeners();\n              retrier.cancel();\n              reject(err);\n            }\n          });\n        });\n        retrier.on('succeeded', function (result) {\n          resolve(result);\n        });\n        retrier.on('cancelled', function (err) {\n          return reject(err);\n        });\n        retrier.on('failed', function (err) {\n          return reject(err);\n        });\n        retrier.start();\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n        var _this2 = this;\n\n        var headers, response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                headers = {\n                  'X-Twilio-Token': this.config.token\n                };\n                log.trace('sending GET request to ', url, ' headers ', headers);\n                _context.next = 4;\n                return this.executeWithRetry(function () {\n                  return _this2.transport.get(url, headers);\n                }, this.retryWhenThrottled());\n\n              case 4:\n                response = _context.sent;\n                log.trace('response', response);\n                return _context.abrupt(\"return\", response);\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"post\",\n    value: function () {\n      var _post = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(url, media, contentType) {\n        var headers, response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                headers = {\n                  'X-Twilio-Token': this.config.token\n                };\n\n                if ((typeof FormData === 'undefined' || !(media instanceof FormData)) && contentType) {\n                  Object.assign(headers, {\n                    'Content-Type': contentType\n                  });\n                }\n\n                log.trace('sending POST request to ', url, ' headers ', headers);\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.transport.post(url, headers, media);\n\n              case 6:\n                response = _context2.sent;\n                _context2.next = 17;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n\n                if (!(_context2.t0 instanceof TypeError)) {\n                  _context2.next = 16;\n                  break;\n                }\n\n                log.trace('got error in post response', _context2.t0);\n                throw new TypeError('Posting FormData supported only with browser engine\\'s FormData');\n\n              case 16:\n                throw _context2.t0;\n\n              case 17:\n                log.trace('response', response);\n                return _context2.abrupt(\"return\", response);\n\n              case 19:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9]]);\n      }));\n\n      function post(_x2, _x3, _x4) {\n        return _post.apply(this, arguments);\n      }\n\n      return post;\n    }()\n  }]);\n\n  return Network;\n}();\n\nexports.Network = Network;","map":null,"metadata":{},"sourceType":"script"}