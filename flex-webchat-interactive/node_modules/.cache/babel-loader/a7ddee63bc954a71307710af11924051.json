{"ast":null,"code":"\"use strict\";\n\nvar _assertThisInitialized = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get2 = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SyncMap = exports.SyncMapImpl = void 0;\n\nvar sanitize_1 = require(\"./utils/sanitize\");\n\nvar uri_1 = require(\"./utils/uri\");\n\nvar syncerror_1 = require(\"./utils/syncerror\");\n\nvar logger_1 = require(\"./utils/logger\");\n\nvar entity_1 = require(\"./entity\");\n\nvar mapitem_1 = require(\"./mapitem\");\n\nvar paginator_1 = require(\"./paginator\");\n\nvar cache_1 = require(\"./cache\");\n\nvar mergingqueue_1 = require(\"./mergingqueue\");\n\nvar closeable_1 = require(\"./closeable\");\n\nvar SyncMapImpl = /*#__PURE__*/function (_entity_1$SyncEntity) {\n  _inherits(SyncMapImpl, _entity_1$SyncEntity);\n\n  var _super = _createSuper(SyncMapImpl);\n\n  /**\n   * @private\n   */\n  function SyncMapImpl(services, descriptor, removalHandler) {\n    var _this;\n\n    _classCallCheck(this, SyncMapImpl);\n\n    _this = _super.call(this, services, removalHandler);\n\n    var updateRequestReducer = function updateRequestReducer(acc, input) {\n      return typeof input.ttl === 'number' ? {\n        ttl: input.ttl\n      } : acc;\n    };\n\n    _this.updateMergingQueue = new mergingqueue_1.NamespacedMergingQueue(updateRequestReducer);\n    _this.cache = new cache_1.Cache();\n    _this.descriptor = descriptor;\n    _this.descriptor.date_updated = new Date(_this.descriptor.date_updated);\n\n    if (descriptor.items) {\n      descriptor.items.forEach(function (itemDescriptor) {\n        itemDescriptor.date_updated = new Date(itemDescriptor.date_updated);\n\n        _this.cache.store(itemDescriptor.key, new mapitem_1.MapItem(itemDescriptor), itemDescriptor.last_event_id);\n      });\n    }\n\n    return _this;\n  } // private props\n\n\n  _createClass(SyncMapImpl, [{\n    key: \"uri\",\n    get: function get() {\n      return this.descriptor.url;\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      return this.descriptor.links;\n    }\n  }, {\n    key: \"revision\",\n    get: function get() {\n      return this.descriptor.revision;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return this.descriptor.last_event_id;\n    }\n  }, {\n    key: \"dateExpires\",\n    get: function get() {\n      return this.descriptor.date_expires;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return 'map';\n    } // below properties are specific to Insights only\n\n  }, {\n    key: \"indexName\",\n    get: function get() {\n      return undefined;\n    }\n  }, {\n    key: \"queryString\",\n    get: function get() {\n      return undefined;\n    } // public props, documented along with class description\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.descriptor.sid;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.descriptor.unique_name || null;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.descriptor.date_updated;\n    }\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key, value, itemMetadataUpdates) {\n        var _this2 = this;\n\n        var input;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                input = itemMetadataUpdates || {};\n                sanitize_1.validateOptionalTtl(input.ttl);\n                return _context.abrupt(\"return\", this.updateMergingQueue.squashAndAdd(key, input, function (input) {\n                  return _this2._putItemUnconditionally(key, value, input.ttl);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function set(_x, _x2, _x3) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(key) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.cache.has(key)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.cache.get(key));\n\n              case 4:\n                return _context2.abrupt(\"return\", this._getItemFromServer(key));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function get(_x4) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"_getItemFromServer\",\n    value: function () {\n      var _getItemFromServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(key) {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.queryItems({\n                  key: key\n                });\n\n              case 2:\n                result = _context3.sent;\n\n                if (!(result.items.length < 1)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                throw new syncerror_1.SyncError(\"No item with key \".concat(key, \" found\"), 404, 54201);\n\n              case 7:\n                return _context3.abrupt(\"return\", result.items[0]);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _getItemFromServer(_x5) {\n        return _getItemFromServer2.apply(this, arguments);\n      }\n\n      return _getItemFromServer;\n    }()\n  }, {\n    key: \"mutate\",\n    value: function () {\n      var _mutate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(key, mutator, itemMetadataUpdates) {\n        var _this3 = this;\n\n        var input;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                input = itemMetadataUpdates || {};\n                sanitize_1.validateOptionalTtl(input.ttl);\n                return _context4.abrupt(\"return\", this.updateMergingQueue.add(key, input, function (input) {\n                  return _this3._putItemWithIfMatch(key, mutator, input.ttl);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function mutate(_x6, _x7, _x8) {\n        return _mutate.apply(this, arguments);\n      }\n\n      return mutate;\n    }()\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key, obj, itemMetadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.mutate(key, function (remote) {\n                  return Object.assign(remote, obj);\n                }, itemMetadataUpdates));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function update(_x9, _x10, _x11) {\n        return _update2.apply(this, arguments);\n      }\n\n      return update;\n    }()\n  }, {\n    key: \"_putItemUnconditionally\",\n    value: function () {\n      var _putItemUnconditionally2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, data, ttl) {\n        var result, item;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._putItemToServer(key, data, undefined, ttl);\n\n              case 2:\n                result = _context6.sent;\n                item = result.item;\n\n                this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data, item.date_updated, item.date_expires, result.added, false);\n\n                return _context6.abrupt(\"return\", this.cache.get(item.key));\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _putItemUnconditionally(_x12, _x13, _x14) {\n        return _putItemUnconditionally2.apply(this, arguments);\n      }\n\n      return _putItemUnconditionally;\n    }()\n  }, {\n    key: \"_putItemWithIfMatch\",\n    value: function () {\n      var _putItemWithIfMatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, mutatorFunction, ttl) {\n        var currentItem, data, ifMatch, result, item;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.get(key).catch(function (error) {\n                  if (error.status === 404) {\n                    // PUT /Items/myKey with `If-Match: -1` acts as \"put if not exists\"\n                    return new mapitem_1.MapItem({\n                      key: key,\n                      data: {},\n                      last_event_id: -1,\n                      revision: '-1',\n                      url: null,\n                      date_updated: null,\n                      date_expires: null\n                    });\n                  } else {\n                    throw error;\n                  }\n                });\n\n              case 2:\n                currentItem = _context7.sent;\n                data = mutatorFunction(sanitize_1.deepClone(currentItem.value));\n\n                if (!data) {\n                  _context7.next = 26;\n                  break;\n                }\n\n                ifMatch = currentItem.revision;\n                _context7.prev = 6;\n                _context7.next = 9;\n                return this._putItemToServer(key, data, ifMatch, ttl);\n\n              case 9:\n                result = _context7.sent;\n                item = result.item;\n\n                this._handleItemMutated(item.key, item.url, item.last_event_id, item.revision, item.data, item.date_updated, item.date_expires, result.added, false);\n\n                return _context7.abrupt(\"return\", this.cache.get(item.key));\n\n              case 15:\n                _context7.prev = 15;\n                _context7.t0 = _context7[\"catch\"](6);\n\n                if (!(_context7.t0.status === 412)) {\n                  _context7.next = 23;\n                  break;\n                }\n\n                _context7.next = 20;\n                return this._getItemFromServer(key);\n\n              case 20:\n                return _context7.abrupt(\"return\", this._putItemWithIfMatch(key, mutatorFunction, ttl));\n\n              case 23:\n                throw _context7.t0;\n\n              case 24:\n                _context7.next = 27;\n                break;\n\n              case 26:\n                return _context7.abrupt(\"return\", currentItem);\n\n              case 27:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[6, 15]]);\n      }));\n\n      function _putItemWithIfMatch(_x15, _x16, _x17) {\n        return _putItemWithIfMatch2.apply(this, arguments);\n      }\n\n      return _putItemWithIfMatch;\n    }()\n  }, {\n    key: \"_putItemToServer\",\n    value: function () {\n      var _putItemToServer2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(key, data, ifMatch, ttl) {\n        var url, requestBody, response, mapItemDescriptor, added;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                url = new uri_1.UriBuilder(this.links.items).pathSegment(key).build();\n                requestBody = {\n                  data: data\n                };\n\n                if (ttl !== undefined) {\n                  requestBody.ttl = ttl;\n                }\n\n                _context8.prev = 3;\n                _context8.next = 6;\n                return this.services.network.put(url, requestBody, ifMatch);\n\n              case 6:\n                response = _context8.sent;\n                mapItemDescriptor = response.body;\n                mapItemDescriptor.data = data; // The server does not return the data in the response\n\n                mapItemDescriptor.date_updated = new Date(mapItemDescriptor.date_updated);\n                added = response.status.code === 201;\n                return _context8.abrupt(\"return\", {\n                  added: added,\n                  item: mapItemDescriptor\n                });\n\n              case 14:\n                _context8.prev = 14;\n                _context8.t0 = _context8[\"catch\"](3);\n\n                if (_context8.t0.status === 404) {\n                  this.onRemoved(false);\n                }\n\n                throw _context8.t0;\n\n              case 18:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[3, 14]]);\n      }));\n\n      function _putItemToServer(_x18, _x19, _x20, _x21) {\n        return _putItemToServer2.apply(this, arguments);\n      }\n\n      return _putItemToServer;\n    }()\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(key) {\n        var item, response;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(typeof key === 'undefined')) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                throw new Error('Key argument is invalid');\n\n              case 2:\n                _context9.next = 4;\n                return this.get(key);\n\n              case 4:\n                item = _context9.sent;\n                _context9.next = 7;\n                return this.services.network.delete(item.uri);\n\n              case 7:\n                response = _context9.sent;\n\n                this._handleItemRemoved(key, response.body.last_event_id, undefined, new Date(response.body.date_updated), false);\n\n              case 9:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function remove(_x22) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"queryItems\",\n    value: function () {\n      var _queryItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(args) {\n        var _this4 = this;\n\n        var uri, response, items, meta;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                args = args || {};\n                uri = new uri_1.UriBuilder(this.links.items).queryParam('From', args.from).queryParam('PageSize', args.limit).queryParam('Key', args.key).queryParam('PageToken', args.pageToken).queryParam('Order', args.order).build();\n                _context10.next = 4;\n                return this.services.network.get(uri);\n\n              case 4:\n                response = _context10.sent;\n                items = response.body.items.map(function (el) {\n                  el.date_updated = new Date(el.date_updated);\n\n                  var itemInCache = _this4.cache.get(el.key);\n\n                  if (itemInCache) {\n                    _this4._handleItemMutated(el.key, el.url, el.last_event_id, el.revision, el.data, el.date_updated, el.date_expires, false, true);\n                  } else {\n                    _this4.cache.store(el.key, new mapitem_1.MapItem(el), el.last_event_id);\n                  }\n\n                  return _this4.cache.get(el.key);\n                });\n                meta = response.body.meta;\n                return _context10.abrupt(\"return\", new paginator_1.Paginator(items, function (pageToken) {\n                  return _this4.queryItems({\n                    pageToken: pageToken\n                  });\n                }, meta.previous_token, meta.next_token));\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function queryItems(_x23) {\n        return _queryItems.apply(this, arguments);\n      }\n\n      return queryItems;\n    }()\n  }, {\n    key: \"getItems\",\n    value: function () {\n      var _getItems = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(args) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                args = args || {};\n                sanitize_1.validatePageSize(args.pageSize);\n                args.limit = args.pageSize || args.limit || 50;\n                args.order = args.order || 'asc';\n                return _context11.abrupt(\"return\", this.queryItems(args));\n\n              case 5:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getItems(_x24) {\n        return _getItems.apply(this, arguments);\n      }\n\n      return getItems;\n    }()\n  }, {\n    key: \"shouldIgnoreEvent\",\n    value: function shouldIgnoreEvent(key, eventId) {\n      return this.cache.isKnown(key, eventId);\n    }\n    /**\n     * Handle update from the server\n     * @private\n     */\n\n  }, {\n    key: \"_update\",\n    value: function _update(update, isStrictlyOrdered) {\n      update.date_created = new Date(update.date_created);\n\n      switch (update.type) {\n        case 'map_item_added':\n        case 'map_item_updated':\n          {\n            this._handleItemMutated(update.item_key, update.item_url, update.id, update.item_revision, update.item_data, update.date_created, undefined, // orchestration events do not include date_expires\n            update.type === 'map_item_added', true);\n          }\n          break;\n\n        case 'map_item_removed':\n          {\n            this._handleItemRemoved(update.item_key, update.id, update.item_data, update.date_created, true);\n          }\n          break;\n\n        case 'map_removed':\n          {\n            this.onRemoved(false);\n          }\n          break;\n      }\n\n      if (isStrictlyOrdered) {\n        this._advanceLastEventId(update.id, update.map_revision);\n      }\n    }\n  }, {\n    key: \"_advanceLastEventId\",\n    value: function _advanceLastEventId(eventId, revision) {\n      if (this.lastEventId < eventId) {\n        this.descriptor.last_event_id = eventId;\n\n        if (revision) {\n          this.descriptor.revision = revision;\n        }\n      }\n    }\n  }, {\n    key: \"_updateRootDateUpdated\",\n    value: function _updateRootDateUpdated(dateUpdated) {\n      if (!this.descriptor.date_updated || dateUpdated.getTime() > this.descriptor.date_updated.getTime()) {\n        this.descriptor.date_updated = dateUpdated;\n        this.services.storage.update(this.type, this.sid, this.uniqueName, {\n          date_updated: dateUpdated\n        });\n      }\n    }\n  }, {\n    key: \"_handleItemMutated\",\n    value: function _handleItemMutated(key, url, lastEventId, revision, value, dateUpdated, dateExpires, added, remote) {\n      if (this.shouldIgnoreEvent(key, lastEventId)) {\n        logger_1.default.trace('Item ', key, ' update skipped, current:', this.lastEventId, ', remote:', lastEventId);\n        return;\n      } else {\n        this._updateRootDateUpdated(dateUpdated);\n\n        var item = this.cache.get(key);\n\n        if (!item) {\n          item = new mapitem_1.MapItem({\n            key: key,\n            url: url,\n            last_event_id: lastEventId,\n            revision: revision,\n            data: value,\n            date_updated: dateUpdated,\n            date_expires: dateExpires\n          });\n          this.cache.store(key, item, lastEventId);\n          this.emitItemMutationEvent(item, remote, added);\n        } else {\n          item.update(lastEventId, revision, value, dateUpdated);\n          this.cache.store(key, item, lastEventId);\n\n          if (dateExpires !== undefined) {\n            item.updateDateExpires(dateExpires);\n          }\n\n          this.emitItemMutationEvent(item, remote, false);\n        }\n      }\n    }\n  }, {\n    key: \"emitItemMutationEvent\",\n    value: function emitItemMutationEvent(item, remote, added) {\n      var eventName = added ? 'itemAdded' : 'itemUpdated';\n      this.broadcastEventToListeners(eventName, {\n        item: item,\n        isLocal: !remote\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_handleItemRemoved\",\n    value: function _handleItemRemoved(key, eventId, oldData, dateUpdated, remote) {\n      this._updateRootDateUpdated(dateUpdated);\n\n      this.cache.delete(key, eventId);\n      this.broadcastEventToListeners('itemRemoved', {\n        key: key,\n        isLocal: !remote,\n        value: oldData\n      });\n    }\n  }, {\n    key: \"onRemoved\",\n    value: function onRemoved(locally) {\n      this._unsubscribe();\n\n      this.removalHandler(this.type, this.sid, this.uniqueName);\n      this.broadcastEventToListeners('removed', {\n        isLocal: locally\n      });\n    }\n  }, {\n    key: \"setTtl\",\n    value: function () {\n      var _setTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(ttl) {\n        var requestBody, response;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                sanitize_1.validateMandatoryTtl(ttl);\n                _context12.prev = 1;\n                requestBody = {\n                  ttl: ttl\n                };\n                _context12.next = 5;\n                return this.services.network.post(this.uri, requestBody);\n\n              case 5:\n                response = _context12.sent;\n                this.descriptor.date_expires = response.body.date_expires;\n                _context12.next = 13;\n                break;\n\n              case 9:\n                _context12.prev = 9;\n                _context12.t0 = _context12[\"catch\"](1);\n\n                if (_context12.t0.status === 404) {\n                  this.onRemoved(false);\n                }\n\n                throw _context12.t0;\n\n              case 13:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[1, 9]]);\n      }));\n\n      function setTtl(_x25) {\n        return _setTtl.apply(this, arguments);\n      }\n\n      return setTtl;\n    }()\n  }, {\n    key: \"setItemTtl\",\n    value: function () {\n      var _setItemTtl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(key, ttl) {\n        var existingItem, requestBody, response;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                sanitize_1.validateMandatoryTtl(ttl);\n                _context13.next = 3;\n                return this.get(key);\n\n              case 3:\n                existingItem = _context13.sent;\n                requestBody = {\n                  ttl: ttl\n                };\n                _context13.next = 7;\n                return this.services.network.post(existingItem.uri, requestBody);\n\n              case 7:\n                response = _context13.sent;\n                existingItem.updateDateExpires(response.body.date_expires);\n\n              case 9:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function setItemTtl(_x26, _x27) {\n        return _setItemTtl.apply(this, arguments);\n      }\n\n      return setItemTtl;\n    }()\n  }, {\n    key: \"removeMap\",\n    value: function () {\n      var _removeMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.services.network.delete(this.uri);\n\n              case 2:\n                this.onRemoved(true);\n\n              case 3:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function removeMap() {\n        return _removeMap.apply(this, arguments);\n      }\n\n      return removeMap;\n    }()\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'map';\n    }\n  }]);\n\n  return SyncMapImpl;\n}(entity_1.SyncEntity);\n\nexports.SyncMapImpl = SyncMapImpl;\n/**\n * @class\n * @alias Map\n * @classdesc Represents a Sync Map, which stores an unordered set of key:value pairs.\n * Use the {@link Client#map} method to obtain a reference to a Sync Map.\n * @property {String} sid An immutable identifier (a SID) assigned by the system on creation.\n * @property {String} [uniqueName=null] - An optional immutable identifier that may be assigned by the\n * programmer to this map on creation. Unique among other Maps.\n * @property {Date} dateUpdated Date when the Map was last updated.\n *\n * @fires Map#removed\n * @fires Map#itemAdded\n * @fires Map#itemRemoved\n * @fires Map#itemUpdated\n */\n\nvar SyncMap = /*#__PURE__*/function (_closeable_1$Closeabl) {\n  _inherits(SyncMap, _closeable_1$Closeabl);\n\n  var _super2 = _createSuper(SyncMap);\n\n  function SyncMap(syncMapImpl) {\n    var _this5;\n\n    _classCallCheck(this, SyncMap);\n\n    _this5 = _super2.call(this);\n    _this5.syncMapImpl = syncMapImpl;\n\n    _this5.syncMapImpl.attach(_assertThisInitialized(_this5));\n\n    return _this5;\n  } // private props\n\n\n  _createClass(SyncMap, [{\n    key: \"uri\",\n    get: function get() {\n      return this.syncMapImpl.uri;\n    }\n  }, {\n    key: \"links\",\n    get: function get() {\n      return this.syncMapImpl.links;\n    }\n  }, {\n    key: \"revision\",\n    get: function get() {\n      return this.syncMapImpl.revision;\n    }\n  }, {\n    key: \"lastEventId\",\n    get: function get() {\n      return this.syncMapImpl.lastEventId;\n    }\n  }, {\n    key: \"dateExpires\",\n    get: function get() {\n      return this.syncMapImpl.dateExpires;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return SyncMapImpl.type;\n    } // public props, documented along with class description\n\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.syncMapImpl.sid;\n    }\n  }, {\n    key: \"uniqueName\",\n    get: function get() {\n      return this.syncMapImpl.uniqueName;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.syncMapImpl.dateUpdated;\n    }\n    /**\n     * Add a new item to the map with the given key:value pair. Overwrites any value that might already exist at that key.\n     * @param {String} key Unique item identifier.\n     * @param {Object} value Value to be set.\n     * @param {Map#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<MapItem>} Newly added item, or modified one if already exists, with the latest known value.\n     * @public\n     * @example\n     * map.set('myKey', { name: 'John Smith' }, { ttl: 86400 })\n     *   .then(function(item) {\n     *     console.log('Map Item set() successful, item value:', item.value);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Map Item set() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(key, value, itemMetadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context15.abrupt(\"return\", this.syncMapImpl.set(key, value, itemMetadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function set(_x28, _x29, _x30) {\n        return _set2.apply(this, arguments);\n      }\n\n      return set;\n    }()\n    /**\n     * Retrieve an item by key.\n     * @param {String} key Identifies the desired item.\n     * @returns {Promise<MapItem>} A promise that resolves when the item has been fetched.\n     * This promise will be rejected if item was not found.\n     * @public\n     * @example\n     * map.get('myKey')\n     *   .then(function(item) {\n     *     console.log('Map Item get() successful, item value:', item.value)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Map Item get() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(key) {\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context16.abrupt(\"return\", this.syncMapImpl.get(key));\n\n              case 2:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function get(_x31) {\n        return _get3.apply(this, arguments);\n      }\n\n      return get;\n    }()\n    /**\n     * Schedules a modification to this Map Item that will apply a mutation function.\n     * If no Item with the given key exists, it will first be created, having the default value (<code>{}</code>).\n     * @param {String} key Selects the map item to be mutated.\n     * @param {Map~Mutator} mutator A function that outputs a new value based on the existing value.\n     * May be called multiple times, particularly if this Map Item is modified concurrently by remote code.\n     * If the mutation ultimately succeeds, the Map Item will have made the particular transition described\n     * by this function.\n     * @param {Map#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<MapItem>} Resolves with the most recent item state, the output of a successful\n     * mutation or a state that prompted graceful cancellation (mutator returned <code>null</code>).\n     * @public\n     * @example\n     * var mutatorFunction = function(currentValue) {\n     *     currentValue.viewCount = (currentValue.viewCount || 0) + 1;\n     *     return currentValue;\n     * };\n     * map.mutate('myKey', mutatorFunction, { ttl: 86400 })\n     *   .then(function(item) {\n     *     console.log('Map Item mutate() successful, new value:', item.value)\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Map Item mutate() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"mutate\",\n    value: function () {\n      var _mutate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(key, mutator, itemMetadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context17.abrupt(\"return\", this.syncMapImpl.mutate(key, mutator, itemMetadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function mutate(_x32, _x33, _x34) {\n        return _mutate2.apply(this, arguments);\n      }\n\n      return mutate;\n    }()\n    /**\n     * Modify a map item by appending new fields (or by overwriting existing ones) with the values from\n     * the provided Object. Creates a new item if no item by this key exists, copying all given fields and values\n     * into it.\n     * This is equivalent to\n     * <pre>\n     * map.mutate('myKey', function(currentValue) {\n     *   return Object.assign(currentValue, obj));\n     * });\n     * </pre>\n     * @param {String} key Selects the map item to update.\n     * @param {Object} obj Specifies the particular (top-level) attributes that will receive new values.\n     * @param {Map#ItemMetadata} [itemMetadataUpdates] New item metadata.\n     * @returns {Promise<MapItem>} A promise resolving to the modified item in its new state.\n     * @public\n     * @example\n     * // Say, the Map Item (key: 'myKey') value is { name: 'John Smith' }\n     * map.update('myKey', { age: 34 }, { ttl: 86400 })\n     *   .then(function(item) {\n     *     // Now the Map Item value is { name: 'John Smith', age: 34 }\n     *     console.log('Map Item update() successful, new value:', item.value);\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Map Item update() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"update\",\n    value: function () {\n      var _update3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(key, obj, itemMetadataUpdates) {\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context18.abrupt(\"return\", this.syncMapImpl.update(key, obj, itemMetadataUpdates));\n\n              case 2:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function update(_x35, _x36, _x37) {\n        return _update3.apply(this, arguments);\n      }\n\n      return update;\n    }()\n    /**\n     * Delete an item, given its key.\n     * @param {String} key Selects the item to delete.\n     * @returns {Promise<void>} A promise to remove an item.\n     * The promise will be rejected if 'key' is undefined or an item was not found.\n     * @public\n     * @example\n     * map.remove('myKey')\n     *   .then(function() {\n     *     console.log('Map Item remove() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Map Item remove() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(key) {\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context19.abrupt(\"return\", this.syncMapImpl.remove(key));\n\n              case 2:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function remove(_x38) {\n        return _remove2.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Get a complete list of items from the map.\n     * @param {Object} [args] Arguments for query.\n     * @param {String} [args.from] Item key, which should be used as the offset. If undefined, starts from the beginning or end depending on args.order.\n     * @param {Number} [args.pageSize=50] Result page size.\n     * @param {'asc'|'desc'} [args.order='asc'] Lexicographical order of results.\n     * @return {Promise<Paginator<MapItem>>}\n     * @public\n     * @example\n     * var pageHandler = function(paginator) {\n     *   paginator.items.forEach(function(item) {\n     *     console.log('Item ' + item.key + ': ', item.value);\n     *   });\n     *   return paginator.hasNextPage ? paginator.nextPage().then(pageHandler)\n     *                                : null;\n     * };\n     * map.getItems({ from: 'myKey', order: 'asc' })\n     *   .then(pageHandler)\n     *   .catch(function(error) {\n     *     console.error('Map getItems() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"getItems\",\n    value: function () {\n      var _getItems2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(args) {\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context20.abrupt(\"return\", this.syncMapImpl.getItems(args));\n\n              case 2:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function getItems(_x39) {\n        return _getItems2.apply(this, arguments);\n      }\n\n      return getItems;\n    }()\n    /**\n     * Update the time-to-live of the map.\n     * @param {Number} ttl Specifies the TTL in seconds after which the map is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * map.setTtl(3600)\n     *   .then(function() {\n     *     console.log('Map setTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Map setTtl() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"setTtl\",\n    value: function () {\n      var _setTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(ttl) {\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context21.abrupt(\"return\", this.syncMapImpl.setTtl(ttl));\n\n              case 2:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function setTtl(_x40) {\n        return _setTtl2.apply(this, arguments);\n      }\n\n      return setTtl;\n    }()\n    /**\n     * Update the time-to-live of a map item.\n     * @param {Number} key Item key.\n     * @param {Number} ttl Specifies the TTL in seconds after which the map item is subject to automatic deletion. The value 0 means infinity.\n     * @return {Promise<void>} A promise that resolves after the TTL update was successful.\n     * @public\n     * @example\n     * map.setItemTtl('myKey', 86400)\n     *   .then(function() {\n     *     console.log('Map setItemTtl() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Map setItemTtl() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"setItemTtl\",\n    value: function () {\n      var _setItemTtl2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(key, ttl) {\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                this.ensureNotClosed();\n                return _context22.abrupt(\"return\", this.syncMapImpl.setItemTtl(key, ttl));\n\n              case 2:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function setItemTtl(_x41, _x42) {\n        return _setItemTtl2.apply(this, arguments);\n      }\n\n      return setItemTtl;\n    }()\n    /**\n     * Delete this map. It will be impossible to restore it.\n     * @return {Promise<void>} A promise that resolves when the map has been deleted.\n     * @public\n     * @example\n     * map.removeMap()\n     *   .then(function() {\n     *     console.log('Map removeMap() successful');\n     *   })\n     *   .catch(function(error) {\n     *     console.error('Map removeMap() failed', error);\n     *   });\n     */\n\n  }, {\n    key: \"removeMap\",\n    value: function () {\n      var _removeMap2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                this.ensureNotClosed();\n                _context23.next = 3;\n                return this.syncMapImpl.removeMap();\n\n              case 3:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function removeMap() {\n        return _removeMap2.apply(this, arguments);\n      }\n\n      return removeMap;\n    }()\n    /**\n     * Conclude work with the map instance and remove all event listeners attached to it.\n     * Any subsequent operation on this object will be rejected with error.\n     * Other local copies of this map will continue operating and receiving events normally.\n     * @public\n     * @example\n     * map.close();\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      _get2(_getPrototypeOf(SyncMap.prototype), \"close\", this).call(this);\n\n      this.syncMapImpl.detach(this.listenerUuid);\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return SyncMapImpl.type;\n    }\n  }]);\n\n  return SyncMap;\n}(closeable_1.Closeable);\n\nexports.SyncMap = SyncMap;\nexports.default = SyncMap;\n/**\n * Contains Map Item metadata.\n * @typedef {Object} Map#ItemMetadata\n * @property {Number} [ttl] Specifies the time-to-live in seconds after which the map item is subject to automatic deletion.\n * The value 0 means infinity.\n */\n\n/**\n * Applies a transformation to the item value. May be called multiple times on the\n * same datum in case of collisions with remote code.\n * @callback Map~Mutator\n * @param {Object} currentValue The current value of the item in the cloud.\n * @return {Object} The desired new value for the item or <code>null</code> to gracefully cancel the mutation.\n */\n\n/**\n * Fired when a new item appears in the map, whether its creator was local or remote.\n * @event Map#itemAdded\n * @param {Object} args Arguments provided with the event.\n * @param {MapItem} args.item Added item.\n * @param {Boolean} args.isLocal Equals 'true' if item was added by local actor, 'false' otherwise.\n * @example\n * map.on('itemAdded', function(args) {\n *   console.log('Map item ' + args.item.key + ' was added');\n *   console.log('args.item.value:', args.item.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a map item is updated (not added or removed, but changed), whether the updater was local or remote.\n * @event Map#itemUpdated\n * @param {Object} args Arguments provided with the event.\n * @param {MapItem} args.item Updated item.\n * @param {Boolean} args.isLocal Equals 'true' if item was updated by local actor, 'false' otherwise.\n * @example\n * map.on('itemUpdated', function(args) {\n *   console.log('Map item ' + args.item.key + ' was updated');\n *   console.log('args.item.value:', args.item.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a map item is removed, whether the remover was local or remote.\n * @event Map#itemRemoved\n * @param {Object} args Arguments provided with the event.\n * @param {String} args.key The key of the removed item.\n * @param {Boolean} args.isLocal Equals 'true' if item was removed by local actor, 'false' otherwise.\n * @param {Object} args.value In case item was removed by a remote actor, contains a snapshot of item data before removal.\n * @example\n * map.on('itemRemoved', function(args) {\n *   console.log('Map item ' + args.key + ' was removed');\n *   console.log('args.value:', args.value);\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */\n\n/**\n * Fired when a map is deleted entirely, by any actor local or remote.\n * @event Map#removed\n * @param {Object} args Arguments provided with the event.\n * @param {Boolean} args.isLocal Equals 'true' if map was removed by local actor, 'false' otherwise.\n * @example\n * map.on('removed', function(args) {\n *   console.log('Map ' + map.sid + ' was removed');\n *   console.log('args.isLocal:', args.isLocal);\n * });\n */","map":null,"metadata":{},"sourceType":"script"}