{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateId = exports.validatePageSize = exports.validateMandatoryTtl = exports.validateOptionalTtl = exports.deepClone = void 0;\n\nvar syncerror_1 = require(\"./syncerror\");\n/**\n * Deep-clone an object. Note that this does not work on object containing\n * functions.\n * @param {object} obj - the object to deep-clone\n * @returns {object}\n */\n\n\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nexports.deepClone = deepClone;\n\nfunction validateTtl(ttl, optional) {\n  if (optional && ttl === undefined) {\n    return;\n  }\n\n  var ttlType = typeof ttl;\n\n  if (ttlType !== 'number' || !isNonNegativeInteger(ttl)) {\n    var providedValue = ttlType === 'object' ? 'object' : \"'\".concat(ttl, \"' of type '\").concat(ttlType, \"'\");\n    throw new syncerror_1.default(\"Invalid TTL, expected a positive integer of type number, was \".concat(providedValue), 400, 54011);\n  }\n}\n\nfunction validateId(id) {\n  if (id === undefined) {\n    return;\n  }\n\n  var idType = typeof id;\n\n  if (idType !== 'string') {\n    throw new Error(\"Invalid ID type, expected a string, got '\".concat(idType, \"'\"));\n  }\n}\n\nexports.validateId = validateId;\n\nfunction validateOptionalTtl(ttl) {\n  validateTtl(ttl, true);\n}\n\nexports.validateOptionalTtl = validateOptionalTtl;\n\nfunction validateMandatoryTtl(ttl) {\n  validateTtl(ttl, false);\n}\n\nexports.validateMandatoryTtl = validateMandatoryTtl;\n\nfunction validatePageSize(pageSize) {\n  var validPageSize = pageSize === undefined || isPositiveInteger(pageSize);\n\n  if (!validPageSize) {\n    throw new syncerror_1.default(\"Invalid pageSize parameter. Expected a positive integer, was '\".concat(pageSize, \"'.\"), 400, 54455);\n  }\n}\n\nexports.validatePageSize = validatePageSize;\n\nfunction isInteger(number) {\n  return !isNaN(parseInt(number)) && isFinite(number);\n}\n\nfunction isPositiveInteger(number) {\n  return isInteger(number) && number > 0;\n}\n\nfunction isNonNegativeInteger(number) {\n  return isInteger(number) && number >= 0;\n}","map":null,"metadata":{},"sourceType":"script"}