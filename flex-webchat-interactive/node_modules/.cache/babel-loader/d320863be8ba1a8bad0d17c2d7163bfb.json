{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport * as FlexWebChat from '@twilio/flex-webchat-ui';\nimport { connect } from 'react-redux';\nimport { Button } from '@mui/material';\nvar defaultCurInitatives = {\n  type: '',\n  options: []\n};\n\nvar Interactives = function Interactives(_ref) {\n  var messageList = _ref.messageList,\n      channelSid = _ref.channelSid,\n      state = _ref.state;\n\n  var _useState = useState(defaultCurInitatives),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1];\n\n  useEffect(function () {\n    if (messageList && messageList.length > 0 && !messageList[messageList.length - 1].isFromMe && messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions) {\n      var lastMessageAttributes = messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions;\n      console.log(lastMessageAttributes);\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInitatives);\n    }\n  }, [messageList]);\n  useEffect(function () {\n    if (curInteractives !== defaultCurInitatives) {\n      var el = document.getElementById('interactive-container');\n      el.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  var sendMessage = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {\n      var curChannel;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return FlexWebChat.manager.chatClient.getChannelBySid(channelSid);\n\n            case 2:\n              curChannel = _context.sent;\n              curChannel.sendMessage(message);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendMessage(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"interactive-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, curInteractives.options.map(function (o, idx) {\n    return /*#__PURE__*/React.createElement(Button, {\n      key: o.uuid,\n      onClick: function onClick() {\n        return sendMessage(o.buttonValue);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, o.buttonContent);\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid,\n    state: state\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx"],"names":["React","useState","useEffect","FlexWebChat","connect","Button","defaultCurInitatives","type","options","Interactives","messageList","channelSid","state","curInteractives","setCurInteractives","length","isFromMe","source","attributes","interactiveWebchatOptions","lastMessageAttributes","console","log","el","document","getElementById","scrollIntoView","sendMessage","message","manager","chatClient","getChannelBySid","curChannel","map","o","idx","uuid","buttonValue","buttonContent","mapStateToProps","flex","chat","channels","session","messages"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport * as FlexWebChat from '@twilio/flex-webchat-ui';\nimport { connect } from 'react-redux';\nimport { Button } from '@mui/material';\n\nconst defaultCurInitatives = { type: '', options: [] };\n\nconst Interactives = ({ messageList, channelSid, state }) => {\n  const [curInteractives, setCurInteractives] = useState(defaultCurInitatives);\n\n  useEffect(() => {\n    if (\n      messageList &&\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe &&\n      messageList[messageList.length - 1].source.state.attributes\n        .interactiveWebchatOptions\n    ) {\n      const lastMessageAttributes =\n        messageList[messageList.length - 1].source.state.attributes\n          .interactiveWebchatOptions;\n      console.log(lastMessageAttributes);\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInitatives);\n    }\n  }, [messageList]);\n\n  useEffect(() => {\n    if (curInteractives !== defaultCurInitatives) {\n      const el = document.getElementById('interactive-container');\n      el.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  const sendMessage = async (message) => {\n    const curChannel = await FlexWebChat.manager.chatClient.getChannelBySid(\n      channelSid\n    );\n    curChannel.sendMessage(message);\n  };\n\n  return (\n    <div id=\"interactive-container\">\n      {curInteractives.options.map((o, idx) => (\n        <Button key={o.uuid} onClick={() => sendMessage(o.buttonValue)}>\n          {o.buttonContent}\n        </Button>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid,\n    state: state,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}