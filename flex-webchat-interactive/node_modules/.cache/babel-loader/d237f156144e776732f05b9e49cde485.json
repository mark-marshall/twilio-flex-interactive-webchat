{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeMap = void 0;\n\nvar Node = /*#__PURE__*/function () {\n  function Node(key, value) {\n    _classCallCheck(this, Node);\n\n    this.balanceFactor = 0;\n    this.key = key;\n    this.value = value;\n    this.parent = null;\n    this.left = null;\n    this.right = null;\n  }\n\n  _createClass(Node, [{\n    key: \"update\",\n    value: function update(value) {\n      this.value = value;\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(target, replacement) {\n      if (!target) {\n        return;\n      }\n\n      if (this.left === replacement) {\n        this.left = replacement;\n      } else if (this.right === replacement) {\n        this.right = replacement;\n      }\n    }\n  }, {\n    key: \"isRoot\",\n    get: function get() {\n      return this.parent === null;\n    }\n  }, {\n    key: \"isLeaf\",\n    get: function get() {\n      return this.left === null && this.right === null;\n    }\n  }, {\n    key: \"isLeftChild\",\n    get: function get() {\n      return this.parent.left === this;\n    }\n  }]);\n\n  return Node;\n}();\n/**\n * @property length\n */\n\n\nvar TreeMap = /*#__PURE__*/function () {\n  function TreeMap(less, equal) {\n    _classCallCheck(this, TreeMap);\n\n    this.isLessThan = less || function (x, y) {\n      return x < y;\n    };\n\n    this.isEqual = equal || function (x, y) {\n      return x === y;\n    };\n\n    this.root = null;\n    this.count = null;\n  }\n\n  _createClass(TreeMap, [{\n    key: \"clear\",\n    value: function clear() {\n      this.root = null;\n      this.count = 0;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      var node = this.getNode(key);\n\n      if (node) {\n        node.update(value);\n      } else {\n        this.insert(key, value);\n      } // return node;\n\n    }\n  }, {\n    key: \"insert\",\n    value: function insert(key, value) {\n      var node = new Node(key, value);\n      this.count++;\n\n      if (!this.root) {\n        this.root = node; // return node;\n\n        return;\n      }\n\n      var currNode = this.root;\n\n      for (;;) {\n        if (this.isLessThan(key, currNode.key)) {\n          if (currNode.left) {\n            currNode = currNode.left;\n          } else {\n            currNode.left = node;\n            break;\n          }\n        } else {\n          if (currNode.right) {\n            // eslint-disable-line no-lonely-if\n            currNode = currNode.right;\n          } else {\n            currNode.right = node;\n            break;\n          }\n        }\n      }\n\n      node.parent = currNode;\n      currNode = node;\n\n      while (currNode.parent) {\n        var parent = currNode.parent;\n        var prevBalanceFactor = parent.balanceFactor;\n\n        if (currNode.isLeftChild) {\n          parent.balanceFactor++;\n        } else {\n          parent.balanceFactor--;\n        }\n\n        if (Math.abs(parent.balanceFactor) < Math.abs(prevBalanceFactor)) {\n          break;\n        }\n\n        if (parent.balanceFactor < -1 || parent.balanceFactor > 1) {\n          this.rebalance(parent);\n          break;\n        }\n\n        currNode = parent;\n      } // return node;\n\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var currentNode = this.root;\n\n      while (currentNode) {\n        if (this.isEqual(key, currentNode.key)) {\n          return currentNode.value;\n        }\n\n        if (this.isLessThan(key, currentNode.key)) {\n          currentNode = currentNode.left;\n        } else {\n          currentNode = currentNode.right;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(key) {\n      // update this algorithm and remove any\n      var node = this.getNode(key);\n\n      if (!node || node.key !== key) {\n        return null;\n      }\n\n      var parent = node.parent;\n      var left = node.left;\n      var right = node.right;\n\n      if (!!left !== !!right) {\n        // one child\n        var child = left || right;\n\n        if (!parent && !child) {\n          this.root = null;\n        } else if (parent && !child) {\n          this.root = child;\n        } else {\n          parent.replace(node, null);\n          this.rebalance(parent);\n        }\n      } else {\n        // two children\n        var maxLeft = node.left;\n\n        while (maxLeft.right) {\n          maxLeft = maxLeft.right;\n        }\n\n        if (node.left === maxLeft) {\n          if (node.isRoot) {\n            this.root = maxLeft;\n            maxLeft.parent = null;\n          } else {\n            if (node.isLeftChild) {\n              node.parent.left = maxLeft;\n            } else {\n              node.parent.right = maxLeft;\n            }\n\n            maxLeft.parent = node.parent;\n          }\n\n          maxLeft.right = node.right;\n          maxLeft.right.parent = maxLeft;\n          maxLeft.balanceFactor = node.balanceFactor;\n          node = {\n            parent: maxLeft,\n            isLeftChild: true\n          };\n        } else {\n          var mlParent = maxLeft.parent;\n          var mlLeft = maxLeft.left;\n          mlParent.right = mlLeft;\n\n          if (mlLeft) {\n            mlLeft.parent = mlParent;\n          }\n\n          if (node.isRoot) {\n            this.root = maxLeft;\n            maxLeft.parent = null;\n          } else {\n            if (node.isLeftChild) {\n              node.parent.left = maxLeft;\n            } else {\n              node.parent.right = maxLeft;\n            }\n\n            maxLeft.parent = node.parent;\n          }\n\n          maxLeft.right = node.right;\n          maxLeft.right.parent = maxLeft;\n          maxLeft.left = node.left;\n          maxLeft.left.parent = maxLeft;\n          maxLeft.balanceFactor = node.balanceFactor;\n          node = {\n            parent: mlParent,\n            isLeftChild: false\n          };\n        }\n      }\n\n      this.count--;\n\n      while (node.parent) {\n        var _parent = node.parent;\n        var prevBalanceFactor = _parent.balanceFactor;\n\n        if (node.isLeftChild) {\n          _parent.balanceFactor -= 1;\n        } else {\n          _parent.balanceFactor += 1;\n        }\n\n        if (Math.abs(_parent.balanceFactor) > Math.abs(prevBalanceFactor)) {\n          if (_parent.balanceFactor < -1 || _parent.balanceFactor > 1) {\n            this.rebalance(_parent);\n\n            if (_parent.parent.balanceFactor === 0) {\n              node = _parent.parent;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } else {\n          node = _parent;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode(key) {\n      var currentNode = this.root;\n\n      while (currentNode) {\n        if (this.isEqual(key, currentNode.key)) {\n          return currentNode;\n        }\n\n        if (this.isLessThan(key, currentNode.key)) {\n          currentNode = currentNode.left;\n        } else {\n          currentNode = currentNode.right;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"rebalance\",\n    value: function rebalance(node) {\n      if (node.balanceFactor < 0) {\n        if (node.right.balanceFactor > 0) {\n          this.rotateRight(node.right);\n          this.rotateLeft(node);\n        } else {\n          this.rotateLeft(node);\n        }\n      } else if (node.balanceFactor > 0) {\n        if (node.left.balanceFactor < 0) {\n          this.rotateLeft(node.left);\n          this.rotateRight(node);\n        } else {\n          this.rotateRight(node);\n        }\n      }\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft(pivot) {\n      var root = pivot.right;\n      pivot.right = root.left;\n\n      if (root.left !== null) {\n        root.left.parent = pivot;\n      }\n\n      root.parent = pivot.parent;\n\n      if (root.parent === null) {\n        this.root = root;\n      } else if (pivot.isLeftChild) {\n        root.parent.left = root;\n      } else {\n        root.parent.right = root;\n      }\n\n      root.left = pivot;\n      pivot.parent = root;\n      pivot.balanceFactor = pivot.balanceFactor + 1 - Math.min(root.balanceFactor, 0);\n      root.balanceFactor = root.balanceFactor + 1 - Math.max(pivot.balanceFactor, 0);\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight(pivot) {\n      var root = pivot.left;\n      pivot.left = root.right;\n\n      if (root.right !== null) {\n        root.right.parent = pivot;\n      }\n\n      root.parent = pivot.parent;\n\n      if (root.parent === null) {\n        this.root = root;\n      } else if (pivot.isLeftChild) {\n        root.parent.left = root;\n      } else {\n        root.parent.right = root;\n      }\n\n      root.right = pivot;\n      pivot.parent = root;\n      pivot.balanceFactor = pivot.balanceFactor - 1 - Math.min(root.balanceFactor, 0);\n      root.balanceFactor = root.balanceFactor - 1 - Math.max(pivot.balanceFactor, 0);\n    }\n  }, {\n    key: Symbol.iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator, _step, iter;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(this.getIterator());\n              _context.prev = 1;\n\n              _iterator.s();\n\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              iter = _step.value;\n              _context.next = 7;\n              return iter;\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"getIterator\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function getIterator() {\n      var key,\n          currentNode,\n          fromleft,\n          _args2 = arguments;\n      return _regeneratorRuntime.wrap(function getIterator$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              key = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : null;\n              currentNode = this.root;\n\n            case 2:\n              if (!currentNode) {\n                _context2.next = 8;\n                break;\n              }\n\n              if (!(this.isEqual(key, currentNode.key) || key === null && !currentNode.left)) {\n                _context2.next = 5;\n                break;\n              }\n\n              return _context2.abrupt(\"break\", 8);\n\n            case 5:\n              if (this.isLessThan(key, currentNode.key) || key === null) {\n                currentNode = currentNode.left;\n              } else {\n                currentNode = currentNode.right;\n              }\n\n              _context2.next = 2;\n              break;\n\n            case 8:\n              if (currentNode) {\n                _context2.next = 10;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", null);\n\n            case 10:\n              fromleft = true;\n\n            case 11:\n              if (!fromleft) {\n                _context2.next = 29;\n                break;\n              }\n\n              _context2.next = 14;\n              return [currentNode.key, currentNode.value];\n\n            case 14:\n              fromleft = false;\n\n              if (!currentNode.right) {\n                _context2.next = 21;\n                break;\n              }\n\n              currentNode = currentNode.right;\n\n              while (currentNode.left) {\n                currentNode = currentNode.left;\n              }\n\n              fromleft = true;\n              _context2.next = 27;\n              break;\n\n            case 21:\n              if (!currentNode.parent) {\n                _context2.next = 26;\n                break;\n              }\n\n              fromleft = currentNode.parent.left === currentNode;\n              currentNode = currentNode.parent;\n              _context2.next = 27;\n              break;\n\n            case 26:\n              return _context2.abrupt(\"break\", 37);\n\n            case 27:\n              _context2.next = 35;\n              break;\n\n            case 29:\n              if (!currentNode.parent) {\n                _context2.next = 34;\n                break;\n              }\n\n              fromleft = currentNode.parent.left === currentNode;\n              currentNode = currentNode.parent;\n              _context2.next = 35;\n              break;\n\n            case 34:\n              return _context2.abrupt(\"break\", 37);\n\n            case 35:\n              _context2.next = 11;\n              break;\n\n            case 37:\n              return _context2.abrupt(\"return\", null);\n\n            case 38:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, getIterator, this);\n    })\n  }, {\n    key: \"getReverseIterator\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function getReverseIterator() {\n      var key,\n          currentNode,\n          fromright,\n          _args3 = arguments;\n      return _regeneratorRuntime.wrap(function getReverseIterator$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              key = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : null;\n              currentNode = this.root;\n\n            case 2:\n              if (!currentNode) {\n                _context3.next = 8;\n                break;\n              }\n\n              if (!(this.isEqual(key, currentNode.key) || key === null && !currentNode.right)) {\n                _context3.next = 5;\n                break;\n              }\n\n              return _context3.abrupt(\"break\", 8);\n\n            case 5:\n              if (!this.isLessThan(key, currentNode.key) || key === null) {\n                currentNode = currentNode.right;\n              } else {\n                currentNode = currentNode.left;\n              }\n\n              _context3.next = 2;\n              break;\n\n            case 8:\n              if (currentNode) {\n                _context3.next = 10;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", null);\n\n            case 10:\n              fromright = true;\n\n            case 11:\n              if (!fromright) {\n                _context3.next = 29;\n                break;\n              }\n\n              _context3.next = 14;\n              return [currentNode.key, currentNode.value];\n\n            case 14:\n              fromright = false;\n\n              if (!currentNode.left) {\n                _context3.next = 21;\n                break;\n              }\n\n              currentNode = currentNode.left;\n\n              while (currentNode.right) {\n                currentNode = currentNode.right;\n              }\n\n              fromright = true;\n              _context3.next = 27;\n              break;\n\n            case 21:\n              if (!currentNode.parent) {\n                _context3.next = 26;\n                break;\n              }\n\n              fromright = currentNode.parent.right === currentNode;\n              currentNode = currentNode.parent;\n              _context3.next = 27;\n              break;\n\n            case 26:\n              return _context3.abrupt(\"break\", 37);\n\n            case 27:\n              _context3.next = 35;\n              break;\n\n            case 29:\n              if (!currentNode.parent) {\n                _context3.next = 34;\n                break;\n              }\n\n              fromright = currentNode.parent.right === currentNode;\n              currentNode = currentNode.parent;\n              _context3.next = 35;\n              break;\n\n            case 34:\n              return _context3.abrupt(\"break\", 37);\n\n            case 35:\n              _context3.next = 11;\n              break;\n\n            case 37:\n              return _context3.abrupt(\"return\", null);\n\n            case 38:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, getReverseIterator, this);\n    })\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.count;\n    }\n  }]);\n\n  return TreeMap;\n}();\n\nexports.TreeMap = TreeMap;","map":null,"metadata":{},"sourceType":"script"}