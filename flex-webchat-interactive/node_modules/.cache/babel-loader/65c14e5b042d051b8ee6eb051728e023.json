{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"changeMonth\", \"components\", \"componentsProps\", \"date\", \"leftArrowButtonText\", \"maxDate\", \"minDate\", \"onChange\", \"renderDay\", \"rightArrowButtonText\"];\nimport * as React from 'react';\nimport PickersCalendarHeader from '../CalendarPicker/PickersCalendarHeader';\nimport DateRangePickerDay from '../DateRangePickerDay';\nimport { useDefaultDates, useUtils } from '../internal/pickers/hooks/useUtils';\nimport PickersCalendar from '../CalendarPicker/PickersCalendar';\nimport { isWithinRange, isStartOfRange, isEndOfRange } from '../internal/pickers/date-utils';\nimport { doNothing } from '../internal/pickers/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar onlyDayView = ['day'];\n/**\n * @ignore - internal component.\n */\n\nexport function DateRangePickerViewMobile(props) {\n  var changeMonth = props.changeMonth,\n      components = props.components,\n      componentsProps = props.componentsProps,\n      date = props.date,\n      leftArrowButtonText = props.leftArrowButtonText,\n      maxDateProp = props.maxDate,\n      minDateProp = props.minDate,\n      onChange = props.onChange,\n      _props$renderDay = props.renderDay,\n      _renderDay = _props$renderDay === void 0 ? function (_, dayProps) {\n    return /*#__PURE__*/_jsx(DateRangePickerDay, _extends({}, dayProps));\n  } : _props$renderDay,\n      rightArrowButtonText = props.rightArrowButtonText,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var utils = useUtils();\n  var defaultDates = useDefaultDates();\n  var minDate = minDateProp != null ? minDateProp : defaultDates.minDate;\n  var maxDate = maxDateProp != null ? maxDateProp : defaultDates.maxDate;\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(PickersCalendarHeader, _extends({\n      components: components,\n      componentsProps: componentsProps,\n      leftArrowButtonText: leftArrowButtonText,\n      maxDate: maxDate,\n      minDate: minDate,\n      onMonthChange: changeMonth,\n      openView: \"day\",\n      rightArrowButtonText: rightArrowButtonText,\n      views: onlyDayView\n    }, other)), /*#__PURE__*/_jsx(PickersCalendar, _extends({}, other, {\n      date: date,\n      onChange: onChange,\n      onFocusedDayChange: doNothing,\n      renderDay: function renderDay(day, _, DayProps) {\n        return _renderDay(day, _extends({\n          isPreviewing: false,\n          isStartOfPreviewing: false,\n          isEndOfPreviewing: false,\n          isHighlighting: isWithinRange(utils, day, date),\n          isStartOfHighlighting: isStartOfRange(utils, day, date),\n          isEndOfHighlighting: isEndOfRange(utils, day, date)\n        }, DayProps));\n      }\n    }))]\n  });\n}","map":null,"metadata":{},"sourceType":"module"}