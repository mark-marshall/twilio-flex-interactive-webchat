{"ast":null,"code":"import defaultMoment from 'moment';\nvar defaultFormats = {\n  normalDateWithWeekday: \"ddd, MMM D\",\n  normalDate: \"D MMMM\",\n  shortDate: \"MMM D\",\n  monthAndDate: \"MMMM D\",\n  dayOfMonth: \"D\",\n  year: \"YYYY\",\n  month: \"MMMM\",\n  monthShort: \"MMM\",\n  monthAndYear: \"MMMM YYYY\",\n  weekday: \"dddd\",\n  weekdayShort: \"ddd\",\n  minutes: \"mm\",\n  hours12h: \"hh\",\n  hours24h: \"HH\",\n  seconds: \"ss\",\n  fullTime: \"LT\",\n  fullTime12h: \"hh:mm A\",\n  fullTime24h: \"HH:mm\",\n  fullDate: \"ll\",\n  fullDateWithWeekday: \"dddd, LL\",\n  fullDateTime: \"lll\",\n  fullDateTime12h: \"ll hh:mm A\",\n  fullDateTime24h: \"ll HH:mm\",\n  keyboardDate: \"L\",\n  keyboardDateTime: \"L LT\",\n  keyboardDateTime12h: \"L hh:mm A\",\n  keyboardDateTime24h: \"L HH:mm\"\n};\n\nvar MomentUtils =\n/** @class */\nfunction () {\n  function MomentUtils(_a) {\n    var _this = this;\n\n    var _b = _a === void 0 ? {} : _a,\n        locale = _b.locale,\n        formats = _b.formats,\n        instance = _b.instance;\n\n    this.lib = \"moment\";\n\n    this.is12HourCycleInCurrentLocale = function () {\n      return /A|a/.test(_this.moment().localeData().longDateFormat(\"LT\"));\n    };\n\n    this.getFormatHelperText = function (format) {\n      // @see https://github.com/moment/moment/blob/develop/src/lib/format/format.js#L6\n      var localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})|./g;\n      return format.match(localFormattingTokens).map(function (token) {\n        var firstCharacter = token[0];\n\n        if (firstCharacter === \"L\" || firstCharacter === \";\") {\n          return _this.moment.localeData().longDateFormat(token);\n        }\n\n        return token;\n      }).join(\"\").replace(/a/gi, \"(a|p)m\").toLocaleLowerCase();\n    };\n\n    this.getCurrentLocaleCode = function () {\n      return _this.locale || _this.moment.locale();\n    };\n\n    this.parseISO = function (isoString) {\n      return _this.moment(isoString, true);\n    };\n\n    this.toISO = function (value) {\n      return value.toISOString();\n    };\n\n    this.parse = function (value, format) {\n      if (value === \"\") {\n        return null;\n      }\n\n      if (_this.locale) {\n        return _this.moment(value, format, _this.locale, true);\n      }\n\n      return _this.moment(value, format, true);\n    };\n\n    this.date = function (value) {\n      if (value === null) {\n        return null;\n      }\n\n      var moment = _this.moment(value);\n\n      moment.locale(_this.locale);\n      return moment;\n    };\n\n    this.toJsDate = function (value) {\n      return value.toDate();\n    };\n\n    this.isValid = function (value) {\n      return _this.moment(value).isValid();\n    };\n\n    this.isNull = function (date) {\n      return date === null;\n    };\n\n    this.getDiff = function (date, comparing, unit) {\n      return date.diff(comparing, unit);\n    };\n\n    this.isAfter = function (date, value) {\n      return date.isAfter(value);\n    };\n\n    this.isBefore = function (date, value) {\n      return date.isBefore(value);\n    };\n\n    this.isAfterDay = function (date, value) {\n      return date.isAfter(value, \"day\");\n    };\n\n    this.isBeforeDay = function (date, value) {\n      return date.isBefore(value, \"day\");\n    };\n\n    this.isBeforeYear = function (date, value) {\n      return date.isBefore(value, \"year\");\n    };\n\n    this.isAfterYear = function (date, value) {\n      return date.isAfter(value, \"year\");\n    };\n\n    this.startOfDay = function (date) {\n      return date.clone().startOf(\"day\");\n    };\n\n    this.endOfDay = function (date) {\n      return date.clone().endOf(\"day\");\n    };\n\n    this.format = function (date, formatKey) {\n      return _this.formatByString(date, _this.formats[formatKey]);\n    };\n\n    this.formatByString = function (date, formatString) {\n      var clonedDate = date.clone();\n      clonedDate.locale(_this.locale);\n      return clonedDate.format(formatString);\n    };\n\n    this.formatNumber = function (numberToFormat) {\n      return numberToFormat;\n    };\n\n    this.getHours = function (date) {\n      return date.get(\"hours\");\n    };\n\n    this.addSeconds = function (date, count) {\n      return count < 0 ? date.clone().subtract(Math.abs(count), \"seconds\") : date.clone().add(count, \"seconds\");\n    };\n\n    this.addMinutes = function (date, count) {\n      return count < 0 ? date.clone().subtract(Math.abs(count), \"minutes\") : date.clone().add(count, \"minutes\");\n    };\n\n    this.addHours = function (date, count) {\n      return count < 0 ? date.clone().subtract(Math.abs(count), \"hours\") : date.clone().add(count, \"hours\");\n    };\n\n    this.addDays = function (date, count) {\n      return count < 0 ? date.clone().subtract(Math.abs(count), \"days\") : date.clone().add(count, \"days\");\n    };\n\n    this.addWeeks = function (date, count) {\n      return count < 0 ? date.clone().subtract(Math.abs(count), \"weeks\") : date.clone().add(count, \"weeks\");\n    };\n\n    this.addMonths = function (date, count) {\n      return count < 0 ? date.clone().subtract(Math.abs(count), \"months\") : date.clone().add(count, \"months\");\n    };\n\n    this.setHours = function (date, count) {\n      return date.clone().hours(count);\n    };\n\n    this.getMinutes = function (date) {\n      return date.get(\"minutes\");\n    };\n\n    this.setMinutes = function (date, count) {\n      return date.clone().minutes(count);\n    };\n\n    this.getSeconds = function (date) {\n      return date.get(\"seconds\");\n    };\n\n    this.setSeconds = function (date, count) {\n      return date.clone().seconds(count);\n    };\n\n    this.getMonth = function (date) {\n      return date.get(\"month\");\n    };\n\n    this.getDaysInMonth = function (date) {\n      return date.daysInMonth();\n    };\n\n    this.isSameDay = function (date, comparing) {\n      return date.isSame(comparing, \"day\");\n    };\n\n    this.isSameMonth = function (date, comparing) {\n      return date.isSame(comparing, \"month\");\n    };\n\n    this.isSameYear = function (date, comparing) {\n      return date.isSame(comparing, \"year\");\n    };\n\n    this.isSameHour = function (date, comparing) {\n      return date.isSame(comparing, \"hour\");\n    };\n\n    this.setMonth = function (date, count) {\n      return date.clone().month(count);\n    };\n\n    this.getMeridiemText = function (ampm) {\n      if (_this.is12HourCycleInCurrentLocale()) {\n        // AM/PM translation only possible in those who have 12 hour cycle in locale.\n        return _this.moment.localeData().meridiem(ampm === \"am\" ? 0 : 13, 0, false);\n      }\n\n      return ampm === \"am\" ? \"AM\" : \"PM\"; // fallback for de, ru, ...etc\n    };\n\n    this.startOfMonth = function (date) {\n      return date.clone().startOf(\"month\");\n    };\n\n    this.endOfMonth = function (date) {\n      return date.clone().endOf(\"month\");\n    };\n\n    this.startOfWeek = function (date) {\n      return date.clone().startOf(\"week\");\n    };\n\n    this.endOfWeek = function (date) {\n      return date.clone().endOf(\"week\");\n    };\n\n    this.getNextMonth = function (date) {\n      return date.clone().add(1, \"month\");\n    };\n\n    this.getPreviousMonth = function (date) {\n      return date.clone().subtract(1, \"month\");\n    };\n\n    this.getMonthArray = function (date) {\n      var firstMonth = date.clone().startOf(\"year\");\n      var monthArray = [firstMonth];\n\n      while (monthArray.length < 12) {\n        var prevMonth = monthArray[monthArray.length - 1];\n        monthArray.push(_this.getNextMonth(prevMonth));\n      }\n\n      return monthArray;\n    };\n\n    this.getYear = function (date) {\n      return date.get(\"year\");\n    };\n\n    this.setYear = function (date, year) {\n      return date.clone().set(\"year\", year);\n    };\n\n    this.mergeDateAndTime = function (date, time) {\n      return date.hour(time.hour()).minute(time.minute()).second(time.second());\n    };\n\n    this.getWeekdays = function () {\n      return _this.moment.weekdaysShort(true);\n    };\n\n    this.isEqual = function (value, comparing) {\n      if (value === null && comparing === null) {\n        return true;\n      }\n\n      return _this.moment(value).isSame(comparing);\n    };\n\n    this.getWeekArray = function (date) {\n      var start = date.clone().startOf(\"month\").startOf(\"week\");\n      var end = date.clone().endOf(\"month\").endOf(\"week\");\n      var count = 0;\n      var current = start;\n      var nestedWeeks = [];\n\n      while (current.isBefore(end)) {\n        var weekNumber = Math.floor(count / 7);\n        nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];\n        nestedWeeks[weekNumber].push(current);\n        current = current.clone().add(1, \"day\");\n        count += 1;\n      }\n\n      return nestedWeeks;\n    };\n\n    this.getYearRange = function (start, end) {\n      var startDate = _this.moment(start).startOf(\"year\");\n\n      var endDate = _this.moment(end).endOf(\"year\");\n\n      var years = [];\n      var current = startDate;\n\n      while (current.isBefore(endDate)) {\n        years.push(current);\n        current = current.clone().add(1, \"year\");\n      }\n\n      return years;\n    };\n\n    this.isWithinRange = function (date, _a) {\n      var start = _a[0],\n          end = _a[1];\n      return date.isBetween(start, end, null, \"[]\");\n    };\n\n    this.moment = instance || defaultMoment;\n    this.locale = locale;\n    this.formats = Object.assign({}, defaultFormats, formats);\n  }\n\n  return MomentUtils;\n}();\n\nexport { MomentUtils as default };","map":null,"metadata":{},"sourceType":"module"}