{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"currentlySelectingRangeEnd\", \"disableOpenPicker\", \"endText\", \"onBlur\", \"onChange\", \"open\", \"openPicker\", \"rawValue\", \"rawValue\", \"readOnly\", \"renderInput\", \"setCurrentlySelectingRangeEnd\", \"startText\", \"TextFieldProps\", \"validationError\"];\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport { useUtils } from '../internal/pickers/hooks/useUtils';\nimport { useMaskedInput } from '../internal/pickers/hooks/useMaskedInput';\nimport { WrapperVariantContext } from '../internal/pickers/wrappers/WrapperVariantContext';\nimport { executeInTheNextEventLoopTick } from '../internal/pickers/utils';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DateRangePickerInputRoot = styled('div')(function (_ref) {\n  var theme = _ref.theme;\n  return _defineProperty({\n    display: 'flex',\n    alignItems: 'baseline'\n  }, theme.breakpoints.down('xs'), {\n    flexDirection: 'column',\n    alignItems: 'center'\n  });\n});\n/**\n * @ignore - internal component.\n */\n\nvar DateRangePickerInput = /*#__PURE__*/React.forwardRef(function DateRangePickerInput(props, ref) {\n  var currentlySelectingRangeEnd = props.currentlySelectingRangeEnd,\n      disableOpenPicker = props.disableOpenPicker,\n      endText = props.endText,\n      onBlur = props.onBlur,\n      onChange = props.onChange,\n      open = props.open,\n      openPicker = props.openPicker,\n      _props$rawValue = _slicedToArray(props.rawValue, 2),\n      start = _props$rawValue[0],\n      end = _props$rawValue[1],\n      readOnly = props.readOnly,\n      renderInput = props.renderInput,\n      setCurrentlySelectingRangeEnd = props.setCurrentlySelectingRangeEnd,\n      startText = props.startText,\n      TextFieldProps = props.TextFieldProps,\n      _props$validationErro = _slicedToArray(props.validationError, 2),\n      startValidationError = _props$validationErro[0],\n      endValidationError = _props$validationErro[1],\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var utils = useUtils();\n  var startRef = React.useRef(null);\n  var endRef = React.useRef(null);\n  var wrapperVariant = React.useContext(WrapperVariantContext);\n  React.useEffect(function () {\n    if (!open) {\n      return;\n    }\n\n    if (currentlySelectingRangeEnd === 'start') {\n      var _startRef$current;\n\n      (_startRef$current = startRef.current) == null ? void 0 : _startRef$current.focus();\n    } else if (currentlySelectingRangeEnd === 'end') {\n      var _endRef$current;\n\n      (_endRef$current = endRef.current) == null ? void 0 : _endRef$current.focus();\n    }\n  }, [currentlySelectingRangeEnd, open]); // TODO: rethink this approach. We do not need to wait for calendar to be updated to rerender input (looks like freezing)\n  // TODO: so simply break 1 react's commit phase in 2 (first for input and second for calendars) by executing onChange in the next tick\n\n  var lazyHandleChangeCallback = React.useCallback(function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return executeInTheNextEventLoopTick(function () {\n      return onChange.apply(void 0, args);\n    });\n  }, [onChange]);\n\n  var handleStartChange = function handleStartChange(date, inputString) {\n    lazyHandleChangeCallback([date, utils.date(end)], inputString);\n  };\n\n  var handleEndChange = function handleEndChange(date, inputString) {\n    lazyHandleChangeCallback([utils.date(start), date], inputString);\n  };\n\n  var openRangeStartSelection = function openRangeStartSelection() {\n    if (setCurrentlySelectingRangeEnd) {\n      setCurrentlySelectingRangeEnd('start');\n    }\n\n    if (!readOnly && !disableOpenPicker) {\n      openPicker();\n    }\n  };\n\n  var openRangeEndSelection = function openRangeEndSelection() {\n    if (setCurrentlySelectingRangeEnd) {\n      setCurrentlySelectingRangeEnd('end');\n    }\n\n    if (!readOnly && !disableOpenPicker) {\n      openPicker();\n    }\n  };\n\n  var openOnFocus = wrapperVariant === 'desktop';\n  var startInputProps = useMaskedInput(_extends({}, other, {\n    readOnly: readOnly,\n    rawValue: start,\n    onChange: handleStartChange,\n    label: startText,\n    validationError: startValidationError !== null,\n    TextFieldProps: _extends({}, TextFieldProps, {\n      ref: startRef,\n      focused: open && currentlySelectingRangeEnd === 'start'\n    }),\n    inputProps: {\n      onClick: !openOnFocus ? openRangeStartSelection : undefined,\n      onFocus: openOnFocus ? openRangeStartSelection : undefined\n    }\n  }));\n  var endInputProps = useMaskedInput(_extends({}, other, {\n    readOnly: readOnly,\n    label: endText,\n    rawValue: end,\n    onChange: handleEndChange,\n    validationError: endValidationError !== null,\n    TextFieldProps: _extends({}, TextFieldProps, {\n      ref: endRef,\n      focused: open && currentlySelectingRangeEnd === 'end'\n    }),\n    inputProps: {\n      onClick: !openOnFocus ? openRangeEndSelection : undefined,\n      onFocus: openOnFocus ? openRangeEndSelection : undefined\n    }\n  }));\n  return /*#__PURE__*/_jsx(DateRangePickerInputRoot, {\n    onBlur: onBlur,\n    ref: ref,\n    children: renderInput(startInputProps, endInputProps)\n  });\n});\nexport default DateRangePickerInput;","map":null,"metadata":{},"sourceType":"module"}