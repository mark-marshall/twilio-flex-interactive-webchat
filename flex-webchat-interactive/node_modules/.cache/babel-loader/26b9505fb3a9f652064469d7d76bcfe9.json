{"ast":null,"code":"\"use strict\";\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar util_1 = require(\"./util\");\n\nvar log = logger_1.Logger.scope('User');\n/**\n * @classdesc Extended user information.\n * Note that <code>online</code> and <code>notifiable</code> properties are eligible\n * to use only if reachability function is enabled.\n * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.\n *\n * @property {String} identity - User identity\n * @property {String} friendlyName - User friendly name, null if not set\n * @property {Object} attributes - Object with custom attributes for user\n * @property {Boolean} online - User real-time channel connection status\n * @property {Boolean} notifiable - User push notification registration status\n *\n * @fires User#updated\n * @fires User#userSubscribed\n * @fires User#userUnsubscribed\n *\n * @constructor\n * @param {String} identity - Identity of user\n * @param {String} entityId - id of user's object\n * @param {Object} datasync - datasync service\n * @param {Object} session - session service\n */\n\nvar User = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(User, _events_1$EventEmitte);\n  /**\n   * The update reason for <code>updated</code> event emitted on User\n   * @typedef {('friendlyName' | 'attributes' | 'online' | 'notifiable')} User#UpdateReason\n   */\n\n  function User(identity, entityName, services) {\n    (0, _classCallCheck3.default)(this, User);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (User.__proto__ || (0, _getPrototypeOf2.default)(User)).call(this));\n\n    _this.subscribed = 'initializing';\n\n    _this.setMaxListeners(0);\n\n    _this.services = services;\n    _this.state = {\n      identity: identity,\n      entityName: entityName,\n      friendlyName: null,\n      attributes: {},\n      online: null,\n      notifiable: null\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(User, [{\n    key: \"_update\",\n    // Handles service updates\n    value: function _update(key, value) {\n      var updateReasons = [];\n      log.debug('User for', this.state.identity, 'updated:', key, value);\n\n      switch (key) {\n        case 'friendlyName':\n          if (this.state.friendlyName !== value.value) {\n            updateReasons.push('friendlyName');\n            this.state.friendlyName = value.value;\n          }\n\n          break;\n\n        case 'attributes':\n          var updateAttributes = {};\n\n          try {\n            updateAttributes = JSON.parse(value.value);\n          } catch (e) {\n            log.warn('Retrieved malformed attributes from the server for user: ' + this.state.identity);\n          }\n\n          if (!util_1.isDeepEqual(this.state.attributes, updateAttributes)) {\n            this.state.attributes = updateAttributes;\n            updateReasons.push('attributes');\n          }\n\n          break;\n\n        case 'reachability':\n          if (this.state.online !== value.online) {\n            this.state.online = value.online;\n            updateReasons.push('online');\n          }\n\n          if (this.state.notifiable !== value.notifiable) {\n            this.state.notifiable = value.notifiable;\n            updateReasons.push('notifiable');\n          }\n\n          break;\n\n        default:\n          return;\n      }\n\n      if (updateReasons.length > 0) {\n        this.emit('updated', {\n          user: this,\n          updateReasons: updateReasons\n        });\n      }\n    } // Fetch reachability info\n\n  }, {\n    key: \"_updateReachabilityInfo\",\n    value: function _updateReachabilityInfo(map, update) {\n      var _this2 = this;\n\n      if (!this.services.session.reachabilityEnabled) {\n        return _promise2.default.resolve();\n      }\n\n      return map.get('reachability').then(update).catch(function (err) {\n        log.warn('Failed to get reachability info for ', _this2.state.identity, err);\n      });\n    } // Fetch user\n\n  }, {\n    key: \"_fetch\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var _this3 = this;\n\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.state.entityName) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this);\n\n              case 2:\n                this.promiseToFetch = this.services.syncClient.map({\n                  id: this.state.entityName,\n                  mode: 'open_existing',\n                  includeItems: true\n                }).then(function (map) {\n                  _this3.entity = map;\n                  map.on('itemUpdated', function (args) {\n                    log.debug(_this3.state.entityName + ' (' + _this3.state.identity + ') itemUpdated: ' + args.item.key);\n                    return _this3._update(args.item.key, args.item.value);\n                  });\n                  return _promise2.default.all([map.get('friendlyName').then(function (item) {\n                    return _this3._update(item.key, item.value);\n                  }), map.get('attributes').then(function (item) {\n                    return _this3._update(item.key, item.value);\n                  }), _this3._updateReachabilityInfo(map, function (item) {\n                    return _this3._update(item.key, item.value);\n                  })]);\n                }).then(function () {\n                  log.debug('Fetched for', _this3.identity);\n                  _this3.subscribed = 'subscribed';\n\n                  _this3.emit('userSubscribed', _this3);\n\n                  return _this3;\n                }).catch(function (err) {\n                  _this3.promiseToFetch = null;\n                  throw err;\n                });\n                return _context.abrupt(\"return\", this.promiseToFetch);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _fetch() {\n        return _ref.apply(this, arguments);\n      }\n\n      return _fetch;\n    }()\n  }, {\n    key: \"_ensureFetched\",\n    value: function _ensureFetched() {\n      return this.promiseToFetch || this._fetch();\n    }\n    /**\n     * Updates user attributes.\n     * @param {Object} attributes - Updated attributes\n     * @returns {Promise<User|Error|SessionError>}\n     */\n\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(attributes) {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(typeof attributes === 'undefined')) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                throw new Error('Attributes is required parameter');\n\n              case 4:\n                if (!(attributes === null)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                throw new Error('Attributes can\\'t be null');\n\n              case 8:\n                if (!(attributes.constructor !== Object)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                throw new Error('Attributes must be a valid JSON object');\n\n              case 10:\n                if (!(this.subscribed == 'unsubscribed')) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                throw new Error('Can\\'t modify unsubscribed object');\n\n              case 12:\n                _context2.next = 14;\n                return this.services.session.addCommand('editUserAttributes', {\n                  username: this.state.identity,\n                  attributes: (0, _stringify2.default)(attributes)\n                });\n\n              case 14:\n                return _context2.abrupt(\"return\", this);\n\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function updateAttributes(_x) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return updateAttributes;\n    }()\n    /**\n     * Update Users friendlyName.\n     * @param {String} friendlyName - Updated friendlyName\n     * @returns {Promise<User|Error|SessionError>}\n     */\n\n  }, {\n    key: \"updateFriendlyName\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(friendlyName) {\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(friendlyName && typeof friendlyName !== 'string')) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('friendlyName must be string or empty');\n\n              case 2:\n                if (!(this.subscribed == 'unsubscribed')) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new Error('Can\\'t modify unsubscribed object');\n\n              case 4:\n                _context3.next = 6;\n                return this.services.session.addCommand('editUserFriendlyName', {\n                  username: this.state.identity,\n                  friendlyName: friendlyName\n                });\n\n              case 6:\n                return _context3.abrupt(\"return\", this);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateFriendlyName(_x2) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return updateFriendlyName;\n    }()\n    /**\n     * Removes User from subscription list.\n     * @returns {Promise<void>} Promise of completion\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!this.promiseToFetch) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this.promiseToFetch;\n\n              case 3:\n                this.entity.close();\n                this.promiseToFetch = null;\n                this.subscribed = 'unsubscribed';\n                this.emit('userUnsubscribed', this);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe() {\n        return _ref4.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n  }, {\n    key: \"identity\",\n    get: function get() {\n      return this.state.identity;\n    },\n    set: function set(identity) {\n      this.state.identity = identity;\n    }\n  }, {\n    key: \"entityName\",\n    set: function set(name) {\n      this.state.entityName = name;\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.state.attributes;\n    }\n  }, {\n    key: \"friendlyName\",\n    get: function get() {\n      return this.state.friendlyName;\n    }\n  }, {\n    key: \"online\",\n    get: function get() {\n      return this.state.online;\n    }\n  }, {\n    key: \"notifiable\",\n    get: function get() {\n      return this.state.notifiable;\n    }\n  }, {\n    key: \"isSubscribed\",\n    get: function get() {\n      return this.subscribed == 'subscribed';\n    }\n  }]);\n  return User;\n}(events_1.EventEmitter);\n\nexports.User = User;\n/**\n * Fired when User's properties or reachability status have been updated.\n * @event User#updated\n * @type {Object}\n * @property {User} user - Updated User\n * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons\n */\n\n/**\n * Fired when Client is subscribed to User.\n * @event User#userSubscribed\n * @type {User}\n */\n\n/**\n * Fired when Client is unsubscribed from this User.\n * @event User#userUnsubscribed\n * @type {User}\n */","map":null,"metadata":{},"sourceType":"script"}