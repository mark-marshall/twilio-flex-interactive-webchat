{"ast":null,"code":"\"use strict\";\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar index_1 = require(\"./util/index\");\n\nvar logger_1 = require(\"./logger\");\n\nvar media_1 = require(\"./media\");\n\nvar log = logger_1.Logger.scope('Message');\n\nfunction parseAttributes(msgSid, attributes) {\n  try {\n    return attributes ? JSON.parse(attributes) : {};\n  } catch (e) {\n    log.warn('Got malformed attributes for the message', msgSid);\n    return {};\n  }\n}\n/**\n * @classdesc A Message represents a Message in a Channel.\n * @property {String} author - The name of the user that sent Message\n * @property {String} body - The body of the Message. Is null if Message is Media Message\n * @property {Object} attributes - Message custom attributes\n * @property {Channel} channel - Channel Message belongs to\n * @property {Date} dateUpdated - When Message was updated\n * @property {Number} index - Index of Message in the Channel's messages list\n * @property {String} lastUpdatedBy - Identity of the last user that updated Message\n * @property {Media} media - Contains Media information (if present)\n * @property {String} memberSid - Authoring Member's server-assigned unique identifier\n * @property {String} sid - The server-assigned unique identifier for Message\n * @property {Date} timestamp - When Message was created\n * @property {'text' | 'media' } type - Type of message: 'text' or 'media'\n * @fires Message#updated\n */\n\n\nvar Message = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Message, _events_1$EventEmitte);\n  /**\n   * The update reason for <code>updated</code> event emitted on Message\n   * @typedef {('body' | 'lastUpdatedBy' | 'dateUpdated' | 'timestamp' | 'attributes' | 'author')} Message#UpdateReason\n   */\n\n  function Message(channel, services, index, data) {\n    (0, _classCallCheck3.default)(this, Message);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Message.__proto__ || (0, _getPrototypeOf2.default)(Message)).call(this));\n\n    _this.channel = channel;\n    _this.services = services;\n    _this.state = {\n      sid: data.sid,\n      index: index,\n      author: data.author == null ? null : data.author,\n      body: data.text,\n      timestamp: data.timestamp ? new Date(data.timestamp) : null,\n      dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,\n      lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,\n      attributes: parseAttributes(data.sid, data.attributes),\n      type: data.type ? data.type : 'text',\n      media: data.type && data.type === 'media' && data.media ? new media_1.Media(data.media, _this.services) : null,\n      memberSid: data.memberSid == null ? null : data.memberSid\n    };\n    return _this;\n  }\n\n  (0, _createClass3.default)(Message, [{\n    key: \"_update\",\n    value: function _update(data) {\n      var updateReasons = [];\n\n      if ((data.text || typeof data.text === 'string') && data.text !== this.state.body) {\n        this.state.body = data.text;\n        updateReasons.push('body');\n      }\n\n      if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {\n        this.state.lastUpdatedBy = data.lastUpdatedBy;\n        updateReasons.push('lastUpdatedBy');\n      }\n\n      if (data.author && data.author !== this.state.author) {\n        this.state.author = data.author;\n        updateReasons.push('author');\n      }\n\n      if (data.dateUpdated && new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {\n        this.state.dateUpdated = new Date(data.dateUpdated);\n        updateReasons.push('dateUpdated');\n      }\n\n      if (data.timestamp && new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {\n        this.state.timestamp = new Date(data.timestamp);\n        updateReasons.push('timestamp');\n      }\n\n      var updatedAttributes = parseAttributes(this.sid, data.attributes);\n\n      if (!index_1.isDeepEqual(this.state.attributes, updatedAttributes)) {\n        this.state.attributes = updatedAttributes;\n        updateReasons.push('attributes');\n      }\n\n      if (updateReasons.length > 0) {\n        this.emit('updated', {\n          message: this,\n          updateReasons: updateReasons\n        });\n      }\n    }\n    /**\n     * Get Member who is author of the Message\n     * @returns {Promise<Member>}\n     */\n\n  }, {\n    key: \"getMember\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var _this2 = this;\n\n        var member, errorMesage;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                member = null;\n\n                if (!this.state.memberSid) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.channel.getMemberBySid(this.memberSid).catch(function () {\n                  log.debug('Member with sid \"' + _this2.memberSid + '\" not found for message ' + _this2.sid);\n                  return null;\n                });\n\n              case 4:\n                member = _context.sent;\n\n              case 5:\n                if (!(!member && this.state.author)) {\n                  _context.next = 9;\n                  break;\n                }\n\n                _context.next = 8;\n                return this.channel.getMemberByIdentity(this.state.author).catch(function () {\n                  log.debug('Member with identity \"' + _this2.author + '\" not found for message ' + _this2.sid);\n                  return null;\n                });\n\n              case 8:\n                member = _context.sent;\n\n              case 9:\n                if (!member) {\n                  _context.next = 11;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", member);\n\n              case 11:\n                errorMesage = 'Member with ';\n\n                if (this.state.memberSid) {\n                  errorMesage += 'SID \\'' + this.state.memberSid + '\\' ';\n                }\n\n                if (this.state.author) {\n                  if (this.state.memberSid) {\n                    errorMesage += 'or ';\n                  }\n\n                  errorMesage += 'identity \\'' + this.state.author + '\\' ';\n                }\n\n                if (errorMesage === 'Member with ') {\n                  errorMesage = 'Member ';\n                }\n\n                errorMesage += 'was not found';\n                throw new Error(errorMesage);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getMember() {\n        return _ref.apply(this, arguments);\n      }\n\n      return getMember;\n    }()\n    /**\n     * Remove the Message.\n     * @returns {Promise<Message|SessionError>}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.services.session.addCommand('deleteMessage', {\n                  channelSid: this.channel.sid,\n                  messageIdx: this.index.toString()\n                });\n\n              case 2:\n                return _context2.abrupt(\"return\", this);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function remove() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Edit message body.\n     * @param {String} body - new body of Message.\n     * @returns {Promise<Message|Error|SessionError>}\n     */\n\n  }, {\n    key: \"updateBody\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(body) {\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(typeof body !== 'string')) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw new Error('Body <String> is a required parameter for updateBody');\n\n              case 2:\n                _context3.next = 4;\n                return this.services.session.addCommand('editMessage', {\n                  channelSid: this.channel.sid,\n                  messageIdx: this.index.toString(),\n                  text: body\n                });\n\n              case 4:\n                return _context3.abrupt(\"return\", this);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function updateBody(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return updateBody;\n    }()\n    /**\n     * Edit message attributes.\n     * @param {Object} attributes new attributes for Message.\n     * @returns {Promise<Message|Error|SessionError>}\n     */\n\n  }, {\n    key: \"updateAttributes\",\n    value: function () {\n      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(attributes) {\n        return _regenerator2.default.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(typeof attributes === 'undefined')) {\n                  _context4.next = 4;\n                  break;\n                }\n\n                throw new Error('Attributes is required parameter');\n\n              case 4:\n                if (!(attributes === null)) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                throw new Error('Attributes can\\'t be null');\n\n              case 8:\n                if (!(attributes.constructor !== Object)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                throw new Error('Attributes must be a valid JSON object');\n\n              case 10:\n                _context4.next = 12;\n                return this.services.session.addCommand('editMessageAttributes', {\n                  channelSid: this.channel.sid,\n                  messageIdx: this.index,\n                  attributes: (0, _stringify2.default)(attributes)\n                });\n\n              case 12:\n                return _context4.abrupt(\"return\", this);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function updateAttributes(_x2) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return updateAttributes;\n    }()\n  }, {\n    key: \"sid\",\n    get: function get() {\n      return this.state.sid;\n    }\n  }, {\n    key: \"author\",\n    get: function get() {\n      return this.state.author;\n    }\n  }, {\n    key: \"body\",\n    get: function get() {\n      if (this.type === 'media') {\n        return null;\n      }\n\n      return this.state.body;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.state.dateUpdated;\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      return this.state.index;\n    }\n  }, {\n    key: \"lastUpdatedBy\",\n    get: function get() {\n      return this.state.lastUpdatedBy;\n    }\n  }, {\n    key: \"timestamp\",\n    get: function get() {\n      return this.state.timestamp;\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this.state.attributes;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.state.type;\n    }\n  }, {\n    key: \"media\",\n    get: function get() {\n      return this.state.media;\n    }\n  }, {\n    key: \"memberSid\",\n    get: function get() {\n      return this.state.memberSid;\n    }\n  }]);\n  return Message;\n}(events_1.EventEmitter);\n\nexports.Message = Message;\n/**\n * Fired when the Message's properties or body has been updated.\n * @event Message#updated\n * @type {Object}\n * @property {Message} message - Updated Message\n * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons\n */","map":null,"metadata":{},"sourceType":"script"}