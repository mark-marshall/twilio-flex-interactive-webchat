{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _inherits = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _possibleConstructorReturn = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _toConsumableArray = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Connector = exports.RegistrationState = void 0;\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"./logger\");\n\nvar RegistrationState = /*#__PURE__*/function () {\n  function RegistrationState() {\n    var token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    var notificationId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    var messageTypes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n\n    _classCallCheck(this, RegistrationState);\n\n    this.token = token;\n    this.notificationId = notificationId;\n    this.messageTypes = messageTypes;\n  }\n\n  _createClass(RegistrationState, [{\n    key: \"clone\",\n    value: function clone() {\n      return new RegistrationState(this.token, this.notificationId, new Set(this.messageTypes));\n    }\n  }]);\n\n  return RegistrationState;\n}();\n\nexports.RegistrationState = RegistrationState;\n\nfunction setDifference(a, b) {\n  return [].concat(_toConsumableArray(_toConsumableArray(a).filter(function (x) {\n    return !b.has(x);\n  })), _toConsumableArray(_toConsumableArray(b).filter(function (x) {\n    return !a.has(x);\n  })));\n}\n\nfunction hasDifference(a, b) {\n  var reasons = new Set();\n\n  if (a.notificationId !== b.notificationId) {\n    reasons.add('notificationId');\n  }\n\n  if (a.token !== b.token) {\n    reasons.add('token');\n  }\n\n  if (setDifference(a.messageTypes, b.messageTypes).length > 0) {\n    reasons.add('messageType');\n  }\n\n  return [reasons.size > 0, reasons];\n}\n\nvar Connector = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Connector, _events_1$EventEmitte);\n\n  var _super = _createSuper(Connector);\n\n  function Connector(config) {\n    var _this;\n\n    _classCallCheck(this, Connector);\n\n    _this = _super.call(this);\n    _this.config = config;\n    _this.desiredState = new RegistrationState();\n    _this.currentState = new RegistrationState();\n    _this.hasActiveAttempt = false;\n    return _this;\n  }\n\n  _createClass(Connector, [{\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(messageType) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.desiredState.messageTypes.has(messageType)) {\n                  _context.next = 3;\n                  break;\n                }\n\n                logger_1.log.debug('message type already registered ', messageType);\n                return _context.abrupt(\"return\");\n\n              case 3:\n                this.desiredState.messageTypes.add(messageType);\n                _context.next = 6;\n                return this.persistRegistration();\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function subscribe(_x) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(messageType) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.desiredState.messageTypes.has(messageType)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                this.desiredState.messageTypes.delete(messageType);\n                _context2.next = 5;\n                return this.persistRegistration();\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function unsubscribe(_x2) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n  }, {\n    key: \"updateToken\",\n    value: function updateToken(token) {\n      this.desiredState.token = token;\n      this.persistRegistration();\n    }\n  }, {\n    key: \"persistRegistration\",\n    value: function () {\n      var _persistRegistration = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this2 = this;\n\n        var _hasDifference, _hasDifference2, needToUpdate, reasons, stateToPersist, persistedState;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(!this.config.token || this.config.token.length === 0)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                logger_1.log.trace('Can\\'t persist registration: token is not set');\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                if (!this.hasActiveAttempt) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                logger_1.log.trace('One registration attempt is already in progress');\n                return _context3.abrupt(\"return\");\n\n              case 6:\n                _hasDifference = hasDifference(this.desiredState, this.currentState), _hasDifference2 = _slicedToArray(_hasDifference, 2), needToUpdate = _hasDifference2[0], reasons = _hasDifference2[1];\n\n                if (needToUpdate) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 9:\n                if (!this.currentState.notificationId) {\n                  reasons.delete('notificationId');\n                }\n\n                logger_1.log.trace('Persisting registration', reasons, this.desiredState);\n                _context3.prev = 11;\n                this.hasActiveAttempt = true;\n                stateToPersist = this.desiredState.clone();\n\n                if (!(stateToPersist.messageTypes.size > 0)) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                _context3.next = 17;\n                return this.updateRegistration(stateToPersist, reasons);\n\n              case 17:\n                persistedState = _context3.sent;\n                this.currentState.token = persistedState.token;\n                this.currentState.notificationId = persistedState.notificationId;\n                this.currentState.messageTypes = persistedState.messageTypes;\n                this.emit('stateChanged', 'registered');\n                _context3.next = 30;\n                break;\n\n              case 24:\n                _context3.next = 26;\n                return this.removeRegistration();\n\n              case 26:\n                this.currentState.token = stateToPersist.token;\n                this.currentState.notificationId = stateToPersist.notificationId;\n                this.currentState.messageTypes.clear();\n                this.emit('stateChanged', 'unregistered');\n\n              case 30:\n                _context3.prev = 30;\n                this.hasActiveAttempt = false;\n                setTimeout(function () {\n                  return _this2.persistRegistration();\n                }, 0);\n                return _context3.finish(30);\n\n              case 34:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[11,, 30, 34]]);\n      }));\n\n      function persistRegistration() {\n        return _persistRegistration.apply(this, arguments);\n      }\n\n      return persistRegistration;\n    }()\n  }, {\n    key: \"setNotificationId\",\n    value: function setNotificationId(notificationId) {\n      this.desiredState.notificationId = notificationId;\n      this.persistRegistration();\n    }\n  }]);\n\n  return Connector;\n}(events_1.EventEmitter);\n\nexports.Connector = Connector;","map":null,"metadata":{},"sourceType":"script"}