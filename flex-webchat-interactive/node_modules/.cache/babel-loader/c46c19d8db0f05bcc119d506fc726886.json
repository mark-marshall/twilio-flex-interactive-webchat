{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"./logger\");\n\nfunction byteLength(s) {\n  var escstr = encodeURIComponent(s);\n  var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {\n    return String.fromCharCode('0x' + p1);\n  });\n  return binstr.length;\n}\n\nfunction stringToUint8Array(s) {\n  var escstr = encodeURIComponent(s);\n  var binstr = escstr.replace(/%([0-9A-F]{2})/g, function (match, p1) {\n    return String.fromCharCode('0x' + p1);\n  });\n  var ua = new Uint8Array(binstr.length);\n  Array.prototype.forEach.call(binstr, function (ch, i) {\n    ua[i] = ch.charCodeAt(0);\n  });\n  return ua;\n}\n\nfunction uint8ArrayToString(ua) {\n  var binstr = Array.prototype.map.call(ua, function (ch) {\n    return String.fromCharCode(ch);\n  }).join('');\n  var escstr = binstr.replace(/(.)/g, function (m, p) {\n    var code = p.charCodeAt(0).toString(16).toUpperCase();\n\n    if (code.length < 2) {\n      code = '0' + code;\n    }\n\n    return '%' + code;\n  });\n  return decodeURIComponent(escstr);\n}\n\nfunction getJsonObject(array) {\n  return JSON.parse(uint8ArrayToString(array));\n}\n\nfunction getMagic(buffer) {\n  var strMagic = '';\n  var idx = 0;\n\n  for (; idx < buffer.length; ++idx) {\n    var chr = String.fromCharCode(buffer[idx]);\n    strMagic += chr;\n\n    if (chr === '\\r') {\n      idx += 2;\n      break;\n    }\n  }\n\n  var magics = strMagic.split(' ');\n  return {\n    size: idx,\n    protocol: magics[0],\n    version: magics[1],\n    headerSize: Number(magics[2])\n  };\n}\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser() {\n    _classCallCheck(this, Parser);\n  }\n\n  _createClass(Parser, null, [{\n    key: \"parse\",\n    value: function parse(message) {\n      var fieldMargin = 2;\n      var dataView = new Uint8Array(message);\n      var magic = getMagic(dataView);\n\n      if (magic.protocol !== 'TWILSOCK' || magic.version !== 'V3.0') {\n        logger_1.log.error(\"unsupported protocol: \".concat(magic.protocol, \" ver \").concat(magic.version)); //throw new Error('Unsupported protocol');\n        //this.fsm.unsupportedProtocol();\n\n        return;\n      }\n\n      var header = null;\n\n      try {\n        header = getJsonObject(dataView.subarray(magic.size, magic.size + magic.headerSize));\n      } catch (e) {\n        logger_1.log.error('failed to parse message header', e, message); //throw new Error('Failed to parse message');\n        //this.fsm.protocolError();\n\n        return;\n      }\n\n      logger_1.log.debug('message received: ', header.method);\n      logger_1.log.trace('message received: ', header);\n      var payload = null;\n\n      if (header.payload_size > 0) {\n        var payloadOffset = fieldMargin + magic.size + magic.headerSize;\n        var payloadSize = header.payload_size;\n\n        if (!header.hasOwnProperty('payload_type') || header.payload_type.indexOf('application/json') === 0) {\n          try {\n            payload = getJsonObject(dataView.subarray(payloadOffset, payloadOffset + payloadSize));\n          } catch (e) {\n            logger_1.log.error('failed to parse message body', e, message); //this.fsm.protocolError();\n\n            return;\n          }\n        } else if (header.payload_type.indexOf('text/plain') === 0) {\n          payload = uint8ArrayToString(dataView.subarray(payloadOffset, payloadOffset + payloadSize));\n        }\n      }\n\n      return {\n        method: header.method,\n        header: header,\n        payload: payload\n      };\n    }\n  }, {\n    key: \"createPacket\",\n    value: function createPacket(header) {\n      var payloadString = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      header.payload_size = byteLength(payloadString); // eslint-disable-line camelcase\n\n      var headerString = JSON.stringify(header) + '\\r\\n';\n      var magicString = 'TWILSOCK V3.0 ' + (byteLength(headerString) - 2) + '\\r\\n';\n      logger_1.log.debug('send request:', magicString + headerString + payloadString);\n      var message = stringToUint8Array(magicString + headerString + payloadString);\n      return message.buffer;\n    }\n  }]);\n\n  return Parser;\n}();\n\nexports.Parser = Parser;","map":null,"metadata":{},"sourceType":"script"}