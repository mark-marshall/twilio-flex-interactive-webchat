{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar thisNumberValue = require('../internals/this-number-value');\n\nvar $repeat = require('../internals/string-repeat');\n\nvar log10 = require('../internals/math-log10');\n\nvar fails = require('../internals/fails');\n\nvar RangeError = global.RangeError;\nvar String = global.String;\nvar isFinite = global.isFinite;\nvar abs = Math.abs;\nvar floor = Math.floor;\nvar pow = Math.pow;\nvar round = Math.round;\nvar un$ToExponential = uncurryThis(1.0.toExponential);\nvar repeat = uncurryThis($repeat);\nvar stringSlice = uncurryThis(''.slice); // Edge 17-\n\nvar ROUNDS_PROPERLY = un$ToExponential(-6.9e-11, 4) === '-6.9000e-11' // IE11- && Edge 14-\n&& un$ToExponential(1.255, 2) === '1.25e+0' // FF86-, V8 ~ Chrome 49-50\n&& un$ToExponential(12345, 3) === '1.235e+4' // FF86-, V8 ~ Chrome 49-50\n&& un$ToExponential(25, 0) === '3e+1'; // IE8-\n\nvar THROWS_ON_INFINITY_FRACTION = fails(function () {\n  un$ToExponential(1, Infinity);\n}) && fails(function () {\n  un$ToExponential(1, -Infinity);\n}); // Safari <11 && FF <50\n\nvar PROPER_NON_FINITE_THIS_CHECK = !fails(function () {\n  un$ToExponential(Infinity, Infinity);\n}) && !fails(function () {\n  un$ToExponential(NaN, Infinity);\n});\nvar FORCED = !ROUNDS_PROPERLY || !THROWS_ON_INFINITY_FRACTION || !PROPER_NON_FINITE_THIS_CHECK; // `Number.prototype.toExponential` method\n// https://tc39.es/ecma262/#sec-number.prototype.toexponential\n\n$({\n  target: 'Number',\n  proto: true,\n  forced: FORCED\n}, {\n  toExponential: function toExponential(fractionDigits) {\n    var x = thisNumberValue(this);\n    if (fractionDigits === undefined) return un$ToExponential(x);\n    var f = toIntegerOrInfinity(fractionDigits);\n    if (!isFinite(x)) return String(x); // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation\n\n    if (f < 0 || f > 20) throw RangeError('Incorrect fraction digits');\n    if (ROUNDS_PROPERLY) return un$ToExponential(x, f);\n    var s = '';\n    var m = '';\n    var e = 0;\n    var c = '';\n    var d = '';\n\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n\n    if (x === 0) {\n      e = 0;\n      m = repeat('0', f + 1);\n    } else {\n      // this block is based on https://gist.github.com/SheetJSDev/1100ad56b9f856c95299ed0e068eea08\n      // TODO: improve accuracy with big fraction digits\n      var l = log10(x);\n      e = floor(l);\n      var n = 0;\n      var w = pow(10, e - f);\n      n = round(x / w);\n\n      if (2 * x >= (2 * n + 1) * w) {\n        n += 1;\n      }\n\n      if (n >= pow(10, f + 1)) {\n        n /= 10;\n        e += 1;\n      }\n\n      m = String(n);\n    }\n\n    if (f !== 0) {\n      m = stringSlice(m, 0, 1) + '.' + stringSlice(m, 1);\n    }\n\n    if (e === 0) {\n      c = '+';\n      d = '0';\n    } else {\n      c = e > 0 ? '+' : '-';\n      d = String(abs(e));\n    }\n\n    m += 'e' + c + d;\n    return s + m;\n  }\n});","map":null,"metadata":{},"sourceType":"script"}