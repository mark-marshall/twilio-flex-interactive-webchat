{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/mmarshall/Desktop/twilio-flex-interactive-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"children\", \"className\", \"collapseIcon\", \"ContentComponent\", \"ContentProps\", \"endIcon\", \"expandIcon\", \"disabled\", \"icon\", \"id\", \"label\", \"nodeId\", \"onClick\", \"onMouseDown\", \"TransitionComponent\", \"TransitionProps\"];\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport Collapse from '@mui/material/Collapse';\nimport { alpha, styled, useThemeProps } from '@mui/material/styles';\nimport { ownerDocument, useForkRef, unsupportedProp } from '@mui/material/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport TreeViewContext from '../TreeView/TreeViewContext';\nimport { DescendantProvider, useDescendant } from '../TreeView/descendants';\nimport TreeItemContent from './TreeItemContent';\nimport treeItemClasses, { getTreeItemUtilityClass } from './treeItemClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar useUtilityClasses = function useUtilityClasses(ownerState) {\n  var classes = ownerState.classes;\n  var slots = {\n    root: ['root'],\n    content: ['content'],\n    expanded: ['expanded'],\n    selected: ['selected'],\n    focused: ['focused'],\n    disabled: ['disabled'],\n    iconContainer: ['iconContainer'],\n    label: ['label'],\n    group: ['group']\n  };\n  return composeClasses(slots, getTreeItemUtilityClass, classes);\n};\n\nvar TreeItemRoot = styled('li', {\n  name: 'MuiTreeItem',\n  slot: 'Root',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  listStyle: 'none',\n  margin: 0,\n  padding: 0,\n  outline: 0\n});\nvar StyledTreeItemContent = styled(TreeItemContent, {\n  name: 'MuiTreeItem',\n  slot: 'Content',\n  overridesResolver: function overridesResolver(props, styles) {\n    return [styles.content, styles.iconContainer && _defineProperty({}, \"& .\".concat(treeItemClasses.iconContainer), styles.iconContainer), styles.label && _defineProperty({}, \"& .\".concat(treeItemClasses.label), styles.label)];\n  }\n})(function (_ref3) {\n  var _ref4;\n\n  var theme = _ref3.theme;\n  return _ref4 = {\n    padding: '0 8px',\n    width: '100%',\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    WebkitTapHighlightColor: 'transparent',\n    '&:hover': {\n      backgroundColor: theme.palette.action.hover,\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }, _defineProperty(_ref4, \"&.\".concat(treeItemClasses.disabled), {\n    opacity: theme.palette.action.disabledOpacity,\n    backgroundColor: 'transparent'\n  }), _defineProperty(_ref4, \"&.\".concat(treeItemClasses.focused), {\n    backgroundColor: theme.palette.action.focus\n  }), _defineProperty(_ref4, \"&.\".concat(treeItemClasses.selected), _defineProperty({\n    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)\n      }\n    }\n  }, \"&.\".concat(treeItemClasses.focused), {\n    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)\n  })), _defineProperty(_ref4, \"& .\".concat(treeItemClasses.iconContainer), {\n    marginRight: 4,\n    width: 15,\n    display: 'flex',\n    flexShrink: 0,\n    justifyContent: 'center',\n    '& svg': {\n      fontSize: 18\n    }\n  }), _defineProperty(_ref4, \"& .\".concat(treeItemClasses.label), _extends({\n    width: '100%',\n    // fixes overflow - see https://github.com/mui/material-ui/issues/27372\n    minWidth: 0,\n    paddingLeft: 4,\n    position: 'relative'\n  }, theme.typography.body1)), _ref4;\n});\nvar TreeItemGroup = styled(Collapse, {\n  name: 'MuiTreeItem',\n  slot: 'Group',\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.group;\n  }\n})({\n  margin: 0,\n  padding: 0,\n  marginLeft: 17\n});\nvar TreeItem = /*#__PURE__*/React.forwardRef(function TreeItem(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiTreeItem'\n  });\n\n  var children = props.children,\n      className = props.className,\n      collapseIcon = props.collapseIcon,\n      _props$ContentCompone = props.ContentComponent,\n      ContentComponent = _props$ContentCompone === void 0 ? TreeItemContent : _props$ContentCompone,\n      ContentProps = props.ContentProps,\n      endIcon = props.endIcon,\n      expandIcon = props.expandIcon,\n      disabledProp = props.disabled,\n      icon = props.icon,\n      idProp = props.id,\n      label = props.label,\n      nodeId = props.nodeId,\n      onClick = props.onClick,\n      onMouseDown = props.onMouseDown,\n      _props$TransitionComp = props.TransitionComponent,\n      TransitionComponent = _props$TransitionComp === void 0 ? Collapse : _props$TransitionComp,\n      TransitionProps = props.TransitionProps,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _React$useContext = React.useContext(TreeViewContext),\n      _React$useContext$ico = _React$useContext.icons,\n      contextIcons = _React$useContext$ico === void 0 ? {} : _React$useContext$ico,\n      focus = _React$useContext.focus,\n      isExpanded = _React$useContext.isExpanded,\n      isFocused = _React$useContext.isFocused,\n      isSelected = _React$useContext.isSelected,\n      isDisabled = _React$useContext.isDisabled,\n      multiSelect = _React$useContext.multiSelect,\n      disabledItemsFocusable = _React$useContext.disabledItemsFocusable,\n      mapFirstChar = _React$useContext.mapFirstChar,\n      unMapFirstChar = _React$useContext.unMapFirstChar,\n      registerNode = _React$useContext.registerNode,\n      unregisterNode = _React$useContext.unregisterNode,\n      treeId = _React$useContext.treeId;\n\n  var id = null;\n\n  if (idProp != null) {\n    id = idProp;\n  } else if (treeId && nodeId) {\n    id = \"\".concat(treeId, \"-\").concat(nodeId);\n  }\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      treeitemElement = _React$useState2[0],\n      setTreeitemElement = _React$useState2[1];\n\n  var contentRef = React.useRef(null);\n  var handleRef = useForkRef(setTreeitemElement, ref);\n  var descendant = React.useMemo(function () {\n    return {\n      element: treeitemElement,\n      id: nodeId\n    };\n  }, [nodeId, treeitemElement]);\n\n  var _useDescendant = useDescendant(descendant),\n      index = _useDescendant.index,\n      parentId = _useDescendant.parentId;\n\n  var expandable = Boolean(Array.isArray(children) ? children.length : children);\n  var expanded = isExpanded ? isExpanded(nodeId) : false;\n  var focused = isFocused ? isFocused(nodeId) : false;\n  var selected = isSelected ? isSelected(nodeId) : false;\n  var disabled = isDisabled ? isDisabled(nodeId) : false;\n\n  var ownerState = _extends({}, props, {\n    expanded: expanded,\n    focused: focused,\n    selected: selected,\n    disabled: disabled\n  });\n\n  var classes = useUtilityClasses(ownerState);\n  var displayIcon;\n  var expansionIcon;\n\n  if (expandable) {\n    if (!expanded) {\n      expansionIcon = expandIcon || contextIcons.defaultExpandIcon;\n    } else {\n      expansionIcon = collapseIcon || contextIcons.defaultCollapseIcon;\n    }\n  }\n\n  if (expandable) {\n    displayIcon = contextIcons.defaultParentIcon;\n  } else {\n    displayIcon = endIcon || contextIcons.defaultEndIcon;\n  }\n\n  React.useEffect(function () {\n    // On the first render a node's index will be -1. We want to wait for the real index.\n    if (registerNode && unregisterNode && index !== -1) {\n      registerNode({\n        id: nodeId,\n        idAttribute: id,\n        index: index,\n        parentId: parentId,\n        expandable: expandable,\n        disabled: disabledProp\n      });\n      return function () {\n        unregisterNode(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [registerNode, unregisterNode, parentId, index, nodeId, expandable, disabledProp, id]);\n  React.useEffect(function () {\n    if (mapFirstChar && unMapFirstChar && label) {\n      mapFirstChar(nodeId, contentRef.current.textContent.substring(0, 1).toLowerCase());\n      return function () {\n        unMapFirstChar(nodeId);\n      };\n    }\n\n    return undefined;\n  }, [mapFirstChar, unMapFirstChar, nodeId, label]);\n  var ariaSelected;\n\n  if (multiSelect) {\n    ariaSelected = selected;\n  } else if (selected) {\n    /* single-selection trees unset aria-selected on un-selected items.\n     *\n     * If the tree does not support multiple selection, aria-selected\n     * is set to true for the selected node and it is not present on any other node in the tree.\n     * Source: https://www.w3.org/TR/wai-aria-practices/#TreeView\n     */\n    ariaSelected = true;\n  }\n\n  function handleFocus(event) {\n    // DOM focus stays on the tree which manages focus with aria-activedescendant\n    if (event.target === event.currentTarget) {\n      ownerDocument(event.target).getElementById(treeId).focus({\n        preventScroll: true\n      });\n    }\n\n    var unfocusable = !disabledItemsFocusable && disabled;\n\n    if (!focused && event.currentTarget === event.target && !unfocusable) {\n      focus(event, nodeId);\n    }\n  }\n\n  return /*#__PURE__*/_jsxs(TreeItemRoot, _extends({\n    className: clsx(classes.root, className),\n    role: \"treeitem\",\n    \"aria-expanded\": expandable ? expanded : null,\n    \"aria-selected\": ariaSelected,\n    \"aria-disabled\": disabled || null,\n    ref: handleRef,\n    id: id,\n    tabIndex: -1\n  }, other, {\n    ownerState: ownerState,\n    onFocus: handleFocus,\n    children: [/*#__PURE__*/_jsx(StyledTreeItemContent, _extends({\n      as: ContentComponent,\n      ref: contentRef,\n      classes: {\n        root: classes.content,\n        expanded: classes.expanded,\n        selected: classes.selected,\n        focused: classes.focused,\n        disabled: classes.disabled,\n        iconContainer: classes.iconContainer,\n        label: classes.label\n      },\n      label: label,\n      nodeId: nodeId,\n      onClick: onClick,\n      onMouseDown: onMouseDown,\n      icon: icon,\n      expansionIcon: expansionIcon,\n      displayIcon: displayIcon,\n      ownerState: ownerState\n    }, ContentProps)), children && /*#__PURE__*/_jsx(DescendantProvider, {\n      id: nodeId,\n      children: /*#__PURE__*/_jsx(TreeItemGroup, _extends({\n        as: TransitionComponent,\n        unmountOnExit: true,\n        className: classes.group,\n        in: expanded,\n        component: \"ul\",\n        role: \"group\"\n      }, TransitionProps, {\n        children: children\n      }))\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? TreeItem.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon used to collapse the node.\n   */\n  collapseIcon: PropTypes.node,\n\n  /**\n   * The component used for the content node.\n   * @default TreeItemContent\n   */\n  ContentComponent: elementTypeAcceptingRef,\n\n  /**\n   * Props applied to ContentComponent\n   */\n  ContentProps: PropTypes.object,\n\n  /**\n   * If `true`, the node is disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * The icon displayed next to a end node.\n   */\n  endIcon: PropTypes.node,\n\n  /**\n   * The icon used to expand the node.\n   */\n  expandIcon: PropTypes.node,\n\n  /**\n   * The icon to display next to the tree node's label.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  id: PropTypes.string,\n\n  /**\n   * The tree node label.\n   */\n  label: PropTypes.node,\n\n  /**\n   * The id of the node.\n   */\n  nodeId: PropTypes.string.isRequired,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * This prop isn't supported.\n   * Use the `onNodeFocus` callback on the tree if you need to monitor a node's focus.\n   */\n  onFocus: unsupportedProp,\n\n  /**\n   * @ignore\n   */\n  onMouseDown: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * The component used for the transition.\n   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.\n   * @default Collapse\n   */\n  TransitionComponent: PropTypes.elementType,\n\n  /**\n   * Props applied to the transition element.\n   * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.\n   */\n  TransitionProps: PropTypes.object\n} : void 0;\nexport default TreeItem;","map":null,"metadata":{},"sourceType":"module"}