{"ast":null,"code":"import _defineProperty from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * This function create an object from keys, value and then assign to target\n *\n * @param {Object} obj : the target object to be assigned\n * @param {string[]} keys\n * @param {string | number} value\n *\n * @example\n * const source = {}\n * assignNestedKeys(source, ['palette', 'primary'], 'var(--palette-primary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)' } }\n *\n * @example\n * const source = { palette: { primary: 'var(--palette-primary)' } }\n * assignNestedKeys(source, ['palette', 'secondary'], 'var(--palette-secondary)')\n * console.log(source) // { palette: { primary: 'var(--palette-primary)', secondary: 'var(--palette-secondary)' } }\n */\nexport var assignNestedKeys = function assignNestedKeys(obj, keys, value) {\n  var temp = obj;\n  keys.forEach(function (k, index) {\n    if (index === keys.length - 1) {\n      if (temp && typeof temp === 'object') {\n        temp[k] = value;\n      }\n    } else if (temp && typeof temp === 'object') {\n      if (!temp[k]) {\n        temp[k] = {};\n      }\n\n      temp = temp[k];\n    }\n  });\n};\n/**\n *\n * @param {Object} obj : source object\n * @param {Function} callback : a function that will be called when\n *                   - the deepest key in source object is reached\n *                   - the value of the deepest key is NOT `undefined` | `null`\n *\n * @example\n * walkObjectDeep({ palette: { primary: { main: '#000000' } } }, console.log)\n * // ['palette', 'primary', 'main'] '#000000'\n */\n\nexport var walkObjectDeep = function walkObjectDeep(obj, callback, shouldSkipPaths) {\n  function recurse(object) {\n    var parentKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    Object.entries(object).forEach(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n\n      if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([].concat(_toConsumableArray(parentKeys), [key]))) {\n        if (value !== undefined && value !== null) {\n          if (typeof value === 'object' && Object.keys(value).length > 0) {\n            recurse(value, [].concat(_toConsumableArray(parentKeys), [key]));\n          } else {\n            callback([].concat(_toConsumableArray(parentKeys), [key]), value, object);\n          }\n        }\n      }\n    });\n  }\n\n  recurse(obj);\n};\n\nvar getCssValue = function getCssValue(keys, value) {\n  if (typeof value === 'number') {\n    if (['lineHeight', 'fontWeight', 'opacity', 'zIndex'].some(function (prop) {\n      return keys.includes(prop);\n    })) {\n      // CSS property that are unitless\n      return value;\n    }\n\n    return \"\".concat(value, \"px\");\n  }\n\n  return value;\n};\n/**\n * a function that parse theme and return { css, vars }\n *\n * @param {Object} theme\n * @param {{\n *  prefix?: string,\n *  basePrefix?: string,\n *  shouldSkipGeneratingVar?: (objectPathKeys: Array<string>, value: string | number) => boolean\n * }} options.\n *  `basePrefix`: defined by design system.\n *  `prefix`: defined by application\n *\n *   the CSS variable value will be adjusted based on the provided `basePrefix` & `prefix` which can be found in `parsedTheme`.\n *\n * @returns {{ css: Object, vars: Object, parsedTheme: typeof theme }} `css` is the stylesheet, `vars` is an object to get css variable (same structure as theme), and `parsedTheme` is the cloned version of theme.\n *\n * @example\n * const { css, vars, parsedTheme } = parser({\n *   fontSize: 12,\n *   lineHeight: 1.2,\n *   palette: { primary: { 500: 'var(--color)' } }\n * }, { prefix: 'foo' })\n *\n * console.log(css) // { '--foo-fontSize': '12px', '--foo-lineHeight': 1.2, '--foo-palette-primary-500': 'var(--foo-color)' }\n * console.log(vars) // { fontSize: '--foo-fontSize', lineHeight: '--foo-lineHeight', palette: { primary: { 500: 'var(--foo-palette-primary-500)' } } }\n * console.log(parsedTheme) // { fontSize: 12, lineHeight: 1.2, palette: { primary: { 500: 'var(--foo-color)' } } }\n */\n\n\nexport default function cssVarsParser(theme, options) {\n  var _ref3 = options || {},\n      prefix = _ref3.prefix,\n      _ref3$basePrefix = _ref3.basePrefix,\n      basePrefix = _ref3$basePrefix === void 0 ? '' : _ref3$basePrefix,\n      shouldSkipGeneratingVar = _ref3.shouldSkipGeneratingVar;\n\n  var css = {};\n  var vars = {};\n  var parsedTheme = {};\n  walkObjectDeep(theme, function (keys, value) {\n    if (typeof value === 'string' || typeof value === 'number') {\n      if (typeof value === 'string' && value.match(/var\\(\\s*--/)) {\n        // for CSS variable, apply prefix or remove basePrefix from the variable\n        if (!basePrefix && prefix) {\n          value = value.replace(/var\\(\\s*--/g, \"var(--\".concat(prefix, \"-\"));\n        } else {\n          value = prefix ? value.replace(new RegExp(\"var\\\\(\\\\s*--\".concat(basePrefix), 'g'), \"var(--\".concat(prefix)) // removing spaces\n          : value.replace(new RegExp(\"var\\\\(\\\\s*--\".concat(basePrefix, \"-\"), 'g'), 'var(--');\n        }\n      }\n\n      if (!shouldSkipGeneratingVar || shouldSkipGeneratingVar && !shouldSkipGeneratingVar(keys, value)) {\n        // only create css & var if `shouldSkipGeneratingVar` return false\n        var cssVar = \"--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(keys.join('-'));\n        Object.assign(css, _defineProperty({}, cssVar, getCssValue(keys, value)));\n        assignNestedKeys(vars, keys, \"var(\".concat(cssVar, \")\"));\n      }\n    }\n\n    assignNestedKeys(parsedTheme, keys, value);\n  }, function (keys) {\n    return keys[0] === 'vars';\n  } // skip 'vars/*' paths\n  );\n  return {\n    css: css,\n    vars: vars,\n    parsedTheme: parsedTheme\n  };\n}","map":null,"metadata":{},"sourceType":"module"}