{"ast":null,"code":"\"use strict\";\n\nvar _promise = require(\"babel-runtime/core-js/promise\");\n\nvar _promise2 = _interopRequireDefault(_promise);\n\nvar _stringify = require(\"babel-runtime/core-js/json/stringify\");\n\nvar _stringify2 = _interopRequireDefault(_stringify);\n\nvar _regenerator = require(\"babel-runtime/regenerator\");\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _asyncToGenerator2 = require(\"babel-runtime/helpers/asyncToGenerator\");\n\nvar _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);\n\nvar _map = require(\"babel-runtime/core-js/map\");\n\nvar _map2 = _interopRequireDefault(_map);\n\nvar _getPrototypeOf = require(\"babel-runtime/core-js/object/get-prototype-of\");\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar events_1 = require(\"events\");\n\nvar logger_1 = require(\"../logger\");\n\nvar message_1 = require(\"../message\");\n\nvar log = logger_1.Logger.scope('Messages');\n/**\n * Represents the collection of messages in a channel\n */\n\nvar Messages = function (_events_1$EventEmitte) {\n  (0, _inherits3.default)(Messages, _events_1$EventEmitte);\n\n  function Messages(channel, services) {\n    (0, _classCallCheck3.default)(this, Messages);\n\n    var _this = (0, _possibleConstructorReturn3.default)(this, (Messages.__proto__ || (0, _getPrototypeOf2.default)(Messages)).call(this));\n\n    _this.channel = channel;\n    _this.services = services;\n    _this.messagesByIndex = new _map2.default();\n    _this.messagesListPromise = null;\n    return _this;\n  }\n  /**\n   * Subscribe to the Messages Event Stream\n   * @param {String} name - The name of Sync object for the Messages resource.\n   * @returns {Promise}\n   */\n\n\n  (0, _createClass3.default)(Messages, [{\n    key: \"subscribe\",\n    value: function subscribe(name) {\n      var _this2 = this;\n\n      return this.messagesListPromise = this.messagesListPromise || this.services.syncClient.list({\n        id: name,\n        mode: 'open_existing'\n      }).then(function (list) {\n        list.on('itemAdded', function (args) {\n          log.debug(_this2.channel.sid + ' itemAdded: ' + args.item.index);\n          var message = new message_1.Message(_this2.channel, _this2.services, args.item.index, args.item.value);\n\n          if (_this2.messagesByIndex.has(message.index)) {\n            log.debug('Message arrived, but already known and ignored', _this2.channel.sid, message.index);\n            return;\n          }\n\n          _this2.messagesByIndex.set(message.index, message);\n\n          message.on('updated', function (args) {\n            return _this2.emit('messageUpdated', args);\n          });\n\n          _this2.emit('messageAdded', message);\n        });\n        list.on('itemRemoved', function (args) {\n          log.debug(_this2.channel.sid + ' itemRemoved: ' + args.index);\n          var index = args.index;\n\n          if (_this2.messagesByIndex.has(index)) {\n            var message = _this2.messagesByIndex.get(index);\n\n            _this2.messagesByIndex.delete(message.index);\n\n            message.removeAllListeners('updated');\n\n            _this2.emit('messageRemoved', message);\n          }\n        });\n        list.on('itemUpdated', function (args) {\n          log.debug(_this2.channel.sid + ' itemUpdated: ' + args.item.index);\n\n          var message = _this2.messagesByIndex.get(args.item.index);\n\n          if (message) {\n            message._update(args.item.value);\n          }\n        });\n        return list;\n      }).catch(function (err) {\n        _this2.messagesListPromise = null;\n\n        if (_this2.services.syncClient.connectionState != 'disconnected') {\n          log.error('Failed to get messages object for channel', _this2.channel.sid, err);\n        }\n\n        log.debug('ERROR: Failed to get messages object for channel', _this2.channel.sid, err);\n        throw err;\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {\n        var entity;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.messagesListPromise) {\n                  _context.next = 6;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.messagesListPromise;\n\n              case 3:\n                entity = _context.sent;\n                entity.close();\n                this.messagesListPromise = null;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function unsubscribe() {\n        return _ref.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Send Message to the channel\n     * @param {String} message - Message to post\n     * @param {Object} attributes Message attributes\n     * @returns Returns promise which can fail\n     */\n\n  }, {\n    key: \"send\",\n    value: function () {\n      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(message) {\n        var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return _regenerator2.default.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                log.debug('Sending text message', message, attributes);\n\n                if (!(attributes === null)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                throw new Error('Attributes can\\'t be null');\n\n              case 3:\n                if (!(attributes.constructor !== Object)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw new Error('Attributes must be a valid JSON object');\n\n              case 5:\n                return _context2.abrupt(\"return\", this.services.session.addCommand('sendMessage', {\n                  channelSid: this.channel.sid,\n                  text: message,\n                  attributes: (0, _stringify2.default)(attributes)\n                }));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function send(_x2) {\n        return _ref2.apply(this, arguments);\n      }\n\n      return send;\n    }()\n    /**\n     * Send Media Message to the channel\n     * @param {FormData | Channel#SendMediaOptions} mediaContent - Media content to post\n     * @param {Object} attributes Message attributes\n     * @returns Returns promise which can fail\n     */\n\n  }, {\n    key: \"sendMedia\",\n    value: function () {\n      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(mediaContent) {\n        var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        var media, mediaOptions;\n        return _regenerator2.default.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                log.debug('Sending media message', mediaContent, attributes);\n\n                if (!(attributes.constructor !== Object)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                throw new Error('Attributes must be a valid JSON object');\n\n              case 3:\n                media = void 0;\n\n                if (!(typeof FormData !== 'undefined' && mediaContent instanceof FormData)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                log.debug('Sending media message as FormData', mediaContent, attributes);\n                _context3.next = 8;\n                return this.services.mcsClient.postFormData(mediaContent);\n\n              case 8:\n                media = _context3.sent;\n                _context3.next = 18;\n                break;\n\n              case 11:\n                log.debug('Sending media message as SendMediaOptions', mediaContent, attributes);\n                mediaOptions = mediaContent;\n\n                if (!(!mediaOptions.contentType || !mediaOptions.media)) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                throw new Error('Media content <Channel#SendMediaOptions> must contain non-empty contentType and media');\n\n              case 15:\n                _context3.next = 17;\n                return this.services.mcsClient.post(mediaOptions.contentType, mediaOptions.media);\n\n              case 17:\n                media = _context3.sent;\n\n              case 18:\n                return _context3.abrupt(\"return\", this.services.session.addCommand('sendMediaMessage', {\n                  channelSid: this.channel.sid,\n                  mediaSid: media.sid,\n                  attributes: (0, _stringify2.default)(attributes)\n                }));\n\n              case 19:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function sendMedia(_x4) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return sendMedia;\n    }()\n    /**\n     * Returns messages from channel using paginator interface\n     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n     * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n     * @returns {Promise<Paginator<Message>>} last page of messages by default\n     */\n\n  }, {\n    key: \"getMessages\",\n    value: function getMessages(pageSize, anchor, direction) {\n      anchor = typeof anchor !== 'undefined' ? anchor : 'end';\n      direction = direction || 'backwards';\n      return this._getMessages(pageSize, anchor, direction);\n    }\n  }, {\n    key: \"wrapPaginator\",\n    value: function wrapPaginator(order, page, op) {\n      var _this3 = this; // We should swap next and prev page here, because of misfit of Sync and Chat paging conceptions\n\n\n      var shouldReverse = order === 'desc';\n\n      var np = function np() {\n        return page.nextPage().then(function (x) {\n          return _this3.wrapPaginator(order, x, op);\n        });\n      };\n\n      var pp = function pp() {\n        return page.prevPage().then(function (x) {\n          return _this3.wrapPaginator(order, x, op);\n        });\n      };\n\n      return op(page.items).then(function (items) {\n        return {\n          items: items.sort(function (x, y) {\n            return x.index - y.index;\n          }),\n          hasPrevPage: shouldReverse ? page.hasNextPage : page.hasPrevPage,\n          hasNextPage: shouldReverse ? page.hasPrevPage : page.hasNextPage,\n          prevPage: shouldReverse ? np : pp,\n          nextPage: shouldReverse ? pp : np\n        };\n      });\n    }\n  }, {\n    key: \"_upsertMessage\",\n    value: function _upsertMessage(index, value) {\n      var _this4 = this;\n\n      var cachedMessage = this.messagesByIndex.get(index);\n\n      if (cachedMessage) {\n        return cachedMessage;\n      }\n\n      var message = new message_1.Message(this.channel, this.services, index, value);\n      this.messagesByIndex.set(message.index, message);\n      message.on('updated', function (args) {\n        return _this4.emit('messageUpdated', args);\n      });\n      return message;\n    }\n    /**\n     * Returns last messages from channel\n     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.\n     * @param {String} [anchor] Most early message id which is already known, or 'end' by default\n     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default\n     * @returns {Promise<SyncPaginator<Message>>} last page of messages by default\n     * @private\n     */\n\n  }, {\n    key: \"_getMessages\",\n    value: function _getMessages(pageSize, anchor, direction) {\n      var _this5 = this;\n\n      anchor = typeof anchor !== 'undefined' ? anchor : 'end';\n      pageSize = pageSize || 30;\n      var order = direction === 'backwards' ? 'desc' : 'asc';\n      return this.messagesListPromise.then(function (messagesList) {\n        return messagesList.getItems({\n          from: anchor !== 'end' ? anchor : void 0,\n          pageSize: pageSize,\n          order: order\n        });\n      }).then(function (page) {\n        return _this5.wrapPaginator(order, page, function (items) {\n          return _promise2.default.all(items.map(function (item) {\n            return _this5._upsertMessage(item.index, item.value);\n          }));\n        });\n      });\n    }\n  }]);\n  return Messages;\n}(events_1.EventEmitter);\n\nexports.Messages = Messages;","map":null,"metadata":{},"sourceType":"script"}