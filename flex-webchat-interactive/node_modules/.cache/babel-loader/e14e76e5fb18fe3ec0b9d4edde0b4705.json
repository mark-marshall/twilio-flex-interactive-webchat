{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _templateObject,\n    _jsxFileName = \"/Users/mmarshall/Desktop/flex-webchat-interactive/src/components/Interactives.jsx\";\n\n// Package Imports\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components'; // Component Imports\n\nimport Buttons from './Buttons';\nimport Dropdown from './Dropdown';\nimport Calendar from './Calendar'; // Const Imports\n\nimport { defaultCurInteractives } from '../consts'; // Component\n\nvar Interactives = function Interactives(_ref) {\n  var colorTheme = _ref.colorTheme,\n      manager = _ref.manager,\n      messageList = _ref.messageList,\n      channelSid = _ref.channelSid;\n  // Refs\n  var interactivesContainer = useRef(null); // State\n  // @ interface Interactives {\n  //   type: '' | 'buttons' | 'dropdown' | 'calendar',\n  //   options?: {'value': string, 'content': string}[],\n  //   dropdownLabel?: string\n  //   timezone?: \"TZ database name\" as per: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n  // }\n\n  var _useState = useState(defaultCurInteractives),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1]; // Effects\n\n\n  useEffect(function () {\n    if (messageList.length > 0 && !messageList[messageList.length - 1].isFromMe && messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions) {\n      var lastMessageAttributes = messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n  useEffect(function () {\n    if (curInteractives !== defaultCurInteractives) {\n      interactivesContainer.current.scrollIntoView();\n    }\n  }, [curInteractives]); // Functions\n\n  var sendMessage = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {\n      var curChannel;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return manager.chatClient.getChannelBySid(channelSid);\n\n            case 2:\n              curChannel = _context.sent;\n              curChannel.sendMessage(message);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendMessage(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Styled Components\n\n\n  var StyledInteractivesContainer = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    width: 100%;\\n    margin-top: 20px;\\n  \"]))); // Render\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, curInteractives !== defaultCurInteractives ? /*#__PURE__*/React.createElement(StyledInteractivesContainer, {\n    ref: interactivesContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, curInteractives.type === 'buttons' ? /*#__PURE__*/React.createElement(Buttons, {\n    colorTheme: colorTheme.Buttons,\n    curInteractives: curInteractives,\n    sendMessage: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }) : curInteractives.type === 'dropdown' ? /*#__PURE__*/React.createElement(Dropdown, {\n    colorTheme: colorTheme.Dropdown,\n    curInteractives: curInteractives,\n    sendMessage: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }) : curInteractives.type === 'calendar' ? /*#__PURE__*/React.createElement(Calendar, {\n    colorTheme: colorTheme.Calendar,\n    curInteractives: curInteractives,\n    sendMessage: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}; // Redux\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/flex-webchat-interactive/src/components/Interactives.jsx"],"names":["React","useState","useEffect","useRef","connect","styled","Buttons","Dropdown","Calendar","defaultCurInteractives","Interactives","colorTheme","manager","messageList","channelSid","interactivesContainer","curInteractives","setCurInteractives","length","isFromMe","source","state","attributes","interactiveWebchatOptions","lastMessageAttributes","current","scrollIntoView","sendMessage","message","chatClient","getChannelBySid","curChannel","StyledInteractivesContainer","div","type","mapStateToProps","flex","chat","channels","session","messages"],"mappings":"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","sourcesContent":["// Package Imports\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\n\n// Component Imports\nimport Buttons from './Buttons';\nimport Dropdown from './Dropdown';\nimport Calendar from './Calendar';\n\n// Const Imports\nimport { defaultCurInteractives } from '../consts';\n\n// Component\nconst Interactives = ({ colorTheme, manager, messageList, channelSid }) => {\n  // Refs\n  const interactivesContainer = useRef(null);\n\n  // State\n  // @ interface Interactives {\n  //   type: '' | 'buttons' | 'dropdown' | 'calendar',\n  //   options?: {'value': string, 'content': string}[],\n  //   dropdownLabel?: string\n  //   timezone?: \"TZ database name\" as per: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n  // }\n  const [curInteractives, setCurInteractives] = useState(\n    defaultCurInteractives\n  );\n\n  // Effects\n  useEffect(() => {\n    if (\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe &&\n      messageList[messageList.length - 1].source.state.attributes\n        .interactiveWebchatOptions\n    ) {\n      const lastMessageAttributes =\n        messageList[messageList.length - 1].source.state.attributes\n          .interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n\n  useEffect(() => {\n    if (curInteractives !== defaultCurInteractives) {\n      interactivesContainer.current.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  // Functions\n  const sendMessage = async (message) => {\n    const curChannel = await manager.chatClient.getChannelBySid(channelSid);\n    curChannel.sendMessage(message);\n  };\n\n  // Styled Components\n  const StyledInteractivesContainer = styled.div`\n    width: 100%;\n    margin-top: 20px;\n  `;\n\n  // Render\n  return (\n    <>\n      {curInteractives !== defaultCurInteractives ? (\n        <StyledInteractivesContainer ref={interactivesContainer}>\n          {curInteractives.type === 'buttons' ? (\n            <Buttons\n              colorTheme={colorTheme.Buttons}\n              curInteractives={curInteractives}\n              sendMessage={sendMessage}\n            />\n          ) : curInteractives.type === 'dropdown' ? (\n            <Dropdown\n              colorTheme={colorTheme.Dropdown}\n              curInteractives={curInteractives}\n              sendMessage={sendMessage}\n            />\n          ) : curInteractives.type === 'calendar' ? (\n            <Calendar\n              colorTheme={colorTheme.Calendar}\n              curInteractives={curInteractives}\n              sendMessage={sendMessage}\n            />\n          ) : (\n            <></>\n          )}\n        </StyledInteractivesContainer>\n      ) : (\n        <></>\n      )}\n    </>\n  );\n};\n\n// Redux\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}