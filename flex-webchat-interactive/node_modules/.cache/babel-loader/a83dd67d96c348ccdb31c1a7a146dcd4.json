{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"view\", \"openTo\", \"className\", \"onViewChange\", \"views\"];\nimport * as React from 'react';\nimport ClockPicker from './ClockPicker';\nimport PickerView from '../internal/pickers/Picker/PickerView';\nimport { useViews } from '../internal/pickers/hooks/useViews';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n/**\n * Wrapping public API for better standalone usage of './ClockPicker'\n * @ignore - internal component.\n */\n\nexport default /*#__PURE__*/React.forwardRef(function ClockPickerStandalone(props, ref) {\n  var view = props.view,\n      openTo = props.openTo,\n      className = props.className,\n      onViewChange = props.onViewChange,\n      _props$views = props.views,\n      views = _props$views === void 0 ? ['hours', 'minutes'] : _props$views,\n      other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  var _useViews = useViews({\n    view: view,\n    views: views,\n    openTo: openTo,\n    onViewChange: onViewChange,\n    onChange: other.onChange\n  }),\n      openView = _useViews.openView,\n      setOpenView = _useViews.setOpenView,\n      nextView = _useViews.nextView,\n      previousView = _useViews.previousView;\n\n  return /*#__PURE__*/_jsx(PickerView, {\n    className: className,\n    ref: ref,\n    children: /*#__PURE__*/_jsx(ClockPicker, _extends({\n      view: openView,\n      nextViewAvailable: Boolean(nextView),\n      previousViewAvailable: Boolean(previousView),\n      openNextView: function openNextView() {\n        return setOpenView(nextView);\n      },\n      openPreviousView: function openPreviousView() {\n        return setOpenView(previousView);\n      }\n    }, other))\n  });\n});","map":null,"metadata":{},"sourceType":"module"}