{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * @classdesc A Media represents a metadata information for the media upload\n * @property {String} sid - The server-assigned unique identifier for Media\n * @property {String} serviceSid - Service instance id which Media belongs/uploaded to\n * @property {Date} dateCreated - When the Media was created\n * @property {Date} dateUpdated - When the Media was updated\n * @property {Number} size - Size of media, bytes\n * @property {String} contentType - content type of media\n * @property {String} fileName - file name, if present, null otherwise\n */\n\nvar Media = /*#__PURE__*/function () {\n  function Media(config, network, data) {\n    _classCallCheck(this, Media);\n\n    this.config = config;\n    this.network = network;\n\n    this._update(data);\n  }\n\n  _createClass(Media, [{\n    key: \"sid\",\n    get: function get() {\n      return this.state.sid;\n    }\n  }, {\n    key: \"serviceSid\",\n    get: function get() {\n      return this.state.serviceSid;\n    }\n  }, {\n    key: \"dateCreated\",\n    get: function get() {\n      return this.state.dateCreated;\n    }\n  }, {\n    key: \"dateUpdated\",\n    get: function get() {\n      return this.state.dateUpdated;\n    }\n  }, {\n    key: \"contentType\",\n    get: function get() {\n      return this.state.contentType;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.state.size;\n    }\n  }, {\n    key: \"fileName\",\n    get: function get() {\n      return this.state.filename;\n    }\n    /**\n     * Returns direct content URL to uploaded binary\n     * @public\n     * @returns {Promise<string>}\n     */\n\n  }, {\n    key: \"getContentUrl\",\n    value: function () {\n      var _getContentUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.network.get(\"\".concat(this.config.baseUrl, \"/\").concat(this.sid));\n\n              case 2:\n                response = _context.sent;\n\n                this._update(response.body);\n\n                return _context.abrupt(\"return\", Promise.resolve(this.state.contentDirectUrl));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getContentUrl() {\n        return _getContentUrl.apply(this, arguments);\n      }\n\n      return getContentUrl;\n    }()\n  }, {\n    key: \"_update\",\n    value: function _update(data) {\n      this.state = {\n        sid: data.sid,\n        serviceSid: data.service_sid,\n        channelSid: data.channel_sid,\n        messageSid: data.message_sid,\n        dateCreated: data.date_created ? new Date(data.date_created) : null,\n        dateUpdated: data.date_updated ? new Date(data.date_updated) : null,\n        size: data.size,\n        contentType: data.content_type,\n        url: data.url,\n        contentUrl: data.links.content,\n        contentDirectUrl: data.links.content_direct_temporary,\n        filename: data.filename ? data.filename : null\n      };\n    }\n  }]);\n\n  return Media;\n}();\n\nexports.Media = Media;","map":null,"metadata":{},"sourceType":"script"}