{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/mmarshall/Desktop/flex-webchat-interactive/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/flex-webchat-interactive/src/components/Interactives.jsx\";\n\n// Package Imports\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { styled, createTheme, ThemeProvider } from '@mui/system';\nvar customTheme = createTheme({\n  components: {\n    MyThemeComponent: {\n      styleOverrides: {\n        root: {\n          color: 'darkslategray'\n        },\n        primary: {\n          color: 'darkblue'\n        },\n        secondary: {\n          color: 'darkred',\n          backgroundColor: 'pink'\n        }\n      },\n      variants: [{\n        props: {\n          variant: 'dashed',\n          color: 'primary'\n        },\n        style: {\n          border: '1px dashed darkblue'\n        }\n      }, {\n        props: {\n          variant: 'dashed',\n          color: 'secondary'\n        },\n        style: {\n          border: '1px dashed darkred'\n        }\n      }]\n    }\n  }\n}); // Component Imports\n\nimport Buttons from './Buttons';\nimport Dropdown from './Dropdown';\nimport Calendar from './Calendar'; // CSS Imports\n\nimport './Interactives.css'; // Consts\n\nvar defaultCurInteractives = {\n  type: '',\n  options: []\n};\n\nvar Interactives = function Interactives(_ref) {\n  var manager = _ref.manager,\n      messageList = _ref.messageList,\n      channelSid = _ref.channelSid;\n  // Refs\n  var interactivesContainer = useRef(null); // State\n  // interface Interactives {\n  //   type: '' | 'buttons' | 'dropdown' | 'calendar',\n  //   options?: {'value': string, 'content': string}[],\n  //   timezone?: \"TZ database name\" as per: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n  // }\n\n  var _useState = useState(defaultCurInteractives),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1]; // UI\n\n\n  useEffect(function () {\n    if (messageList && messageList.length > 0 && !messageList[messageList.length - 1].isFromMe && messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions) {\n      var lastMessageAttributes = messageList[messageList.length - 1].source.state.attributes.interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n  useEffect(function () {\n    if (curInteractives !== defaultCurInteractives) {\n      interactivesContainer.current.scrollIntoView();\n    }\n  }, [curInteractives]); // Functions\n\n  var sendMessage = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(message) {\n      var curChannel;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return manager.chatClient.getChannelBySid(channelSid);\n\n            case 2:\n              curChannel = _context.sent;\n              curChannel.sendMessage(message);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function sendMessage(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // Render\n\n\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: customTheme,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, curInteractives !== defaultCurInteractives ? /*#__PURE__*/React.createElement(\"div\", {\n    ref: interactivesContainer,\n    className: \"interactive-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, curInteractives.type === 'buttons' ? /*#__PURE__*/React.createElement(Buttons, {\n    curInteractives: curInteractives,\n    sendMessage: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }) : curInteractives.type === 'dropdown' ? /*#__PURE__*/React.createElement(Dropdown, {\n    curInteractives: curInteractives,\n    sendMessage: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }) : curInteractives.type === 'calendar' ? /*#__PURE__*/React.createElement(Calendar, {\n    curInteractives: curInteractives,\n    sendMessage: sendMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null)) : /*#__PURE__*/React.createElement(React.Fragment, null));\n}; // Redux\n\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    messageList: state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/flex-webchat-interactive/src/components/Interactives.jsx"],"names":["React","useState","useEffect","useRef","connect","styled","createTheme","ThemeProvider","customTheme","components","MyThemeComponent","styleOverrides","root","color","primary","secondary","backgroundColor","variants","props","variant","style","border","Buttons","Dropdown","Calendar","defaultCurInteractives","type","options","Interactives","manager","messageList","channelSid","interactivesContainer","curInteractives","setCurInteractives","length","isFromMe","source","state","attributes","interactiveWebchatOptions","lastMessageAttributes","current","scrollIntoView","sendMessage","message","chatClient","getChannelBySid","curChannel","mapStateToProps","flex","chat","channels","session","messages"],"mappings":"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","sourcesContent":["// Package Imports\nimport React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\n\nimport { styled, createTheme, ThemeProvider } from '@mui/system';\n\nconst customTheme = createTheme({\n  components: {\n    MyThemeComponent: {\n      styleOverrides: {\n        root: {\n          color: 'darkslategray',\n        },\n        primary: {\n          color: 'darkblue',\n        },\n        secondary: {\n          color: 'darkred',\n          backgroundColor: 'pink',\n        },\n      },\n      variants: [\n        {\n          props: { variant: 'dashed', color: 'primary' },\n          style: {\n            border: '1px dashed darkblue',\n          },\n        },\n        {\n          props: { variant: 'dashed', color: 'secondary' },\n          style: {\n            border: '1px dashed darkred',\n          },\n        },\n      ],\n    },\n  },\n});\n\n// Component Imports\nimport Buttons from './Buttons';\nimport Dropdown from './Dropdown';\nimport Calendar from './Calendar';\n\n// CSS Imports\nimport './Interactives.css';\n\n// Consts\nconst defaultCurInteractives = { type: '', options: [] };\n\nconst Interactives = ({ manager, messageList, channelSid }) => {\n  // Refs\n  const interactivesContainer = useRef(null);\n\n  // State\n\n  // interface Interactives {\n  //   type: '' | 'buttons' | 'dropdown' | 'calendar',\n  //   options?: {'value': string, 'content': string}[],\n  //   timezone?: \"TZ database name\" as per: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\n  // }\n  const [curInteractives, setCurInteractives] = useState(\n    defaultCurInteractives\n  );\n\n  // UI\n  useEffect(() => {\n    if (\n      messageList &&\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe &&\n      messageList[messageList.length - 1].source.state.attributes\n        .interactiveWebchatOptions\n    ) {\n      const lastMessageAttributes =\n        messageList[messageList.length - 1].source.state.attributes\n          .interactiveWebchatOptions;\n      setCurInteractives(lastMessageAttributes);\n    } else {\n      setCurInteractives(defaultCurInteractives);\n    }\n  }, [messageList]);\n\n  useEffect(() => {\n    if (curInteractives !== defaultCurInteractives) {\n      interactivesContainer.current.scrollIntoView();\n    }\n  }, [curInteractives]);\n\n  // Functions\n  const sendMessage = async (message) => {\n    const curChannel = await manager.chatClient.getChannelBySid(channelSid);\n    curChannel.sendMessage(message);\n  };\n\n  // Render\n  return (\n    <ThemeProvider theme={customTheme}>\n      {curInteractives !== defaultCurInteractives ? (\n        <div ref={interactivesContainer} className=\"interactive-container\">\n          {curInteractives.type === 'buttons' ? (\n            <Buttons\n              curInteractives={curInteractives}\n              sendMessage={sendMessage}\n            />\n          ) : curInteractives.type === 'dropdown' ? (\n            <Dropdown\n              curInteractives={curInteractives}\n              sendMessage={sendMessage}\n            />\n          ) : curInteractives.type === 'calendar' ? (\n            <Calendar\n              curInteractives={curInteractives}\n              sendMessage={sendMessage}\n            />\n          ) : (\n            <></>\n          )}\n        </div>\n      ) : (\n        <></>\n      )}\n    </ThemeProvider>\n  );\n};\n\n// Redux\nconst mapStateToProps = (state) => {\n  return {\n    messageList:\n      state.flex.chat.channels[state.flex.session.channelSid].messages,\n    channelSid: state.flex.session.channelSid,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}