{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require(\"babel-runtime/helpers/createClass\");\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar logger_1 = require(\"./logger\");\n\nvar channel_1 = require(\"./channel\");\n\nvar log = logger_1.Logger.scope('ChannelDescriptor');\n\nfunction parseAttributes(attrs) {\n  try {\n    return JSON.parse(attrs);\n  } catch (e) {\n    log.warn('Failed to parse channel attributes', e);\n  }\n\n  return {};\n}\n\nfunction parseTime(timeString) {\n  try {\n    return new Date(timeString);\n  } catch (e) {\n    return null;\n  }\n}\n/**\n * Contains channel information.\n * Unlike {@link Channel}, this information won't be updated in realtime.\n * To have a fresh data, user should query channel descriptors again.\n *\n * @property {Object} attributes - The Channel's custom attributes\n * @property {String} createdBy - The identity of the User that created Channel\n * @property {Date} dateCreated - The Date Channel was created\n * @property {Date} dateUpdated - The Date Channel was last updated\n * @property {String} friendlyName - The Channel's name\n * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)\n * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in Channel\n * @property {Number} membersCount Number of members in a channel\n * @property {Number} messagesCount Number of messages in a channel\n * @property {String} sid - The Channel's unique system identifier\n * @property {Channel#Status} status - The Channel's status\n * @property {Channel#Type} type - The Channel's type\n * @property {String} uniqueName - The Channel's unique name\n */\n\n\nvar ChannelDescriptor = function () {\n  /**\n   * @param {Client} client Chat client instance\n   * @param {Object} descriptor Channel descriptor data object\n   * @private\n   */\n  function ChannelDescriptor(client, descriptor) {\n    (0, _classCallCheck3.default)(this, ChannelDescriptor);\n    this.client = client;\n    this.descriptor = descriptor;\n\n    if (descriptor.sid) {\n      this.sid = descriptor.sid;\n      this.channel = descriptor.sid + '.channel';\n    } else {\n      this.sid = descriptor.channel_sid;\n      this.channel = descriptor.channel_sid + '.channel';\n    }\n\n    this.uniqueName = descriptor.unique_name;\n    this.friendlyName = descriptor.friendly_name;\n    this.attributes = parseAttributes(descriptor.attributes);\n    this.createdBy = descriptor.created_by;\n    this.dateCreated = parseTime(descriptor.date_created);\n    this.dateUpdated = parseTime(descriptor.date_updated);\n    this.messagesCount = descriptor.messages_count;\n    this.membersCount = descriptor.members_count;\n    this.type = descriptor.type;\n    this.isPrivate = descriptor.type == 'private' ? true : false;\n    this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;\n\n    if (descriptor.notification_level) {\n      this.notificationLevel = descriptor.notification_level;\n    }\n\n    if (descriptor.status) {\n      this.status = channel_1.filterStatus(descriptor.status);\n    } else {\n      this.status = 'unknown';\n    }\n  }\n  /**\n   * Get channel object from descriptor.\n   * @returns {Promise<Channel>}\n   */\n\n\n  (0, _createClass3.default)(ChannelDescriptor, [{\n    key: \"getChannel\",\n    value: function getChannel() {\n      return this.client.getChannelBySid(this.sid);\n    }\n  }]);\n  return ChannelDescriptor;\n}();\n\nexports.ChannelDescriptor = ChannelDescriptor;","map":null,"metadata":{},"sourceType":"script"}