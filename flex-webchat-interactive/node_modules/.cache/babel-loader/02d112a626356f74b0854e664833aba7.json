{"ast":null,"code":"import _slicedToArray from \"/Users/mmarshall/Desktop/ps-webchat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx\";\n\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nvar Interactives = function Interactives(_ref) {\n  var messageList = _ref.messageList;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      curInteractives = _useState2[0],\n      setCurInteractives = _useState2[1];\n\n  useEffect(function () {\n    console.log(messageList);\n\n    if (messageList && messageList.length > 0 && !messageList[messageList.length - 1].isFromMe) {\n      setCurInteractives([{\n        elementType: 'button',\n        content: 'Option A'\n      }, {\n        elementType: 'button',\n        content: 'Option B'\n      }, {\n        elementType: 'button',\n        content: 'Option C'\n      }]);\n    }\n  }, [messageList]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, curInteractives.map(function (i, idx) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      key: idx,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }, i.content);\n  }));\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var channelSid = state.flex.session.channelSid;\n  return {\n    messageList: state.flex.chat.channels[channelSid].messages\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);","map":{"version":3,"sources":["/Users/mmarshall/Desktop/ps-webchat/src/components/Interactives.jsx"],"names":["React","useState","useEffect","connect","Interactives","messageList","curInteractives","setCurInteractives","console","log","length","isFromMe","elementType","content","map","i","idx","mapStateToProps","state","channelSid","flex","session","chat","channels","messages"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAqB;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;;AAAA,kBACMJ,QAAQ,CAAC,EAAD,CADd;AAAA;AAAA,MACjCK,eADiC;AAAA,MAChBC,kBADgB;;AAGxCL,EAAAA,SAAS,CAAC,YAAM;AACdM,IAAAA,OAAO,CAACC,GAAR,CAAYJ,WAAZ;;AACA,QACEA,WAAW,IACXA,WAAW,CAACK,MAAZ,GAAqB,CADrB,IAEA,CAACL,WAAW,CAACA,WAAW,CAACK,MAAZ,GAAqB,CAAtB,CAAX,CAAoCC,QAHvC,EAIE;AACAJ,MAAAA,kBAAkB,CAAC,CACjB;AAAEK,QAAAA,WAAW,EAAE,QAAf;AAAyBC,QAAAA,OAAO,EAAE;AAAlC,OADiB,EAEjB;AAAED,QAAAA,WAAW,EAAE,QAAf;AAAyBC,QAAAA,OAAO,EAAE;AAAlC,OAFiB,EAGjB;AAAED,QAAAA,WAAW,EAAE,QAAf;AAAyBC,QAAAA,OAAO,EAAE;AAAlC,OAHiB,CAAD,CAAlB;AAKD;AACF,GAbQ,EAaN,CAACR,WAAD,CAbM,CAAT;AAeA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,eAAe,CAACQ,GAAhB,CAAoB,UAACC,CAAD,EAAIC,GAAJ;AAAA,wBACnB;AAAQ,MAAA,GAAG,EAAEA,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAmBD,CAAC,CAACF,OAArB,CADmB;AAAA,GAApB,CADH,CADF;AAOD,CAzBD;;AA2BA,IAAMI,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,MAAIC,UAAU,GAAGD,KAAK,CAACE,IAAN,CAAWC,OAAX,CAAmBF,UAApC;AAEA,SAAO;AACLd,IAAAA,WAAW,EAAEa,KAAK,CAACE,IAAN,CAAWE,IAAX,CAAgBC,QAAhB,CAAyBJ,UAAzB,EAAqCK;AAD7C,GAAP;AAGD,CAND;;AAQA,eAAerB,OAAO,CAACc,eAAD,CAAP,CAAyBb,YAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nconst Interactives = ({ messageList }) => {\n  const [curInteractives, setCurInteractives] = useState([]);\n\n  useEffect(() => {\n    console.log(messageList);\n    if (\n      messageList &&\n      messageList.length > 0 &&\n      !messageList[messageList.length - 1].isFromMe\n    ) {\n      setCurInteractives([\n        { elementType: 'button', content: 'Option A' },\n        { elementType: 'button', content: 'Option B' },\n        { elementType: 'button', content: 'Option C' },\n      ]);\n    }\n  }, [messageList]);\n\n  return (\n    <div>\n      {curInteractives.map((i, idx) => (\n        <button key={idx}>{i.content}</button>\n      ))}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  let channelSid = state.flex.session.channelSid;\n\n  return {\n    messageList: state.flex.chat.channels[channelSid].messages,\n  };\n};\n\nexport default connect(mapStateToProps)(Interactives);\n"]},"metadata":{},"sourceType":"module"}