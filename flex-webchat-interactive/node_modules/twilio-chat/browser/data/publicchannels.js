"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var index_1 = require("../util/index");
var restpaginator_1 = require("../restpaginator");
var channeldescriptor_1 = require("../channeldescriptor");
/**
 * Public channels collection
 * It's a cassandra-backed pull-based collection
 */

var PublicChannels = function () {
    function PublicChannels(client, services, url) {
        (0, _classCallCheck3.default)(this, PublicChannels);

        this.client = client;
        this.services = services;
        this.url = url;
    }

    (0, _createClass3.default)(PublicChannels, [{
        key: "getChannels",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var _this = this;

                var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                var url, response;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                url = new index_1.UriBuilder(this.url).arg('PageToken', args.pageToken).build();
                                _context.next = 3;
                                return this.services.network.get(url);

                            case 3:
                                response = _context.sent;
                                return _context.abrupt("return", new restpaginator_1.RestPaginator(response.body.channels.map(function (x) {
                                    return new channeldescriptor_1.ChannelDescriptor(_this.client, x);
                                }), function (pageToken) {
                                    return _this.getChannels({ pageToken: pageToken });
                                }, response.body.meta.previous_token, response.body.meta.next_token));

                            case 5:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getChannels() {
                return _ref.apply(this, arguments);
            }

            return getChannels;
        }()
    }, {
        key: "getChannelBySid",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(sid) {
                var url, response;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                url = new index_1.UriBuilder(this.url).path(sid).build();
                                _context2.next = 3;
                                return this.services.network.get(url);

                            case 3:
                                response = _context2.sent;
                                return _context2.abrupt("return", new channeldescriptor_1.ChannelDescriptor(this.client, response.body));

                            case 5:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function getChannelBySid(_x2) {
                return _ref2.apply(this, arguments);
            }

            return getChannelBySid;
        }()
    }, {
        key: "getChannelByUniqueName",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(uniqueName) {
                var url, response;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                url = new index_1.UriBuilder(this.url).path(uniqueName).build();
                                _context3.next = 3;
                                return this.services.network.get(url);

                            case 3:
                                response = _context3.sent;
                                return _context3.abrupt("return", new channeldescriptor_1.ChannelDescriptor(this.client, response.body));

                            case 5:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getChannelByUniqueName(_x3) {
                return _ref3.apply(this, arguments);
            }

            return getChannelByUniqueName;
        }()
    }]);
    return PublicChannels;
}();

exports.PublicChannels = PublicChannels;