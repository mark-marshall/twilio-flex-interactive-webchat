"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

var _getIterator2 = require("babel-runtime/core-js/get-iterator");

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _slicedToArray2 = require("babel-runtime/helpers/slicedToArray");

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _assign = require("babel-runtime/core-js/object/assign");

var _assign2 = _interopRequireDefault(_assign);

var _map = require("babel-runtime/core-js/map");

var _map2 = _interopRequireDefault(_map);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var operation_retrier_1 = require("operation-retrier");

var Network = function () {
    function Network(config, services) {
        var _this = this;

        (0, _classCallCheck3.default)(this, Network);

        this.config = config;
        this.services = services;
        this.cache = new _map2.default();
        this.cacheLifetime = 0;
        this.services.session.getHttpCacheInterval().then(function (seconds) {
            _this.cacheLifetime = seconds * 1000;
            _this.cleanupCache();
        });
    }

    (0, _createClass3.default)(Network, [{
        key: "backoffConfig",
        value: function backoffConfig() {
            return (0, _assign2.default)(this.config.backoffConfigDefault, this.config.backoffConfigOverride);
        }
    }, {
        key: "retryWhenThrottled",
        value: function retryWhenThrottled() {
            if (typeof this.config.retryWhenThrottledOverride !== 'undefined') {
                return this.config.retryWhenThrottledOverride;
            }
            if (typeof this.config.retryWhenThrottledDefault !== 'undefined') {
                return this.config.retryWhenThrottledDefault;
            }
            return false;
        }
    }, {
        key: "isExpired",
        value: function isExpired(timestamp) {
            return !this.cacheLifetime || Date.now() - timestamp > this.cacheLifetime;
        }
    }, {
        key: "cleanupCache",
        value: function cleanupCache() {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = (0, _getIterator3.default)(this.cache), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var _ref = _step.value;

                    var _ref2 = (0, _slicedToArray3.default)(_ref, 2);

                    var k = _ref2[0];
                    var v = _ref2[1];

                    if (this.isExpired(v.timestamp)) {
                        this.cache.delete(k);
                    }
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }

            if (this.cache.size === 0) {
                clearInterval(this.timer);
            }
        }
    }, {
        key: "pokeTimer",
        value: function pokeTimer() {
            var _this2 = this;

            this.timer = this.timer || setInterval(function () {
                return _this2.cleanupCache();
            }, this.cacheLifetime * 2);
        }
    }, {
        key: "executeWithRetry",
        value: function executeWithRetry(request) {
            var _this3 = this;

            var retryWhenThrottled = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

            return new _promise2.default(function (resolve, reject) {
                var codesToRetryOn = [502, 503, 504];
                if (retryWhenThrottled) {
                    codesToRetryOn.push(429);
                }
                var retrier = new operation_retrier_1.Retrier(_this3.backoffConfig());
                retrier.on('attempt', function () {
                    request().then(function (result) {
                        return retrier.succeeded(result);
                    }).catch(function (err) {
                        if (codesToRetryOn.indexOf(err.status) > -1) {
                            retrier.failed(err);
                        } else if (err.message === 'Twilsock disconnected') {
                            // Ugly hack. We must make a proper exceptions for twilsock
                            retrier.failed(err);
                        } else {
                            // Fatal error
                            retrier.removeAllListeners();
                            retrier.cancel();
                            reject(err);
                        }
                    });
                });
                retrier.on('succeeded', function (result) {
                    resolve(result);
                });
                retrier.on('cancelled', function (err) {
                    return reject(err);
                });
                retrier.on('failed', function (err) {
                    return reject(err);
                });
                retrier.start();
            });
        }
    }, {
        key: "get",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(url) {
                var _this4 = this;

                var cacheEntry, headers, response;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                cacheEntry = this.cache.get(url);

                                if (!(cacheEntry && !this.isExpired(cacheEntry.timestamp))) {
                                    _context.next = 3;
                                    break;
                                }

                                return _context.abrupt("return", cacheEntry.response);

                            case 3:
                                headers = {};
                                _context.next = 6;
                                return this.executeWithRetry(function () {
                                    return _this4.services.transport.get(url, headers);
                                }, this.retryWhenThrottled());

                            case 6:
                                response = _context.sent;

                                this.cache.set(url, { response: response, timestamp: Date.now() });
                                this.pokeTimer();
                                return _context.abrupt("return", response);

                            case 10:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function get(_x2) {
                return _ref3.apply(this, arguments);
            }

            return get;
        }()
    }]);
    return Network;
}();

exports.Network = Network;