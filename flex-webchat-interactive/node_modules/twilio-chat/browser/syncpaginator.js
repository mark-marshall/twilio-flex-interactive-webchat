'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @classdesc Pagination helper class for Sync
 *
 * @property {Array} items Array of elements on current page
 * @property {boolean} hasNextPage
 * @property {boolean} hasPrevPage
 */

var SyncPaginator = function () {
    /**
     * @param {Array} items Array of element for current page
     * @param {Object} params
     */
    function SyncPaginator(items, pageSize, anchor, direction, source) {
        (0, _classCallCheck3.default)(this, SyncPaginator);

        this.hasNextPage = direction === 'backwards' ? anchor !== 'end' : items.length === pageSize;
        this.hasPrevPage = direction === 'backwards' ? items.length === pageSize && items.length > 0 && items[0].index !== 0 : anchor !== 'end';
        this.state = {
            source: source,
            nextPageArgs: this.hasNextPage ? [pageSize, items[items.length - 1].index, 'forward'] : null,
            prevPageArgs: this.hasPrevPage ? [pageSize, items.length > 0 ? items[0].index : 'end', 'backwards'] : null,
            items: items
        };
    }

    (0, _createClass3.default)(SyncPaginator, [{
        key: 'nextPage',
        value: function nextPage() {
            return this.hasNextPage ? this.state.source.apply(null, this.state.nextPageArgs) : _promise2.default.reject(new Error('No next page for query'));
        }
    }, {
        key: 'prevPage',
        value: function prevPage() {
            return this.hasPrevPage ? this.state.source.apply(null, this.state.prevPageArgs) : _promise2.default.reject(new Error('No prev page for query'));
        }
    }, {
        key: 'items',
        get: function get() {
            return this.state.items;
        }
    }]);
    return SyncPaginator;
}();

exports.SyncPaginator = SyncPaginator;