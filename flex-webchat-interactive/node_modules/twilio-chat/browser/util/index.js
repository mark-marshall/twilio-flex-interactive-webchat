"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var JsonDiff = require("rfc6902");
/**
 * Checks if objects are equal
 */
function isDeepEqual(o1, o2) {
    return JsonDiff.createPatch(o1, o2).length === 0;
}
exports.isDeepEqual = isDeepEqual;
/**
 * Deep-clone an object. Note that this does not work on object containing
 * functions.
 * @param {object} obj - the object to deep-clone
 * @returns {object}
 */
function deepClone(obj) {
    return JSON.parse((0, _stringify2.default)(obj));
}
exports.deepClone = deepClone;
function parseToNumber(value) {
    if (typeof value !== 'undefined' && !isNaN(Number(value))) {
        return Number(value);
    }
    return null;
}
exports.parseToNumber = parseToNumber;
function parseTime(timeString) {
    try {
        return new Date(timeString);
    } catch (e) {
        return null;
    }
}
exports.parseTime = parseTime;
function parseAttributes(rawAttributes, warningMessage, log) {
    var attributes = {};
    if (rawAttributes) {
        try {
            attributes = JSON.parse(rawAttributes);
        } catch (e) {
            log.warn(warningMessage);
        }
    }
    return attributes;
}
exports.parseAttributes = parseAttributes;
/**
 * Construct URI with query parameters
 */

var UriBuilder = function () {
    function UriBuilder(base) {
        (0, _classCallCheck3.default)(this, UriBuilder);

        this.base = base.replace(/\/$/, '');
        this.args = [];
        this.paths = [];
    }

    (0, _createClass3.default)(UriBuilder, [{
        key: "arg",
        value: function arg(name, value) {
            if (typeof value !== 'undefined') {
                this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));
            }
            return this;
        }
    }, {
        key: "path",
        value: function path(name) {
            this.paths.push(encodeURIComponent(name));
            return this;
        }
    }, {
        key: "build",
        value: function build() {
            var result = this.base;
            if (this.paths.length) {
                result += '/' + this.paths.join('/');
            }
            if (this.args.length) {
                result += '?' + this.args.join('&');
            }
            return result;
        }
    }]);
    return UriBuilder;
}();

exports.UriBuilder = UriBuilder;