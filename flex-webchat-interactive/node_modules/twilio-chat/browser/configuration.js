"use strict";

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var TYPING_PATH = '/v1/typing';
var TYPING_TIMEOUT = 5;
var HTTP_CACHE_LIFETIME = 'PT5S';
var CONSUMPTION_HORIZON_SENDING_INTERVAL = 'PT5S';
var USER_INFOS_TO_SUBSCRIBE = 100;
var MINIMUM_RETRY_DELAY = 1000;
var MAXIMUM_RETRY_DELAY = 4000;
var MAXIMUM_ATTEMPTS_COUNT = 3;
var RETRY_WHEN_THROTTLED = true;

var Configuration = function () {
    function Configuration(options) {
        (0, _classCallCheck3.default)(this, Configuration);

        options = options || {};
        var constructorOptions = options.Chat || options.IPMessaging || options || {};
        this.region = constructorOptions.region || options.region;
        this.baseUrl = constructorOptions.apiUri || constructorOptions.typingUri || (!this.region || this.region === 'us1' ? 'https://aim.twilio.com' : "https://aim." + this.region + ".twilio.com");
        this.typingIndicatorUri = this.baseUrl + TYPING_PATH;
        this.typingIndicatorTimeoutOverride = constructorOptions.typingIndicatorTimeoutOverride;
        this.httpCacheIntervalOverride = constructorOptions.httpCacheIntervalOverride;
        this.consumptionReportIntervalOverride = constructorOptions.consumptionReportIntervalOverride;
        this.userInfosToSubscribeOverride = constructorOptions.userInfosToSubscribeOverride;
        this.retryWhenThrottledOverride = constructorOptions.retryWhenThrottledOverride;
        this.backoffConfigOverride = constructorOptions.backoffConfigOverride;
    }

    (0, _createClass3.default)(Configuration, [{
        key: "typingIndicatorTimeoutDefault",
        get: function get() {
            return TYPING_TIMEOUT * 1000;
        }
    }, {
        key: "httpCacheIntervalDefault",
        get: function get() {
            return HTTP_CACHE_LIFETIME;
        }
    }, {
        key: "consumptionReportIntervalDefault",
        get: function get() {
            return CONSUMPTION_HORIZON_SENDING_INTERVAL;
        }
    }, {
        key: "userInfosToSubscribeDefault",
        get: function get() {
            return USER_INFOS_TO_SUBSCRIBE;
        }
    }, {
        key: "retryWhenThrottledDefault",
        get: function get() {
            return RETRY_WHEN_THROTTLED;
        }
    }, {
        key: "backoffConfigDefault",
        get: function get() {
            return {
                min: MINIMUM_RETRY_DELAY,
                max: MAXIMUM_RETRY_DELAY,
                maxAttemptsCount: MAXIMUM_ATTEMPTS_COUNT
            };
        }
    }]);
    return Configuration;
}();

exports.Configuration = Configuration;