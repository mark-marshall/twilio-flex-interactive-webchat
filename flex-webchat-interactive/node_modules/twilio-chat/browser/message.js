"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require("babel-runtime/helpers/createClass");

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require("babel-runtime/helpers/inherits");

var _inherits3 = _interopRequireDefault(_inherits2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var index_1 = require("./util/index");
var logger_1 = require("./logger");
var media_1 = require("./media");
var log = logger_1.Logger.scope('Message');
function parseAttributes(msgSid, attributes) {
    try {
        return attributes ? JSON.parse(attributes) : {};
    } catch (e) {
        log.warn('Got malformed attributes for the message', msgSid);
        return {};
    }
}
/**
 * @classdesc A Message represents a Message in a Channel.
 * @property {String} author - The name of the user that sent Message
 * @property {String} body - The body of the Message. Is null if Message is Media Message
 * @property {Object} attributes - Message custom attributes
 * @property {Channel} channel - Channel Message belongs to
 * @property {Date} dateUpdated - When Message was updated
 * @property {Number} index - Index of Message in the Channel's messages list
 * @property {String} lastUpdatedBy - Identity of the last user that updated Message
 * @property {Media} media - Contains Media information (if present)
 * @property {String} memberSid - Authoring Member's server-assigned unique identifier
 * @property {String} sid - The server-assigned unique identifier for Message
 * @property {Date} timestamp - When Message was created
 * @property {'text' | 'media' } type - Type of message: 'text' or 'media'
 * @fires Message#updated
 */

var Message = function (_events_1$EventEmitte) {
    (0, _inherits3.default)(Message, _events_1$EventEmitte);

    /**
     * The update reason for <code>updated</code> event emitted on Message
     * @typedef {('body' | 'lastUpdatedBy' | 'dateUpdated' | 'timestamp' | 'attributes' | 'author')} Message#UpdateReason
     */
    function Message(channel, services, index, data) {
        (0, _classCallCheck3.default)(this, Message);

        var _this = (0, _possibleConstructorReturn3.default)(this, (Message.__proto__ || (0, _getPrototypeOf2.default)(Message)).call(this));

        _this.channel = channel;
        _this.services = services;
        _this.state = {
            sid: data.sid,
            index: index,
            author: data.author == null ? null : data.author,
            body: data.text,
            timestamp: data.timestamp ? new Date(data.timestamp) : null,
            dateUpdated: data.dateUpdated ? new Date(data.dateUpdated) : null,
            lastUpdatedBy: data.lastUpdatedBy ? data.lastUpdatedBy : null,
            attributes: parseAttributes(data.sid, data.attributes),
            type: data.type ? data.type : 'text',
            media: data.type && data.type === 'media' && data.media ? new media_1.Media(data.media, _this.services) : null,
            memberSid: data.memberSid == null ? null : data.memberSid
        };
        return _this;
    }

    (0, _createClass3.default)(Message, [{
        key: "_update",
        value: function _update(data) {
            var updateReasons = [];
            if ((data.text || typeof data.text === 'string') && data.text !== this.state.body) {
                this.state.body = data.text;
                updateReasons.push('body');
            }
            if (data.lastUpdatedBy && data.lastUpdatedBy !== this.state.lastUpdatedBy) {
                this.state.lastUpdatedBy = data.lastUpdatedBy;
                updateReasons.push('lastUpdatedBy');
            }
            if (data.author && data.author !== this.state.author) {
                this.state.author = data.author;
                updateReasons.push('author');
            }
            if (data.dateUpdated && new Date(data.dateUpdated).getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
                this.state.dateUpdated = new Date(data.dateUpdated);
                updateReasons.push('dateUpdated');
            }
            if (data.timestamp && new Date(data.timestamp).getTime() !== (this.state.timestamp && this.state.timestamp.getTime())) {
                this.state.timestamp = new Date(data.timestamp);
                updateReasons.push('timestamp');
            }
            var updatedAttributes = parseAttributes(this.sid, data.attributes);
            if (!index_1.isDeepEqual(this.state.attributes, updatedAttributes)) {
                this.state.attributes = updatedAttributes;
                updateReasons.push('attributes');
            }
            if (updateReasons.length > 0) {
                this.emit('updated', { message: this, updateReasons: updateReasons });
            }
        }
        /**
         * Get Member who is author of the Message
         * @returns {Promise<Member>}
         */

    }, {
        key: "getMember",
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var _this2 = this;

                var member, errorMesage;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                member = null;

                                if (!this.state.memberSid) {
                                    _context.next = 5;
                                    break;
                                }

                                _context.next = 4;
                                return this.channel.getMemberBySid(this.memberSid).catch(function () {
                                    log.debug('Member with sid "' + _this2.memberSid + '" not found for message ' + _this2.sid);
                                    return null;
                                });

                            case 4:
                                member = _context.sent;

                            case 5:
                                if (!(!member && this.state.author)) {
                                    _context.next = 9;
                                    break;
                                }

                                _context.next = 8;
                                return this.channel.getMemberByIdentity(this.state.author).catch(function () {
                                    log.debug('Member with identity "' + _this2.author + '" not found for message ' + _this2.sid);
                                    return null;
                                });

                            case 8:
                                member = _context.sent;

                            case 9:
                                if (!member) {
                                    _context.next = 11;
                                    break;
                                }

                                return _context.abrupt("return", member);

                            case 11:
                                errorMesage = 'Member with ';

                                if (this.state.memberSid) {
                                    errorMesage += 'SID \'' + this.state.memberSid + '\' ';
                                }
                                if (this.state.author) {
                                    if (this.state.memberSid) {
                                        errorMesage += 'or ';
                                    }
                                    errorMesage += 'identity \'' + this.state.author + '\' ';
                                }
                                if (errorMesage === 'Member with ') {
                                    errorMesage = 'Member ';
                                }
                                errorMesage += 'was not found';
                                throw new Error(errorMesage);

                            case 17:
                            case "end":
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getMember() {
                return _ref.apply(this, arguments);
            }

            return getMember;
        }()
        /**
         * Remove the Message.
         * @returns {Promise<Message|SessionError>}
         */

    }, {
        key: "remove",
        value: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.services.session.addCommand('deleteMessage', {
                                    channelSid: this.channel.sid,
                                    messageIdx: this.index.toString()
                                });

                            case 2:
                                return _context2.abrupt("return", this);

                            case 3:
                            case "end":
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function remove() {
                return _ref2.apply(this, arguments);
            }

            return remove;
        }()
        /**
         * Edit message body.
         * @param {String} body - new body of Message.
         * @returns {Promise<Message|Error|SessionError>}
         */

    }, {
        key: "updateBody",
        value: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(body) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if (!(typeof body !== 'string')) {
                                    _context3.next = 2;
                                    break;
                                }

                                throw new Error('Body <String> is a required parameter for updateBody');

                            case 2:
                                _context3.next = 4;
                                return this.services.session.addCommand('editMessage', {
                                    channelSid: this.channel.sid,
                                    messageIdx: this.index.toString(),
                                    text: body
                                });

                            case 4:
                                return _context3.abrupt("return", this);

                            case 5:
                            case "end":
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function updateBody(_x) {
                return _ref3.apply(this, arguments);
            }

            return updateBody;
        }()
        /**
         * Edit message attributes.
         * @param {Object} attributes new attributes for Message.
         * @returns {Promise<Message|Error|SessionError>}
         */

    }, {
        key: "updateAttributes",
        value: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(attributes) {
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if (!(typeof attributes === 'undefined')) {
                                    _context4.next = 4;
                                    break;
                                }

                                throw new Error('Attributes is required parameter');

                            case 4:
                                if (!(attributes === null)) {
                                    _context4.next = 8;
                                    break;
                                }

                                throw new Error('Attributes can\'t be null');

                            case 8:
                                if (!(attributes.constructor !== Object)) {
                                    _context4.next = 10;
                                    break;
                                }

                                throw new Error('Attributes must be a valid JSON object');

                            case 10:
                                _context4.next = 12;
                                return this.services.session.addCommand('editMessageAttributes', {
                                    channelSid: this.channel.sid,
                                    messageIdx: this.index,
                                    attributes: (0, _stringify2.default)(attributes)
                                });

                            case 12:
                                return _context4.abrupt("return", this);

                            case 13:
                            case "end":
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function updateAttributes(_x2) {
                return _ref4.apply(this, arguments);
            }

            return updateAttributes;
        }()
    }, {
        key: "sid",
        get: function get() {
            return this.state.sid;
        }
    }, {
        key: "author",
        get: function get() {
            return this.state.author;
        }
    }, {
        key: "body",
        get: function get() {
            if (this.type === 'media') {
                return null;
            }
            return this.state.body;
        }
    }, {
        key: "dateUpdated",
        get: function get() {
            return this.state.dateUpdated;
        }
    }, {
        key: "index",
        get: function get() {
            return this.state.index;
        }
    }, {
        key: "lastUpdatedBy",
        get: function get() {
            return this.state.lastUpdatedBy;
        }
    }, {
        key: "timestamp",
        get: function get() {
            return this.state.timestamp;
        }
    }, {
        key: "attributes",
        get: function get() {
            return this.state.attributes;
        }
    }, {
        key: "type",
        get: function get() {
            return this.state.type;
        }
    }, {
        key: "media",
        get: function get() {
            return this.state.media;
        }
    }, {
        key: "memberSid",
        get: function get() {
            return this.state.memberSid;
        }
    }]);
    return Message;
}(events_1.EventEmitter);

exports.Message = Message;
/**
 * Fired when the Message's properties or body has been updated.
 * @event Message#updated
 * @type {Object}
 * @property {Message} message - Updated Message
 * @property {Message#UpdateReason[]} updateReasons - Array of Message's updated event reasons
 */