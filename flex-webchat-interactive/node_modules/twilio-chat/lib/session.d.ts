import { Configuration } from './configuration';
import { SyncClient } from 'twilio-sync';
interface SessionLinks {
    publicChannelsUrl: string;
    myChannelsUrl: string;
    typingUrl: string;
    syncListUrl: string;
    usersUrl: string;
    mediaServiceUrl: string;
}
export interface SessionServices {
    syncClient: SyncClient;
}
/**
 *  Constructs the instance of Session
 *
 *  @classdesc Provides the interface to send the command to the server
 *  It is reliable, which means that it tracks the command object state
 *  and waits the answer from the server.
 */
declare class Session {
    readonly services: SessionServices;
    private endpointPlatform;
    private config;
    private pendingCommands;
    private sessionStreamPromise;
    private readonly sessionInfo;
    private currentContext;
    constructor(services: SessionServices, config: Configuration);
    get identity(): string;
    get reachabilityEnabled(): boolean;
    private handleContextUpdate;
    initialize(): Promise<Session>;
    /**
     * Sends the command to the server
     * @returns Promise the promise, which is being fulfilled only when service will reply
     */
    addCommand(action: string, params: Object): Promise<unknown>;
    /**
     * @private
     */
    private processCommand;
    /**
     * @private
     */
    private processCommandResponse;
    private getSessionContext;
    getSessionLinks(): Promise<SessionLinks>;
    getChannelsId(): Promise<string>;
    getMyChannelsId(): Promise<string>;
    getMaxUserInfosToSubscribe(): Promise<number>;
    getUsersData(): Promise<{
        user: string;
        identity: string;
    }>;
    getConsumptionReportInterval(): Promise<number>;
    getHttpCacheInterval(): Promise<number>;
}
export { SessionLinks, Session };
