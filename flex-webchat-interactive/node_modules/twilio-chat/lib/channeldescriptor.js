"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("./logger");
const channel_1 = require("./channel");
const log = logger_1.Logger.scope('ChannelDescriptor');
function parseAttributes(attrs) {
    try {
        return JSON.parse(attrs);
    }
    catch (e) {
        log.warn('Failed to parse channel attributes', e);
    }
    return {};
}
function parseTime(timeString) {
    try {
        return new Date(timeString);
    }
    catch (e) {
        return null;
    }
}
/**
 * Contains channel information.
 * Unlike {@link Channel}, this information won't be updated in realtime.
 * To have a fresh data, user should query channel descriptors again.
 *
 * @property {Object} attributes - The Channel's custom attributes
 * @property {String} createdBy - The identity of the User that created Channel
 * @property {Date} dateCreated - The Date Channel was created
 * @property {Date} dateUpdated - The Date Channel was last updated
 * @property {String} friendlyName - The Channel's name
 * @property {Boolean} isPrivate - Whether the channel is private (as opposed to public)
 * @property {Number} lastConsumedMessageIndex - Index of the last Message the User has consumed in Channel
 * @property {Number} membersCount Number of members in a channel
 * @property {Number} messagesCount Number of messages in a channel
 * @property {String} sid - The Channel's unique system identifier
 * @property {Channel#Status} status - The Channel's status
 * @property {Channel#Type} type - The Channel's type
 * @property {String} uniqueName - The Channel's unique name
 */
class ChannelDescriptor {
    /**
     * @param {Client} client Chat client instance
     * @param {Object} descriptor Channel descriptor data object
     * @private
     */
    constructor(client, descriptor) {
        this.client = client;
        this.descriptor = descriptor;
        if (descriptor.sid) {
            this.sid = descriptor.sid;
            this.channel = descriptor.sid + '.channel';
        }
        else {
            this.sid = descriptor.channel_sid;
            this.channel = descriptor.channel_sid + '.channel';
        }
        this.uniqueName = descriptor.unique_name;
        this.friendlyName = descriptor.friendly_name;
        this.attributes = parseAttributes(descriptor.attributes);
        this.createdBy = descriptor.created_by;
        this.dateCreated = parseTime(descriptor.date_created);
        this.dateUpdated = parseTime(descriptor.date_updated);
        this.messagesCount = descriptor.messages_count;
        this.membersCount = descriptor.members_count;
        this.type = descriptor.type;
        this.isPrivate = descriptor.type == 'private' ? true : false;
        this.lastConsumedMessageIndex = descriptor.last_consumed_message_index;
        if (descriptor.notification_level) {
            this.notificationLevel = descriptor.notification_level;
        }
        if (descriptor.status) {
            this.status = channel_1.filterStatus(descriptor.status);
        }
        else {
            this.status = 'unknown';
        }
    }
    /**
     * Get channel object from descriptor.
     * @returns {Promise<Channel>}
     */
    getChannel() {
        return this.client.getChannelBySid(this.sid);
    }
}
exports.ChannelDescriptor = ChannelDescriptor;
