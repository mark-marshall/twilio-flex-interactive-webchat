'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @classdesc Pagination helper class for Sync
 *
 * @property {Array} items Array of elements on current page
 * @property {boolean} hasNextPage
 * @property {boolean} hasPrevPage
 */
class SyncPaginator {
    /**
     * @param {Array} items Array of element for current page
     * @param {Object} params
     */
    constructor(items, pageSize, anchor, direction, source) {
        this.hasNextPage = direction === 'backwards' ? anchor !== 'end' : items.length === pageSize;
        this.hasPrevPage = direction === 'backwards'
            ? items.length === pageSize && (items.length > 0 && items[0].index !== 0)
            : anchor !== 'end';
        this.state = {
            source,
            nextPageArgs: this.hasNextPage ? [pageSize, items[items.length - 1].index, 'forward'] : null,
            prevPageArgs: this.hasPrevPage ? [pageSize, (items.length > 0 ? items[0].index : 'end'), 'backwards'] : null,
            items
        };
    }
    get items() { return this.state.items; }
    nextPage() {
        return this.hasNextPage ? this.state.source.apply(null, this.state.nextPageArgs)
            : Promise.reject(new Error('No next page for query'));
    }
    prevPage() {
        return this.hasPrevPage ? this.state.source.apply(null, this.state.prevPageArgs)
            : Promise.reject(new Error('No prev page for query'));
    }
}
exports.SyncPaginator = SyncPaginator;
