/// <reference types="node" />
import { EventEmitter } from 'events';
import { MemberDescriptor, Member } from '../member';
import { Channel } from '../channel';
import { SyncMap, SyncClient } from 'twilio-sync';
import { Users } from './users';
import { Session } from '../session';
export interface MembersServices {
    session: Session;
    syncClient: SyncClient;
    users: Users;
}
/**
 * @classdesc Represents the collection of members for the channel
 * @fires Members#memberJoined
 * @fires Members#memberLeft
 * @fires Members#memberUpdated
 */
declare class Members extends EventEmitter {
    services: MembersServices;
    rosterEntityPromise: Promise<SyncMap>;
    readonly channel: Channel;
    readonly members: Map<string, Member>;
    constructor(channel: Channel, services: MembersServices, members: Map<string, Member>);
    unsubscribe(): Promise<void>;
    subscribe(rosterObjectName: string): Promise<SyncMap>;
    upsertMember(memberSid: string, data: MemberDescriptor): Promise<Member>;
    /**
     * @returns {Promise<Array<Member>>} returns list of members {@see Member}
     */
    getMembers(): Promise<Array<Member>>;
    /**
     * Get member by SID from channel
     * @returns {Promise<|Error>}
     */
    getMemberBySid(memberSid: string): Promise<Member>;
    /**
     * Get member by identity from channel
     * @returns {Promise<|Error>}
     */
    getMemberByIdentity(identity: string): Promise<Member>;
    /**
     * Add user to the channel
     * @returns {Promise<void|SessionError>}
     */
    add(identity: string): Promise<Object>;
    /**
     * Invites user to the channel
     * User can choose either to join or not
     * @returns {Promise<|SessionError>}
     */
    invite(identity: string): Promise<Object>;
    /**
     * Remove member from channel by Identity
     * @returns {Promise<|SessionError>}
     */
    removeByIdentity(identity: string): Promise<Object>;
    /**
     * Remove member from channel by sid
     * @returns {Promise<|SessionError>}
     */
    removeBySid(sid: string): Promise<Object>;
}
export { Members };
/**
 * Fired when member joined channel
 * @event Members#memberJoined
 * @type {Member}
 */
/**
 * Fired when member left channel
 * @event Members#memberLeft
 * @type {Member}
 */
/**
 * Fired when member updated
 * @event Members#memberUpdated
 * @type {Object}
 * @property {Member} member - Updated Member
 * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons
 */
