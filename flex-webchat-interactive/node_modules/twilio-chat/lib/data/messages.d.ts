/// <reference types="node" />
import { EventEmitter } from 'events';
import { Message } from '../message';
import { Channel } from '../channel';
import { SyncList, SyncClient } from 'twilio-sync';
import { SyncPaginator } from '../syncpaginator';
import { Session } from '../session';
import { McsClient } from 'twilio-mcs-client';
export interface MessagesServices {
    session: Session;
    mcsClient: McsClient;
    syncClient: SyncClient;
}
/**
 * Represents the collection of messages in a channel
 */
declare class Messages extends EventEmitter {
    private readonly services;
    private readonly messagesByIndex;
    private messagesListPromise;
    readonly channel: Channel;
    constructor(channel: Channel, services: MessagesServices);
    /**
     * Subscribe to the Messages Event Stream
     * @param {String} name - The name of Sync object for the Messages resource.
     * @returns {Promise}
     */
    subscribe(name: string): Promise<SyncList>;
    unsubscribe(): Promise<void>;
    /**
     * Send Message to the channel
     * @param {String} message - Message to post
     * @param {Object} attributes Message attributes
     * @returns Returns promise which can fail
     */
    send(message: string, attributes?: Object): Promise<unknown>;
    /**
     * Send Media Message to the channel
     * @param {FormData | Channel#SendMediaOptions} mediaContent - Media content to post
     * @param {Object} attributes Message attributes
     * @returns Returns promise which can fail
     */
    sendMedia(mediaContent: FormData | Channel.SendMediaOptions, attributes?: Object): Promise<unknown>;
    /**
     * Returns messages from channel using paginator interface
     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.
     * @param {String} [anchor] Most early message id which is already known, or 'end' by default
     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default
     * @returns {Promise<Paginator<Message>>} last page of messages by default
     */
    getMessages(pageSize: any, anchor: any, direction: any): Promise<SyncPaginator<Message>>;
    private wrapPaginator;
    private _upsertMessage;
    /**
     * Returns last messages from channel
     * @param {Number} [pageSize] Number of messages to return in single chunk. By default it's 30.
     * @param {String} [anchor] Most early message id which is already known, or 'end' by default
     * @param {String} [direction] Pagination order 'backwards' or 'forward', or 'forward' by default
     * @returns {Promise<SyncPaginator<Message>>} last page of messages by default
     * @private
     */
    private _getMessages;
}
export { Messages };
