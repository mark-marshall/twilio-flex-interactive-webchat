"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("./logger");
const log = logger_1.Logger.scope('UserDescriptor');
function parseAttributes(attrs) {
    try {
        return JSON.parse(attrs);
    }
    catch (e) {
        log.warn('Failed to parse user attributes', e);
    }
    return {};
}
/**
 * @classdesc Extended user information.
 * Note that <code>online</code> and <code>notifiable</code> properties are eligible
 * to use only if reachability function is enabled.
 * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.
 *
 * @property {String} identity - User identity
 * @property {String} friendlyName - User friendly name, null if not set
 * @property {Object} attributes - Object with custom attributes for user
 * @property {Boolean} online - User real-time channel connection status
 * @property {Boolean} notifiable - User push notification registration status
 *
 * @constructor
 * @param {Users} users Users instance
 * @param {Object} descriptor User descriptor data object
 */
class UserDescriptor {
    /**
     * @param {UserDescriptorServices} services - services, needed for UserDescriptor
     * @param {Object} descriptor User descriptor data object
     * @private
     */
    constructor(services, descriptor) {
        this.services = services;
        this.descriptor = descriptor;
        this.identity = descriptor.identity;
        this.friendlyName = descriptor.friendly_name;
        this.attributes = parseAttributes(descriptor.attributes);
        this.online = descriptor.is_online;
        this.notifiable = descriptor.is_notifiable;
    }
    /**
     * Gets User object from descriptor and subscribes to it.
     * @returns {Promise<User>}
     */
    subscribe() {
        return this.services.users.getUser(this.identity, this.descriptor.sync_unique_name);
    }
    _getDescriptor() {
        return this.descriptor;
    }
}
exports.UserDescriptor = UserDescriptor;
