"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const JsonDiff = require("rfc6902");
/**
 * Checks if objects are equal
 */
function isDeepEqual(o1, o2) {
    return JsonDiff.createPatch(o1, o2).length === 0;
}
exports.isDeepEqual = isDeepEqual;
/**
 * Deep-clone an object. Note that this does not work on object containing
 * functions.
 * @param {object} obj - the object to deep-clone
 * @returns {object}
 */
function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
exports.deepClone = deepClone;
function parseToNumber(value) {
    if (typeof value !== 'undefined' && !isNaN(Number(value))) {
        return Number(value);
    }
    return null;
}
exports.parseToNumber = parseToNumber;
function parseTime(timeString) {
    try {
        return new Date(timeString);
    }
    catch (e) {
        return null;
    }
}
exports.parseTime = parseTime;
function parseAttributes(rawAttributes, warningMessage, log) {
    let attributes = {};
    if (rawAttributes) {
        try {
            attributes = JSON.parse(rawAttributes);
        }
        catch (e) {
            log.warn(warningMessage);
        }
    }
    return attributes;
}
exports.parseAttributes = parseAttributes;
/**
 * Construct URI with query parameters
 */
class UriBuilder {
    constructor(base) {
        this.base = base.replace(/\/$/, '');
        this.args = [];
        this.paths = [];
    }
    arg(name, value) {
        if (typeof value !== 'undefined') {
            this.args.push(encodeURIComponent(name) + '=' + encodeURIComponent(value));
        }
        return this;
    }
    path(name) {
        this.paths.push(encodeURIComponent(name));
        return this;
    }
    build() {
        let result = this.base;
        if (this.paths.length) {
            result += '/' + this.paths.join('/');
        }
        if (this.args.length) {
            result += '?' + this.args.join('&');
        }
        return result;
    }
}
exports.UriBuilder = UriBuilder;
