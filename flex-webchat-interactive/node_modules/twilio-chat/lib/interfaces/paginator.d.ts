/**
 * Pagination helper class.
 *
 * @interface
 * @property {Array} items Elements on current page
 * @property {boolean} hasNextPage Indicates the existence of next page
 * @property {boolean} hasPrevPage Indicates the existence of previous page
 * @function {Promise<Paginator>} nextPage() Request next page. Does not modify existing object
 * @function {Promise<Paginator>} prevPage() Request previous page. Does not modify existing object
 */
interface Paginator<T> {
    hasNextPage: boolean;
    hasPrevPage: boolean;
    items: Array<T>;
    /**
     * Request next page.
     * Does not modify existing object.
     * @return {Promise<Paginator<T>>}
     */
    nextPage(): Promise<Paginator<T>>;
    /**
     * Request previous page.
     * Does not modify existing object.
     * @return {Promise<Paginator<T>>}
     */
    prevPage(): Promise<Paginator<T>>;
}
/**
 * @classdesc Pagination helper class.
 * @alias Paginator
 * @property {Array} items Array of elements of type T on current page
 * @property {boolean} hasNextPage Indicates the existence of next page
 * @property {boolean} hasPrevPage Indicates the existence of previous page
 */
declare class SamplePaginator<T> implements Paginator<T> {
    hasNextPage: boolean;
    hasPrevPage: boolean;
    items: T[];
    /**
     * Request next page.
     * Does not modify existing object.
     * @return {Promise<Paginator<T>>}
     */
    nextPage(): Promise<Paginator<T>>;
    /**
     * Request previous page.
     * Does not modify existing object.
     * @return {Promise<Paginator<T>>}
     */
    prevPage(): Promise<Paginator<T>>;
}
export { Paginator, SamplePaginator };
