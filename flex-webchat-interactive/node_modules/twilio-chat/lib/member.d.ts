/// <reference types="node" />
import { EventEmitter } from 'events';
import { UserDescriptor } from './userdescriptor';
import { Users } from './data/users';
import { User } from './user';
import { Session } from './session';
interface MemberDescriptor {
    attributes?: Object;
    dateCreated: any;
    dateUpdated: any;
    identity: string;
    roleSid?: string;
    lastConsumedMessageIndex: number;
    lastConsumptionTimestamp: number;
    type?: Member.Type;
    userInfo: string;
}
export interface MemberServices {
    users: Users;
    session: Session;
}
declare namespace Member {
    type UpdateReason = 'attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' | 'lastConsumedMessageIndex' | 'lastConsumptionTimestamp';
    type Type = 'chat' | 'sms' | 'whatsapp';
    interface UpdatedEventArgs {
        member: Member;
        updateReasons: Member.UpdateReason[];
    }
}
/**
 * @classdesc A Member represents a remote Client in a Channel.
 * @property {Object} attributes - Object with custom attributes for Member
 * @property {Channel} channel - The Channel the remote Client is a Member of
 * @property {Date} dateCreated - The Date this Member was created
 * @property {Date} dateUpdated - The Date this Member was last updated
 * @property {String} identity - The identity of the remote Client
 * @property {Boolean} isTyping - Whether or not this Member is currently typing
 * @property {Number} lastConsumedMessageIndex - Latest consumed Message index by this Member.
 * Note that just retrieving messages on a client endpoint does not mean that messages are consumed/read,
 * please consider reading about [Consumption Horizon feature]{@link https://www.twilio.com/docs/api/chat/guides/consumption-horizon}
 * to find out how to mark messages as consumed.
 * @property {Date} lastConsumptionTimestamp - Date when Member has updated his consumption horizon
 * @property {String} sid - The server-assigned unique identifier for the Member
 * @property {Member#Type} type - The type of Member
 * @fires Member#typingEnded
 * @fires Member#typingStarted
 * @fires Member#updated
 */
declare class Member extends EventEmitter {
    private state;
    private services;
    readonly channel: any;
    get sid(): string;
    get attributes(): Object;
    get dateCreated(): Date;
    get dateUpdated(): Date;
    get identity(): string;
    get isTyping(): boolean;
    get lastConsumedMessageIndex(): number;
    get lastConsumptionTimestamp(): Date;
    get roleSid(): string;
    get type(): Member.Type;
    /**
     * The update reason for <code>updated</code> event emitted on Member
     * @typedef {('attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' |
      'lastConsumedMessageIndex' | 'lastConsumptionTimestamp')} Member#UpdateReason
     */
    /**
     * The type of Member
     * @typedef {('chat' | 'sms' | 'whatsapp')} Member#Type
     */
    constructor(services: MemberServices, channel: any, data: MemberDescriptor, sid: string);
    /**
     * Private method used to start or reset the typing indicator timeout (with event emitting)
     * @private
     */
    _startTyping(timeout: any): this;
    /**
     * Private method function used to stop typing indicator (with event emitting)
     * @private
     */
    _endTyping(): void;
    /**
     * Private method function used update local object's property roleSid with new value
     * @private
     */
    _update(data: any): this;
    /**
     * Gets User Descriptor for this member. Supported only for <code>chat</code> type of Members
     * @returns {Promise<UserDescriptor|Error>}
     */
    getUserDescriptor(): Promise<UserDescriptor>;
    /**
     * Gets User for this member and subscribes to it. Supported only for <code>chat</code> type of Members
     * @returns {Promise<User|Error>}
     */
    getUser(): Promise<User>;
    /**
     * Remove Member from the Channel.
     * @returns {Promise<void|Error|SessionError>}
     */
    remove(): Promise<any>;
    /**
     * Edit member attributes.
     * @param {Object} attributes new attributes for Member.
     * @returns {Promise<Member|Error|SessionError>}
     */
    updateAttributes(attributes: Object): Promise<this>;
}
export { MemberDescriptor, Member };
/**
 * Fired when Member started to type.
 * @event Member#typingStarted
 * @type {Member}
 */
/**
 * Fired when Member ended to type.
 * @event Member#typingEnded
 * @type {Member}
 */
/**
 * Fired when Member's fields has been updated.
 * @event Member#updated
 * @type {Object}
 * @property {Member} member - Updated Member
 * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons
 */
