"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const util_1 = require("./util");
const logger_1 = require("./logger");
const log = logger_1.Logger.scope('Member');
/**
 * @classdesc A Member represents a remote Client in a Channel.
 * @property {Object} attributes - Object with custom attributes for Member
 * @property {Channel} channel - The Channel the remote Client is a Member of
 * @property {Date} dateCreated - The Date this Member was created
 * @property {Date} dateUpdated - The Date this Member was last updated
 * @property {String} identity - The identity of the remote Client
 * @property {Boolean} isTyping - Whether or not this Member is currently typing
 * @property {Number} lastConsumedMessageIndex - Latest consumed Message index by this Member.
 * Note that just retrieving messages on a client endpoint does not mean that messages are consumed/read,
 * please consider reading about [Consumption Horizon feature]{@link https://www.twilio.com/docs/api/chat/guides/consumption-horizon}
 * to find out how to mark messages as consumed.
 * @property {Date} lastConsumptionTimestamp - Date when Member has updated his consumption horizon
 * @property {String} sid - The server-assigned unique identifier for the Member
 * @property {Member#Type} type - The type of Member
 * @fires Member#typingEnded
 * @fires Member#typingStarted
 * @fires Member#updated
 */
class Member extends events_1.EventEmitter {
    /**
     * The update reason for <code>updated</code> event emitted on Member
     * @typedef {('attributes' | 'dateCreated' | 'dateUpdated' | 'roleSid' |
      'lastConsumedMessageIndex' | 'lastConsumptionTimestamp')} Member#UpdateReason
     */
    /**
     * The type of Member
     * @typedef {('chat' | 'sms' | 'whatsapp')} Member#Type
     */
    constructor(services, channel, data, sid) {
        super();
        this.channel = channel;
        this.services = services;
        this.state = {
            attributes: util_1.parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for member: ' + sid, log),
            dateCreated: data.dateCreated ? util_1.parseTime(data.dateCreated) : null,
            dateUpdated: data.dateCreated ? util_1.parseTime(data.dateUpdated) : null,
            sid: sid,
            typingTimeout: null,
            isTyping: false,
            identity: data.identity || null,
            roleSid: data.roleSid || null,
            lastConsumedMessageIndex: Number.isInteger(data.lastConsumedMessageIndex) ? data.lastConsumedMessageIndex : null,
            lastConsumptionTimestamp: data.lastConsumptionTimestamp ? util_1.parseTime(data.lastConsumptionTimestamp) : null,
            type: data.type || 'chat',
            userInfo: data.userInfo
        };
        if (!data.identity && !data.type) {
            throw new Error('Received invalid Member object from server: Missing identity or type of Member.');
        }
    }
    get sid() { return this.state.sid; }
    get attributes() { return this.state.attributes; }
    get dateCreated() { return this.state.dateCreated; }
    get dateUpdated() { return this.state.dateUpdated; }
    get identity() { return this.state.identity; }
    get isTyping() { return this.state.isTyping; }
    get lastConsumedMessageIndex() { return this.state.lastConsumedMessageIndex; }
    get lastConsumptionTimestamp() { return this.state.lastConsumptionTimestamp; }
    get roleSid() { return this.state.roleSid; }
    get type() { return this.state.type; }
    /**
     * Private method used to start or reset the typing indicator timeout (with event emitting)
     * @private
     */
    _startTyping(timeout) {
        clearTimeout(this.state.typingTimeout);
        this.state.isTyping = true;
        this.emit('typingStarted', this);
        this.channel.emit('typingStarted', this);
        this.state.typingTimeout = setTimeout(() => this._endTyping(), timeout);
        return this;
    }
    /**
     * Private method function used to stop typing indicator (with event emitting)
     * @private
     */
    _endTyping() {
        if (!this.state.typingTimeout) {
            return;
        }
        this.state.isTyping = false;
        this.emit('typingEnded', this);
        this.channel.emit('typingEnded', this);
        clearInterval(this.state.typingTimeout);
        this.state.typingTimeout = null;
    }
    /**
     * Private method function used update local object's property roleSid with new value
     * @private
     */
    _update(data) {
        let updateReasons = [];
        let updateAttributes = util_1.parseAttributes(data.attributes, 'Retrieved malformed attributes from the server for member: ' + this.state.sid, log);
        if (data.attributes && !util_1.isDeepEqual(this.state.attributes, updateAttributes)) {
            this.state.attributes = updateAttributes;
            updateReasons.push('attributes');
        }
        let updatedDateUpdated = util_1.parseTime(data.dateUpdated);
        if (data.dateUpdated &&
            updatedDateUpdated.getTime() !== (this.state.dateUpdated && this.state.dateUpdated.getTime())) {
            this.state.dateUpdated = updatedDateUpdated;
            updateReasons.push('dateUpdated');
        }
        let updatedDateCreated = util_1.parseTime(data.dateCreated);
        if (data.dateCreated &&
            updatedDateCreated.getTime() !== (this.state.dateCreated && this.state.dateCreated.getTime())) {
            this.state.dateCreated = updatedDateCreated;
            updateReasons.push('dateCreated');
        }
        if (data.roleSid && this.state.roleSid !== data.roleSid) {
            this.state.roleSid = data.roleSid;
            updateReasons.push('roleSid');
        }
        if ((Number.isInteger(data.lastConsumedMessageIndex) || data.lastConsumedMessageIndex === null)
            && this.state.lastConsumedMessageIndex !== data.lastConsumedMessageIndex) {
            this.state.lastConsumedMessageIndex = data.lastConsumedMessageIndex;
            updateReasons.push('lastConsumedMessageIndex');
        }
        if (data.lastConsumptionTimestamp) {
            let lastConsumptionTimestamp = new Date(data.lastConsumptionTimestamp);
            if (!this.state.lastConsumptionTimestamp ||
                this.state.lastConsumptionTimestamp.getTime() !== lastConsumptionTimestamp.getTime()) {
                this.state.lastConsumptionTimestamp = lastConsumptionTimestamp;
                updateReasons.push('lastConsumptionTimestamp');
            }
        }
        if (updateReasons.length > 0) {
            this.emit('updated', { member: this, updateReasons: updateReasons });
        }
        return this;
    }
    /**
     * Gets User Descriptor for this member. Supported only for <code>chat</code> type of Members
     * @returns {Promise<UserDescriptor|Error>}
     */
    async getUserDescriptor() {
        if (this.type != 'chat') {
            throw new Error('Getting User Descriptor is not supported for this Member type: ' + this.type);
        }
        return this.services.users.getUserDescriptor(this.state.identity);
    }
    /**
     * Gets User for this member and subscribes to it. Supported only for <code>chat</code> type of Members
     * @returns {Promise<User|Error>}
     */
    async getUser() {
        if (this.type != 'chat') {
            throw new Error('Getting User is not supported for this Member type: ' + this.type);
        }
        return this.services.users.getUser(this.state.identity, this.state.userInfo);
    }
    /**
     * Remove Member from the Channel.
     * @returns {Promise<void|Error|SessionError>}
     */
    async remove() {
        return this.channel.removeMember(this);
    }
    /**
     * Edit member attributes.
     * @param {Object} attributes new attributes for Member.
     * @returns {Promise<Member|Error|SessionError>}
     */
    async updateAttributes(attributes) {
        if (typeof attributes === 'undefined') {
            throw new Error('Attributes is required parameter');
        }
        else if (attributes === null) {
            throw new Error('Attributes can\'t be null');
        }
        else if (attributes.constructor !== Object) {
            throw new Error('Attributes must be a valid JSON object');
        }
        await this.services.session.addCommand('editMemberAttributes', {
            channelSid: this.channel.sid,
            memberSid: this.sid,
            attributes: JSON.stringify(attributes)
        });
        return this;
    }
}
exports.Member = Member;
/**
 * Fired when Member started to type.
 * @event Member#typingStarted
 * @type {Member}
 */
/**
 * Fired when Member ended to type.
 * @event Member#typingEnded
 * @type {Member}
 */
/**
 * Fired when Member's fields has been updated.
 * @event Member#updated
 * @type {Object}
 * @property {Member} member - Updated Member
 * @property {Member#UpdateReason[]} updateReasons - Array of Member's updated event reasons
 */
