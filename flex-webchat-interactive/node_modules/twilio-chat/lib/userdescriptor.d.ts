import { User } from './user';
import { Users } from './data/users';
export interface UserDescriptorServices {
    users: Users;
}
/**
 * @classdesc Extended user information.
 * Note that <code>online</code> and <code>notifiable</code> properties are eligible
 * to use only if reachability function is enabled.
 * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.
 *
 * @property {String} identity - User identity
 * @property {String} friendlyName - User friendly name, null if not set
 * @property {Object} attributes - Object with custom attributes for user
 * @property {Boolean} online - User real-time channel connection status
 * @property {Boolean} notifiable - User push notification registration status
 *
 * @constructor
 * @param {Users} users Users instance
 * @param {Object} descriptor User descriptor data object
 */
declare class UserDescriptor {
    private services;
    private descriptor;
    readonly identity: string;
    readonly friendlyName: string;
    readonly attributes: Object;
    readonly online: boolean;
    readonly notifiable: boolean;
    /**
     * @param {UserDescriptorServices} services - services, needed for UserDescriptor
     * @param {Object} descriptor User descriptor data object
     * @private
     */
    constructor(services: UserDescriptorServices, descriptor: any);
    /**
     * Gets User object from descriptor and subscribes to it.
     * @returns {Promise<User>}
     */
    subscribe(): Promise<User>;
    _getDescriptor(): any;
}
export { UserDescriptor };
