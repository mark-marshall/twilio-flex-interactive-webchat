import { Notifications } from 'twilio-notifications';
import { Transport } from '../interfaces/transport';
import { Configuration } from '../configuration';
export interface TypingIndicatorServices {
    transport: Transport;
    notificationClient: Notifications;
}
/**
 * An important note in regards to typing timeout timers. There are two places that the SDK can get the "typing_timeout" attribute from. The first
 * place that the attribute appears in is the response received from POST -> /v1/typing REST call. In the body of that response, the value of the
 * "typing_timeout" attribute will be exactly the same as defined in the console. The second place that the attribute appears in is from a
 * notification of type "twilio.ipmsg.typing_indicator". In this case, the "typing_timeout" value will be +1 of that in the console. This
 * intentional. The timeout returned from the POST -> /v1/typing call should be used to disable further calls for that period of time. On contrary,
 * the timeout returned from the notification should be used as the timeout for the "typingEnded" event, +1 is to account for latency.
 *
 * @private
 */
/**
 * @class TypingIndicator
 *
 * @constructor
 * @private
 */
declare class TypingIndicator {
    private readonly services;
    private readonly config;
    private sentUpdates;
    private getChannel;
    private serviceTypingTimeout;
    constructor(config: Configuration, services: TypingIndicatorServices, getChannel: any);
    get typingTimeout(): number;
    /**
     * Initialize TypingIndicator controller
     * Registers for needed message types and sets listeners
     * @private
     */
    initialize(): void;
    /**
     * Remote members typing events handler
     * @private
     */
    handleRemoteTyping(message: any): void;
    /**
     * Send typing event for the given channel sid
     * @param {String} channelSid
     */
    send(channelSid: string): any;
    private _send;
}
export { TypingIndicator };
