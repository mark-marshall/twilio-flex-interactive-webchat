"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const logger_1 = require("./logger");
const util_1 = require("./util");
const log = logger_1.Logger.scope('User');
/**
 * @classdesc Extended user information.
 * Note that <code>online</code> and <code>notifiable</code> properties are eligible
 * to use only if reachability function is enabled.
 * You may check if it is enabled by reading value of {@link Client}'s <code>reachabilityEnabled</code> property.
 *
 * @property {String} identity - User identity
 * @property {String} friendlyName - User friendly name, null if not set
 * @property {Object} attributes - Object with custom attributes for user
 * @property {Boolean} online - User real-time channel connection status
 * @property {Boolean} notifiable - User push notification registration status
 *
 * @fires User#updated
 * @fires User#userSubscribed
 * @fires User#userUnsubscribed
 *
 * @constructor
 * @param {String} identity - Identity of user
 * @param {String} entityId - id of user's object
 * @param {Object} datasync - datasync service
 * @param {Object} session - session service
 */
class User extends events_1.EventEmitter {
    /**
     * The update reason for <code>updated</code> event emitted on User
     * @typedef {('friendlyName' | 'attributes' | 'online' | 'notifiable')} User#UpdateReason
     */
    constructor(identity, entityName, services) {
        super();
        this.subscribed = 'initializing';
        this.setMaxListeners(0);
        this.services = services;
        this.state = {
            identity: identity,
            entityName: entityName,
            friendlyName: null,
            attributes: {},
            online: null,
            notifiable: null
        };
    }
    get identity() { return this.state.identity; }
    set identity(identity) { this.state.identity = identity; }
    set entityName(name) { this.state.entityName = name; }
    get attributes() { return this.state.attributes; }
    get friendlyName() { return this.state.friendlyName; }
    get online() { return this.state.online; }
    get notifiable() { return this.state.notifiable; }
    get isSubscribed() { return this.subscribed == 'subscribed'; }
    // Handles service updates
    _update(key, value) {
        let updateReasons = [];
        log.debug('User for', this.state.identity, 'updated:', key, value);
        switch (key) {
            case 'friendlyName':
                if (this.state.friendlyName !== value.value) {
                    updateReasons.push('friendlyName');
                    this.state.friendlyName = value.value;
                }
                break;
            case 'attributes':
                let updateAttributes = {};
                try {
                    updateAttributes = JSON.parse(value.value);
                }
                catch (e) {
                    log.warn('Retrieved malformed attributes from the server for user: ' + this.state.identity);
                }
                if (!util_1.isDeepEqual(this.state.attributes, updateAttributes)) {
                    this.state.attributes = updateAttributes;
                    updateReasons.push('attributes');
                }
                break;
            case 'reachability':
                if (this.state.online !== value.online) {
                    this.state.online = value.online;
                    updateReasons.push('online');
                }
                if (this.state.notifiable !== value.notifiable) {
                    this.state.notifiable = value.notifiable;
                    updateReasons.push('notifiable');
                }
                break;
            default:
                return;
        }
        if (updateReasons.length > 0) {
            this.emit('updated', { user: this, updateReasons: updateReasons });
        }
    }
    // Fetch reachability info
    _updateReachabilityInfo(map, update) {
        if (!this.services.session.reachabilityEnabled) {
            return Promise.resolve();
        }
        return map.get('reachability')
            .then(update)
            .catch(err => { log.warn('Failed to get reachability info for ', this.state.identity, err); });
    }
    // Fetch user
    async _fetch() {
        if (!this.state.entityName) {
            return this;
        }
        this.promiseToFetch = this.services.syncClient.map({ id: this.state.entityName, mode: 'open_existing', includeItems: true })
            .then(map => {
            this.entity = map;
            map.on('itemUpdated', args => {
                log.debug(this.state.entityName + ' (' + this.state.identity + ') itemUpdated: ' + args.item.key);
                return this._update(args.item.key, args.item.value);
            });
            return Promise.all([
                map.get('friendlyName')
                    .then(item => this._update(item.key, item.value)),
                map.get('attributes')
                    .then(item => this._update(item.key, item.value)),
                this._updateReachabilityInfo(map, item => this._update(item.key, item.value))
            ]);
        })
            .then(() => {
            log.debug('Fetched for', this.identity);
            this.subscribed = 'subscribed';
            this.emit('userSubscribed', this);
            return this;
        })
            .catch(err => {
            this.promiseToFetch = null;
            throw err;
        });
        return this.promiseToFetch;
    }
    _ensureFetched() {
        return this.promiseToFetch || this._fetch();
    }
    /**
     * Updates user attributes.
     * @param {Object} attributes - Updated attributes
     * @returns {Promise<User|Error|SessionError>}
     */
    async updateAttributes(attributes) {
        if (typeof attributes === 'undefined') {
            throw new Error('Attributes is required parameter');
        }
        else if (attributes === null) {
            throw new Error('Attributes can\'t be null');
        }
        else if (attributes.constructor !== Object) {
            throw new Error('Attributes must be a valid JSON object');
        }
        if (this.subscribed == 'unsubscribed') {
            throw new Error('Can\'t modify unsubscribed object');
        }
        await this.services.session.addCommand('editUserAttributes', {
            username: this.state.identity,
            attributes: JSON.stringify(attributes)
        });
        return this;
    }
    /**
     * Update Users friendlyName.
     * @param {String} friendlyName - Updated friendlyName
     * @returns {Promise<User|Error|SessionError>}
     */
    async updateFriendlyName(friendlyName) {
        if (friendlyName && typeof friendlyName !== 'string') {
            throw new Error('friendlyName must be string or empty');
        }
        if (this.subscribed == 'unsubscribed') {
            throw new Error('Can\'t modify unsubscribed object');
        }
        await this.services.session.addCommand('editUserFriendlyName', {
            username: this.state.identity,
            friendlyName: friendlyName
        });
        return this;
    }
    /**
     * Removes User from subscription list.
     * @returns {Promise<void>} Promise of completion
     */
    async unsubscribe() {
        if (this.promiseToFetch) {
            await this.promiseToFetch;
            this.entity.close();
            this.promiseToFetch = null;
            this.subscribed = 'unsubscribed';
            this.emit('userUnsubscribed', this);
        }
    }
}
exports.User = User;
/**
 * Fired when User's properties or reachability status have been updated.
 * @event User#updated
 * @type {Object}
 * @property {User} user - Updated User
 * @property {User#UpdateReason[]} updateReasons - Array of User's updated event reasons
 */
/**
 * Fired when Client is subscribed to User.
 * @event User#userSubscribed
 * @type {User}
 */
/**
 * Fired when Client is unsubscribed from this User.
 * @event User#userUnsubscribed
 * @type {User}
 */
